<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KERI&#39;s Lab</title>
    <description>KERI&#39;s Lab へようこそ。ここでは、趣味の電子工作やサーバーづくりなどを紹介しています。</description>
    <link>http://kerikeri.top/</link>
    <atom:link href="http://kerikeri.top/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 31 Oct 2015 23:29:47 +0900</pubDate>
    <lastBuildDate>Sat, 31 Oct 2015 23:29:47 +0900</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>備忘録</title>
        <description>&lt;h1&gt;Raspberry Pi 2 Type Bでサーバー作り&lt;/h1&gt;
&lt;section&gt;

	&lt;h1&gt;ラズパイの用意&lt;/h1&gt;
	&lt;article&gt;
		&lt;ol&gt;
			&lt;li&gt;ラズパイ用のOS「NOOBS」を&lt;a href=&quot;http://raspberrypi.org/downloads/&quot; target=&quot;_blank&quot;&gt;raspberrypi.org&lt;/a&gt;からDLして解凍する。&lt;/li&gt;
			&lt;li&gt;microSDカードをFAT32でフォーマットする。&lt;/li&gt;
			&lt;li&gt;解凍したファイルをSDカードにコピーする。&lt;/li&gt;
			&lt;li&gt;ラズパイにSDカード、キーボード、LANケーブル（またはWiFiドングル）をつないで電源を入れる。&lt;/li&gt;
		&lt;/ol&gt;
	&lt;/article&gt;

	&lt;h1&gt;無線LANの接続&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　WiFiドングルをラズパイに差す。&lt;/p&gt;
		&lt;pre&gt;$ifconfig&lt;/pre&gt;
		&lt;p&gt;このコマンドで、インターフェースを確認する。&lt;/p&gt;
		&lt;pre&gt;$iwconfig&lt;/pre&gt;
		&lt;p&gt;このコマンドでWiFi情報を確認できる。&lt;/p&gt;
		&lt;p&gt;　次のファイルを編集して、ハードウェアインターフェースの設定をする。&lt;/p&gt;
		&lt;pre&gt;
$sudo vim /etc/network/interfaces

auto lo
iface lo inet loopback

auto eth0
allow-hotplug eth0
iface eth0 inet static
address 192.168.11.2	←your IP
netmask 255.255.255.0	←your subnetmask
gateway 192.168.11.1	←your router IP
dns-nameserver 8.8.8.8 10.255.0.1

auto wlan0
allow-hotplug wlan0
iface wlan0 inet static
address 192.168.11.2	←your IP
netmask 255.255.255.0	←your subnetmask
gateway 192.168.11.1	←your router IP
dns-nameserver 8.8.8.8 10.255.0.1

wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

auto wlan1
allow-hotplug wlan1
iface wlan0 inet manual
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
		&lt;/pre&gt;
		&lt;p&gt;次のコマンド&lt;/p&gt;
		&lt;pre&gt;$wpa_passphrase &quot;your SSID&quot; &quot;Password&quot;&lt;/pre&gt;
		&lt;p&gt;で表示された内容をもとに次のファイルの下に追加で記述する。&lt;/p&gt;
		&lt;pre&gt;
$sudo vim /etc/wpa_supplicant/wpa_supplicant.conf

~~~
network={
		ssid=&quot;your SSID&quot;
		#psk=&quot;Password&quot;
		psk=&quot;.......&quot;
		key_mgmt=WPA-PSK
		proto=WPA WPA2
		pairwise=CCMP TKIP
		group=CCMP TKIP WEP104 WEP40
}						&lt;/pre&gt;
		&lt;p&gt;　これでラズパイを再起動すればつながるはず。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h1&gt;Webサーバー作り&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　まずは、ラズパイのローカルIPを固定にする。&lt;/p&gt;
		&lt;ol&gt;
			&lt;li&gt;ラズパイ上でラズパイ自身のローカルIPアドレスを確認しておく。&lt;/li&gt;
			&lt;pre&gt;$ip addr&lt;/pre&gt;
			&lt;li&gt;家のルーターの管理設定にログインして、ラズパイのIPの設定を、「自動割り当て」から「手動割り当て」に変更する。&lt;/li&gt;
		&lt;/ol&gt;
		&lt;p&gt;　次に、Webサーバーアプリの「Apache2」をインストールする。&lt;/p&gt;
		&lt;pre&gt;$sudo apt-get install apache2&lt;/pre&gt;
		&lt;p&gt;　これで、とりあえずはローカルでサーバーとして使うことができる。ローカルネットワークの端末のブラウザでラズパイのローカルIPアドレスを入力すれば、アクセスできる。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h1&gt;サーバーを外部へ公開する&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　今の状態では、LANからしかサーバーにアクセスできない。これを外のネットワークからでもアクセスできるようにする。&lt;/p&gt;
		&lt;p&gt;　まず、家のルーターから外への接続用のポートを開放する。&lt;/p&gt;
		&lt;ol&gt;
			&lt;li&gt;ルーターの管理設定に入る。&lt;/li&gt;
			&lt;li&gt;ルータ設定のポート変換を選ぶ&lt;/li&gt;
			&lt;li&gt;ポート変換の新規追加で、LAN側IPアドレスをラズパイのローカルIPアドレスに、LAN側ポートを80にする。&lt;/li&gt;
			&lt;li&gt;同じように22ポートも開放する。（80はHTTP用、22はSSH用である）&lt;/li&gt;
			&lt;li&gt;ラズパイをDMZ(非武装地帯)に置くことですべてのポートを開放することができるが、ファイアウォールなどを適切に設定して、使わないポートをふさがなくてはならない。グローバルからローカルに入るとき、ルーターのファイアウォールによって守られているがDMZはその外にある。したがって、ラズパイは破壊されやすくなるが、たとえラズパイが破壊されてもローカルまで破壊されることは少なくなる。&lt;/li&gt;
			&lt;li&gt;ポートの開放状況は以下のコマンドで確認できる。&lt;pre&gt;$nmap&lt;/pre&gt;&lt;/li&gt;
		&lt;/ol&gt;
		&lt;p&gt;　次に、&lt;a href=&quot;http://www.ugtop.com/spill.shtml&quot; target=&quot;_blank&quot;&gt;確認くん&lt;/a&gt;により自分の家のグローバルIPアドレスを確認する。家のネットワークからアクセスしましょう。&lt;/p&gt;
		&lt;p&gt;　これで、適当なブラウザから、このグローバルIPアドレスにアクセスすれば、どこからでもラズパイのWebサーバーにアクセスできる。（ドメインはまだ取得していないので、IPアドレスを直打ちして接続している）&lt;/p&gt;
	&lt;/article&gt;

	&lt;h1&gt;独自ドメインを取得する&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　ポートの開放により外部からサーバーにアクセスできるようになった。しかし、今のままではIPアドレスにアクセスなのでいまいち。そこで次は独自ドメインを取得して自分専用のURLをGETする。&lt;/p&gt;
		&lt;p&gt;　ドメイン取得をできるサイトはいくつかあるが、ネット上で評価のよかった「&lt;a href=&quot;http://www.muumuudomain.com&quot; target=&quot;_blank&quot;&gt;ムームードメイン&lt;/a&gt;」で取得した。[.top]一番安くて、なんと77円＋税/年！とても安い。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h1&gt;DNSサーバーとは&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　独自ドメインを取得しましたが、取得したドメインはまだラズパイのIPアドレス（家のグローバルIPアドレス）に紐ついていません。それを紐つけるのがDNSサーバーです。DNS情報はあまりにも多いので、一つのDNSサーバーで管理しているわけではなく、ネット上に無数に散らばっています。したがってあるDNSサーバーに登録すれば、いろいろなDNSサーバーを経由して目的のIPアドレスを知ることができます。DNS情報のことをレコードと言い、以下に分類されます。&lt;/p&gt;
		&lt;ul&gt;
			&lt;li&gt;Aレコード：ドメイン名からIPアドレスを返す（正引き）&lt;/li&gt;
			&lt;li&gt;PTRレコード：IPアドレスからドメイン名を返す（逆引き）&lt;/li&gt;
			&lt;li&gt;CNAMEレコード：ドメイン名から別のドメイン名を返す&lt;/li&gt;
			&lt;li&gt;NSレコード：「再起問い合わせ」や「反復問い合わせ」の際に、「ここへ問い合わせよ」と教えてくれる&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/article&gt;

	&lt;h1&gt;MyDNS.jpの登録&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　普通、グローバルIPアドレスは動的に割り当てられるので、それとホスト名（ドメイン名）を動的に登録・管理するのがDDNSです。無料DDNSのひとつに&lt;a href=&quot;http://www.mydns.jp&quot; target=&quot;_blank&quot;&gt;MyDNS.jp&lt;/a&gt;があるので、今回はそれを使います。まずは会員登録をします。そして「IP ADDR DIRECT」のところに家のグローバルIPアドレスを記載します。次に、「DOMAIN INFO」のところに自分の取得したホスト名（独自ドメイン）を記載します。欄が多いですが、それ以外は何も書かなくて大丈夫です。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h1&gt;DNSの浸透時間&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　ここまでの作業をすれば、取得した独自ドメインをブラウザのURLに書くだけで自分のサーバーにつなことができます。しかし、すぐにつなぐことはできません。先にも書いたようにDNSサーバーはネット上に無数に散らばっていますので、最初にアクセスしたDNSが自分のドメインとIPの関連付けを持っているとは限りません。DNSからDNSへと広がっていき、次第に世界中からアクセスできるようになります。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h1&gt;動的IPの自動更新&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　ムームードメインで、独自ドメインを取得した。MyDNS.jpにも登録した。次にやることは、動的IPアドレスの自動更新である。定期的にグローバルIPの変更をチェックして&lt;a href=&quot;http://www.mydns.jp&quot; target=&quot;_blank&quot;&gt;MyDNS.jp&lt;/a&gt;に通知をすればよい。それには以下のコマンドを実行する。&lt;/p&gt;
		&lt;pre&gt;$ wget -O- &#39;http://mydnsXXXXXX:PASSWORD@www.mydns.jp/login.html&#39;&lt;/pre&gt;
		&lt;p&gt;これをcronなどを使って定期的に実行すればよい。&lt;/p&gt;
	&lt;/article&gt;
&lt;/section&gt;

&lt;h1&gt;vim の設定&lt;/h1&gt;
&lt;section&gt;

	&lt;h1&gt;.vimrc&lt;/h1&gt;
	&lt;pre&gt;
syntax enable
set number
set autoindent
set smartindent
set backspace=start,eol,indent
set mouse=a
set tabstop=4
set shiftwidth=4
&quot;set expandtab
set encoding=utf-8
set cursorline
set nocompatible

filetype plugin indent off

if has(&#39;vim_starting&#39;)
		set runtimepath+=~/.vim/bundle/neobundle.vim
		call neobundle#begin(expand(&#39;~/.vim/bundle&#39;))
endif

NeoBundle &#39;mattn/emmet-vim&#39;
NeoBundle &#39;anyakichi/vim-surround&#39;
NeoBundle &#39;scrooloose/nerdcommenter&#39;
NeoBundle &#39;hail2u/vim-css3-syntax&#39;
NeoBundle &#39;taichouchou2/html5.vim&#39;
NeoBundle &#39;taichouchou2/vim-javascript&#39;

if has(&#39;vim_starting&#39;)
		call neobundle#end()
endif

filetype plugin indent on
	&lt;/pre&gt;

	&lt;h1&gt;pluginの設定&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　NeoBundleをダウンロードする。&lt;/p&gt;
		&lt;pre&gt;
$ mkdir -p ~.vim/bundle
$ git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim&lt;/pre&gt;
		&lt;p&gt;　プラグインを入れるには.vimrcにNeoBundleから続けてプラグイン名を書き、保存して、vim上で、&lt;/p&gt;
		&lt;pre&gt;:NeoBundleInstall&lt;/pre&gt;
		&lt;p&gt;または&lt;/p&gt;
		&lt;pre&gt;:NeoBundleUpdate&lt;/pre&gt;
		&lt;p&gt;を実行する。&lt;/p&gt;
	&lt;/article&gt;
&lt;/section&gt;

&lt;h1&gt;Git&lt;/h1&gt;
&lt;section&gt;
	&lt;h1&gt;主なコマンド&lt;/h1&gt;
	&lt;article&gt;
		&lt;h1&gt;clone&lt;/h1&gt;
		&lt;p&gt;　設定ファイルやソースファイルなどはGitにおいて管理するよ良い。その際、設定ファイルのあった場所にはcloneしたディレクトリへのショートカットを置いておく。設定ファイルにはユーザー名とパスワードが記述されているものが多いので、それらをアップロードしないように細心の注意を払うこと。Gitは履歴が残るので、たとえファイルを削除しても簡単には消えてくれない。&lt;/p&gt;
		&lt;pre&gt;$git clone https://github.com/your_username/your_repository.git&lt;/pre&gt;
		&lt;p&gt;　cloneを置きたいディレクトリで上のコマンドを実行すると、新たにリポジトリ名のディレクトリが生成される。&lt;/p&gt;
		&lt;h1&gt;add&lt;/h1&gt;
		&lt;p&gt;　新規作成したファイルをGitにあげるにはcloneしているディレクトリに入って、以下のコマンドを実行する。&lt;/p&gt;
		&lt;pre&gt;$git add filename&lt;/pre&gt;
		&lt;h1&gt;commit&lt;/h1&gt;
		&lt;p&gt;ファイルを変更したら、以下のコマンドによりファイルの変更を確定する。commitすると、変更履歴が更新される。（ローカルで使える。）その後pushすることで変更をサーバーへ送る。-aオプションをつけるとaddも一緒にできる。&lt;/p&gt;
		&lt;pre&gt;$git commit filename -m &#39;message&#39;&lt;/pre&gt;
		&lt;h1&gt;push&lt;/h1&gt;
		&lt;p&gt;　commitしたら、cloneしているディレクトリに入って、&lt;/p&gt;
		&lt;pre&gt;$git push&lt;/pre&gt;
		&lt;p&gt;を実行すると、Git上のファイルが更新される。&lt;/p&gt;
		&lt;h1&gt;pull&lt;/h1&gt;
		&lt;p&gt;　ほかの場所で更新した内容をこのPCにも反映させるには、cloneしているディレクトリに入って、以下のコマンドを実行する。&lt;/p&gt;
		&lt;pre&gt;$git pull&lt;/pre&gt;
		&lt;h1&gt;diff&lt;/h1&gt;
		&lt;p&gt;変更の差分を表示する。&lt;/p&gt;
		&lt;pre&gt;$git diff filename&lt;/pre&gt;
	&lt;/article&gt;

&lt;/section&gt;

&lt;h1&gt;Shell Script&lt;/h1&gt;
&lt;section&gt;

	&lt;h1&gt;実行権限をつける&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　テキストファイルを実行可能ファイルにする。&lt;/p&gt;
		&lt;pre&gt;$chmod u+x filename.sh&lt;/pre&gt;
	&lt;/article&gt;

	&lt;h1&gt;実行する&lt;/h1&gt;
	&lt;pre&gt;$ ./filename.sh&lt;/pre&gt;
&lt;/section&gt;

&lt;h1&gt;tarコマンド&lt;/h1&gt;
&lt;section&gt;

	&lt;h1&gt;アーカイブ&lt;/h1&gt;
	&lt;article&gt;
		&lt;ul&gt;
			&lt;li&gt;アーカイブ&lt;/li&gt;
			&lt;pre&gt;$ tar cvf directory&lt;/pre&gt;
			&lt;li&gt;アーカイブして圧縮&lt;/li&gt;
			&lt;pre&gt;$ tar cvzf directory&lt;/pre&gt;
		&lt;/ul&gt;
	&lt;/article&gt;

	&lt;h1&gt;展開&lt;/h1&gt;
	&lt;article&gt;
		&lt;ul&gt;
			&lt;li&gt;展開&lt;/li&gt;
			&lt;pre&gt;$ tar xvf file.tar&lt;/pre&gt;
			&lt;li&gt;解凍して展開&lt;/li&gt;
			&lt;pre&gt;$ tar xvzf file.tar.gz&lt;/pre&gt;
		&lt;/ul&gt;
	&lt;/article&gt;
&lt;/section&gt;

&lt;h1&gt;lnコマンド&lt;/h1&gt;
&lt;section&gt;
	&lt;h1&gt;ハードリンクとシンボリックリンク&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　ハードリンクは、別名の同じファイルといえる。ターゲットとリンクの区別がなく、すべてのファイルに実体があり（ディスク容量を消費）、削除するにはすべてのファイルを削除する必要がある。&lt;/p&gt;
		&lt;p&gt;　シンボリックリンクは、いわゆるショートカットと同じで、パス情報のみを保持している。したがって、実体を削除するとシンボリックリンはエラーになる。&lt;/p&gt;
	&lt;/article&gt;
	&lt;h1&gt;コマンド形式&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　以下のようなコマンドを実行する。&lt;/p&gt;
		&lt;pre&gt;$ ln -fids &amp;lt;ターゲット&amp;gt; &amp;lt;リンク&amp;gt;&lt;/pre&gt;
		&lt;ul&gt;
			&lt;li&gt;-f	指定したリンク先にもともとリンクやファイルがあっても、警告なしに上書きする&lt;/li&gt;
			&lt;li&gt;-i	指定したリンク先にもともとリンクやファイルがあるときに、問合わせる&lt;/li&gt;
			&lt;li&gt;-d	ディレクトリのリンクを作成&lt;/li&gt;
			&lt;li&gt;-s	シンボリックリンクを作成（デフォルトはハードリンク）&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/article&gt;
	&lt;h1&gt;例&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　Gitのdotfilesなどで管理している.vimrcなどを所定の場所に配置するコマンド&lt;/p&gt;
		&lt;pre&gt;$ ln -sf ~/dotfiles/.vimrc ~/.vimrc&lt;/pre&gt;
	&lt;/article&gt;
&lt;/section&gt;

&lt;h1&gt;Surface Pro 3 に Ubuntu15.04を入れる(UEFI環境のデュアルブート)&lt;/h1&gt;
&lt;section&gt;

	&lt;h1&gt;UEFIとは&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　BIOSの代わりに最近のパソコンに導入されたインターフェース。BIOS特有の制約を解消したものと言える。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h1&gt;ホームディレクトリのフォルダを日本語にする。&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　Ubuntuを日本語でインストールすると、ホームディレクトリのフォルダ類（ドキュメントやダウンロードなど）が日本語になっている。このままだと、ターミナルでのアクセスが少し面倒である。これらを英語に変える方法がある。&lt;/p&gt;
		&lt;pre&gt;$LANG=C xdg-user-dirs-gtk-update&lt;/pre&gt;
		&lt;p&gt;を実行して、現れたダイアログで「Don&#39;t ask me again」にチェックを入れて、「Update Names」を押す。&lt;/p&gt;
	&lt;/article&gt;
&lt;/section&gt;

&lt;h1&gt;SSH&lt;/h1&gt;
&lt;section&gt;

	&lt;h1&gt;SSHとは&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　Secure Shell。暗号や認証の技術を利用して、安全にリモートコンピュータと通信するためのプロトコル。 パスワードなどの認証部分を含むすべてのネットワーク上の通信が暗号化される。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h1&gt;ホスト側設定&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;openssh-serverをインストールしておく必要がある。これをインストールする前に、パスワードなどがしっかり設定されているかなどを確認しておくこと。&lt;/p&gt;
		&lt;pre&gt;$sudo apt-get install openssh-server&lt;/pre&gt;
		&lt;p&gt;を実行すると外部からアクセスできるようになる。&lt;/p&gt;
		&lt;pre&gt;$ sudo vim /etc/ssh/sshd_config&lt;/pre&gt;
		&lt;p&gt;　ここで各種設定をする。&lt;/p&gt;
		&lt;pre&gt;
Port 22
		&lt;/pre&gt;
	&lt;/article&gt;

	&lt;h1&gt;鍵の生成&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　鍵はクライアント側で生成することが多い。&lt;/p&gt;
		&lt;pre&gt;$ssh-keygen -t ecdsa -C &quot;comment&quot;&lt;/pre&gt;
		&lt;p&gt;を実行するとファイル名とパスワード作成を求められるが空欄でもENTERを押せば良い。すると、カレントディレクトリに「id_ecdsa」「id_ecdsa.pu」の２つのファイルが生成される。この内、「id_ecdsa.pub」を適当な手段でsshで繋ぎたい相手（ホスト側）に渡す。これは公開鍵なので、誰かに見られても大丈夫である。むしろ、どこからでもアクセスできる場所においておくのが便利である。逆に「id_ecdsa」は、秘密鍵なので、厳重に保管する。&lt;/p&gt;
		&lt;p&gt;　公開鍵をホスト側のPCに移動したら、鍵リストに追加する。ホームディレクトリに.sshディレクトリがなければ作る。&lt;/p&gt;
		&lt;pre&gt;$ mkdir ~/.ssh&lt;/pre&gt;
		&lt;p&gt;　ここに「authorized_keys」というファイルがあれば、以下のように追加する。&lt;/p&gt;
		&lt;pre&gt;$ cat id_ecdsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/pre&gt;
		&lt;p&gt;なければ、新規作成してから、鍵を追加する。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h1&gt;SSHの接続&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　接続コマンドは以下の通り。ログインユーザー名と、ホストアドレスを書く。&lt;/p&gt;
		&lt;pre&gt;$ssh your_username@your_domain.com&lt;/pre&gt;
		&lt;p&gt;　公開鍵認証がうまく設定できていれば、これで接続ができる。失敗していると、パスワードを求められて、パスワード認証となってしまう。(sshd_confでパスワード認証が許可されている場合)&lt;/p&gt;
		&lt;p&gt;　公開鍵認証を使わなくても、パスワード認証でも接続することができる。しかしこれはあまり使われない（使わないほうが良い）。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h1&gt;.ssh/config&lt;/h1&gt;
	&lt;article&gt;
		&lt;p&gt;　sshにつなぐときに毎回アドレスを入力するのは面倒なので、よく使うものはconfigに登録しておくと良い。&lt;/p&gt;
		&lt;pre&gt;
$vim ~/.ssh/config

Host local_raspi
	HostName	192.168.11.2 ←ラズパイのIP
	IdentityFile	~/.ssh/id_ecdsa
	User		kerikun11
	Port		22

Host global_raspi
	HostName	kerikeri.top ←ドメイン
	IdentityFile	~/.ssh/id_ecdsa
	User		kerikun11
	Port		22
		&lt;/pre&gt;
		&lt;p&gt;　接続の仕方は、以下の通り。とても簡単。&lt;/p&gt;
		&lt;pre&gt;$ssh global_raspi&lt;/pre&gt;
	&lt;/article&gt;
&lt;/section&gt;
</description>
        <pubDate>Sat, 31 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/2015/10/31/memo.html</link>
        <guid isPermaLink="true">http://kerikeri.top/2015/10/31/memo.html</guid>
        
        
      </item>
    
  </channel>
</rss>
