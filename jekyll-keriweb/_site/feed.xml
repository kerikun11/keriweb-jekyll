<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KERI&#39;s Lab</title>
    <description>KERI&#39;s Lab へようこそ。ここでは、趣味の電子工作やサーバーづくりなどを紹介しています。</description>
    <link>http://kerikeri.top/</link>
    <atom:link href="http://kerikeri.top/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 12 Jan 2016 19:47:44 +0900</pubDate>
    <lastBuildDate>Tue, 12 Jan 2016 19:47:44 +0900</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>PICでUSB通信</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;以前 &lt;a href=&quot;/posts/2016-01-08-pic18f27j53/&quot;&gt;PIC18F27J53のすすめ&lt;/a&gt; という記事を書きました。それの続きで、今回はUSBの使い方について書きたいと思います。&lt;/p&gt;

&lt;p&gt;今回紹介する方法では、USBをUARTの代わりに使えるようにするものです。PICをPCにつなぐとCOMポートが現れます。&lt;/p&gt;

&lt;p&gt;これならUSBシリアル変換モジュールを使う必要はなくります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-01-10-pic-usb/FT232.jpg&quot; alt=&quot;AE-FT232&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ハードウェアについて&lt;/h2&gt;

&lt;p&gt;PIC18F27J53を使用します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-01-10-pic-usb/view.jpg&quot; alt=&quot;PIC18F27J53&quot; /&gt;&lt;/p&gt;

&lt;p&gt;15,16pinがそれぞれUSBのD-,D+なのでUSBコネクタに接続します。さらに14pinのV_USB端子には3.3VのVCCをつなぎます。&lt;/p&gt;

&lt;p&gt;USBから電源をとるときは、3端子レギュレータを通して3.3Vにするのを忘れずに。&lt;/p&gt;

&lt;p&gt;回路図&lt;br /&gt;
&lt;a href=&quot;/images/2016-01-10-pic-usb/sketch.png&quot;&gt;&lt;img src=&quot;/images/2016-01-10-pic-usb/sketch.png&quot; alt=&quot;PIC18F27J53の回路図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;ソフトウェアについて&lt;/h2&gt;

&lt;h3 id=&quot;picusb-cdc&quot;&gt;PIC用USB-CDCライブラリ&lt;/h3&gt;

&lt;p&gt;Microchipの公式ライブラリ（MLA）を参考に僕がライブラリを作ったので、それを利用します。&lt;/p&gt;

&lt;p&gt;USBのプログラムを自分で実装するのはかなり厳しいです。ライブラリを使いましょう。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;必要なファイル一覧&lt;/h3&gt;

&lt;p&gt;USB関連のファイル&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My_USB_CDC.h&lt;/li&gt;
  &lt;li&gt;My_USB_CDC.c&lt;/li&gt;
  &lt;li&gt;usb_config.h&lt;/li&gt;
  &lt;li&gt;usb_descriptors.c&lt;/li&gt;
  &lt;li&gt;usb/usb.h&lt;/li&gt;
  &lt;li&gt;usb/usb_ch9.h&lt;/li&gt;
  &lt;li&gt;usb/usb_common.h&lt;/li&gt;
  &lt;li&gt;usb/usb_device.c&lt;/li&gt;
  &lt;li&gt;usb/usb_device.h&lt;/li&gt;
  &lt;li&gt;usb/usb_device_cdc.c&lt;/li&gt;
  &lt;li&gt;usb/usb_device_cdc.h&lt;/li&gt;
  &lt;li&gt;usb/usb_device_local.h&lt;/li&gt;
  &lt;li&gt;usb/usb_hal.h&lt;/li&gt;
  &lt;li&gt;usb/usb_hal_pic18.h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;送受信バッファ用ファイル&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My_ringbuf.h&lt;/li&gt;
  &lt;li&gt;My_ringbuf.c&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらのファイルは&lt;a href=&quot;/images/2016-01-10-pic-usb/USB_CDC.zip&quot;&gt;ここ&lt;/a&gt;からダウンロードできます。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;ユーザーが使う関数&lt;/h3&gt;

&lt;p&gt;このうちユーザーが使う関数が含まれるのは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My_USB_CDC.h&lt;/li&gt;
  &lt;li&gt;My_ringbuf.h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つです。&lt;/p&gt;

&lt;h4 id=&quot;myusbcdch&quot;&gt;My_USB_CDC.h&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*******************************************************************
 * Microchip PIC, USB-CDC Library
 * Author:  @Ryokeri14
 * Date:    2016.01.10
 *******************************************************************/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef MY_USB_CDC_H
#define MY_USB_CDC_H
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/** INCLUDES *******************************************************/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdbool.h&amp;gt;
#include &amp;lt;stddef.h&amp;gt;
#include &amp;lt;My_ringbuf.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;usb_config.h&quot;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;usb/usb.h&amp;gt;
#include &amp;lt;usb/usb_device.h&amp;gt;
#include &amp;lt;usb/usb_device_cdc.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/** VALUES ********************************************************/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define USB_RX_BUFFER_SIZE 250
#define USB_TX_BUFFER_SIZE 250
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/** VARIABLES *****************************************************/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usb_rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usb_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** USER FUNCTIONS ************************************************/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** FUNCTIONS *****************************************************/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_buffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP_DeviceCDCBasicDemoInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USER_USB_CALLBACK_EVENT_HANDLER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USB_EVENT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;myringbufh&quot;&gt;My_ringbuf.h&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* 
 * File:   My_ringbuf.h
 * Author: kerikun11
 *
 * Created on 2015/02/26, 19:21
 */&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifndef MY_RINGBUF_H
#define	MY_RINGBUF_H
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdint.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//*************************** ringbuf ***************************//
// headは次に入れるバッファを指す。tailは次に出すバッファを指す。
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;internal_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_put_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_put_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_backspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* MY_RINGBUF_H */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-5&quot;&gt;ライブラリファイルの追加&lt;/h2&gt;

&lt;h3 id=&quot;c&quot;&gt;Cファイルとヘッダーファイル&lt;/h3&gt;

&lt;p&gt;外部のライブラリを使用するとき、Cファイルとヘッダーファイルではプロジェクトへの読み込み方が異なります。&lt;/p&gt;

&lt;p&gt;Cファイルは「Add Existing Item…」からプロジェクトにファイルを追加します。&lt;/p&gt;

&lt;p&gt;一方、ヘッダーファイルは、プロジェクトのプロパティの「Include directory」にヘッダーファイルのあるディレクトリを指定するだけで、プロジェクトに直接ファイルを追加する必要はありません。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;ファイル追加の仕方&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;ダウンロードして解凍したUSB-CDCディレクトリをMPLABのプロジェクトのフォルダ内にコピーします。&lt;/li&gt;
  &lt;li&gt;MPLABXプロジェクトの「Source Files」ディレクトリを右クリックして「Add Existing Item…」からCファイルを追加します。&lt;/li&gt;
  &lt;li&gt;プロジェクトを右クリック→Properties→XC8 Compiler→Include directoriesにUSB_CDCディレクトリを追加します。&lt;/li&gt;
  &lt;li&gt;mainファイルを作成して以下のソースを書けばOKです。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-01-10-pic-usb/p1.png&quot; alt=&quot;プロジェクトのプロパティ&quot; /&gt;
&lt;img src=&quot;/images/2016-01-10-pic-usb/p2.png&quot; alt=&quot;プロジェクトのプロパティ&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;usb&quot;&gt;USB通信の仕方&lt;/h3&gt;

&lt;h4 id=&quot;usb-1&quot;&gt;USB機能の有効化&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;main関数で、&lt;code class=&quot;highlighter-rouge&quot;&gt;USB_CDC_ini();&lt;/code&gt;を呼び出します。&lt;/li&gt;
  &lt;li&gt;mainループで、&lt;code class=&quot;highlighter-rouge&quot;&gt;USB_CDC_task();&lt;/code&gt;を呼び出します。&lt;/li&gt;
  &lt;li&gt;割り込み関数内で、&lt;code class=&quot;highlighter-rouge&quot;&gt;USB_CDC_ISR();&lt;/code&gt;を呼び出します。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-7&quot;&gt;データの送信&lt;/h4&gt;

&lt;p&gt;送りたいデータを&lt;code class=&quot;highlighter-rouge&quot;&gt;usb_tx&lt;/code&gt;というリングバッファにプットすると自動で送信されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ringbuf_put(&amp;amp;usb_tx, data);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ringbuf_put_str(&amp;amp;usb_tx, &quot;Hello World!\n&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-8&quot;&gt;データの受信&lt;/h4&gt;

&lt;p&gt;受信データは&lt;code class=&quot;highlighter-rouge&quot;&gt;usb_rx&lt;/code&gt;というリングバッファに入っているのでポップします。&lt;br /&gt;
受信データの個数は&lt;code class=&quot;highlighter-rouge&quot;&gt;ringbuf_num(&amp;amp;usb_rx)&lt;/code&gt;関数で確認できます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(ringbuf_num(&amp;amp;usb_rx)){
    recieved_data = ringbuf_pop(&amp;amp;usb_rx);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-9&quot;&gt;注意&lt;/h2&gt;

&lt;h3 id=&quot;section-10&quot;&gt;関数の二重呼び出しの禁止&lt;/h3&gt;

&lt;p&gt;PICでは同じ関数の二重呼び出しができません（正常に動作しません）。今回のプログラムでは、メインループと割り込み関数の双方でリングバッファの関数を使用しているので、二重呼び出しに該当します。&lt;/p&gt;

&lt;p&gt;→追記：PICが二重呼び出しを禁止しているというより、リングバッファ関数がリエントラントではないことが問題なようです。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;対策&lt;/h3&gt;

&lt;p&gt;メインループでリングバッファ関数を使用する前に割り込み禁止をします。&lt;/p&gt;

&lt;p&gt;リングバッファ関数を使用し終わったら割り込みを許可します。&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;めんどくさい&lt;/h3&gt;

&lt;p&gt;リングバッファ関数を使うごとに割り込み禁止、許可を繰り返すのはとても面倒ですし、忘れてしまったらバグにつながり、危険です。&lt;/p&gt;

&lt;p&gt;それなので、メインループの中で処理をまとめて割り込み禁止にするとよいと思います。&lt;/p&gt;

&lt;p&gt;ただし、割り込み禁止時間が長くなると別の問題が発生しますので、割り込み禁止時間はできるだけ短くなるように心がけましょう。&lt;/p&gt;

&lt;p&gt;例えば、delay関数などは割り込み禁止中に行ってはいけません。&lt;/p&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 各種設定 */&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// メインループ
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 関数の二重呼び出しを防ぐために割り込み禁止
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理1 */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込み禁止の解除
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ここで割り込みが起きる
&lt;/span&gt;	
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 関数の二重呼び出しを防ぐために割り込み禁止
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理2 */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込み禁止の解除
&lt;/span&gt;        
	&lt;span class=&quot;c1&quot;&gt;// ここで割り込みが起きる
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// delayなどは割り込み許可エリアに書く
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-13&quot;&gt;プログラムの例&lt;/h2&gt;

&lt;p&gt;以上の設定がすでにされているMPLAB Xのプロジェクトファイルは&lt;a href=&quot;/images/2016-01-10-pic-usb/PIC18F27J53-USB_CDC-sample.zip&quot;&gt;ここ&lt;/a&gt;からダウンロードできます。&lt;/p&gt;

&lt;p&gt;コンパイルすると大量の警告が出ますが、これはライブラリ中の未使用関数の警告です。無視して大丈夫です。&lt;/p&gt;

&lt;h3 id=&quot;mainc&quot;&gt;main.c&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * PIC18F27J53用USB-CDCサンプルプログラム 
 * Date:	2016.01.08
 * Author:	@Ryokeri
 */&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// CONFIG1L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTEN = OFF, PLLDIV = 2, CFGPLLEN = ON, STVREN = OFF, XINST = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG1H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config CPUDIV = OSC1, CP0 = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config OSC = INTOSCPLL, SOSCSEL = LOW, CLKOEC = OFF, FCMEN = OFF, IESO = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTPS = 1024
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config DSWDTOSC = T1OSCREF, RTCOSC = T1OSCREF, DSBOREN = OFF, DSWDTEN = OFF, DSWDTPS = G2
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config IOL1WAY = OFF, ADCSEL = BIT12, MSSP7B_EN = MSK7
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPFP = PAGE_127, WPCFG = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPDIS = OFF, WPEND = PAGE_WPFP, LS48MHZ = SYS48X8
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;xc.h&amp;gt;
#include &amp;lt;My_USB_CDC.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;USB_CDC_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IRCF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OSCTUNEbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PLLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TRISA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00010000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RA7, RA6, RA5, Vcap, RA3, RA2, RA1,  RA0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TRISB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00111111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RB7, RB6, SDA, SCL,  RB3, RB2, RB1,  RB0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TRISC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10111010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RXD, TXD, D+,  D-,   Vusb,RC2, T1OSI,T1OSO
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ANCON0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b11111111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x,x,x,AN4(RA5),AN3(RA3),AN2(RA2),AN1(RA1),AN0(RA0)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ANCON1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00011111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// VBG,x,x,AN12(RB0),AN11(RC2),AN10(RB1),AN9(RB3),AN8(RB2)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PORTB Pull-up Pnable
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;USB_CDC_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 関数の二重呼び出しを防ぐために割り込み禁止
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 受信したデータをそのまま送信する。
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usb_rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usb_rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usb_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;USB_CDC_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込み禁止の解除
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-14&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;USBでシリアル通信ができると、とても便利です。ぜひ使ってみてください！&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Jan 2016 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2016-01-10-pic-usb/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2016-01-10-pic-usb/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>PIC18F27J53のすすめ</title>
        <description>&lt;h2 id=&quot;pic18f27j53&quot;&gt;PIC18F27J53のいいところ&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;秋月で売っていること&lt;/h3&gt;

&lt;p&gt;電子工作をするうえでこれはとても大事なこと。「秋月で売っているなら使ってみるか」ってなりますよね。&lt;/p&gt;

&lt;p&gt;もちろん、秋月なので値段が安い！！&lt;br /&gt;
&lt;strong&gt;1個270円&lt;/strong&gt;です(2016年1月現在)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-01-08-pic18f27j53/view.jpg&quot; alt=&quot;PIC18F27J53&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;豊富なメモリ&lt;/h3&gt;

&lt;p&gt;我が宿敵のATMEGA328Pのメモリと比べてみましょう。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;機能&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ATMEGA328P&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;PIC18F27J53&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;プログラムメモリ&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;32kB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;128kB&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SRAM&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2kB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;3.8kB&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;メモリがありすぎて、困っちゃうなぁ。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;豊富な周辺モジュール&lt;/h3&gt;

&lt;p&gt;主な機能を表にまとめました。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;機能&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;個数&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;備考&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8bitタイマ&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4個&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;16bitタイマ&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4個&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PWM&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;個&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;内3つは超高機能PWM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;I2C/SPI&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2個&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;マスタ&amp;amp;スレーブ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;12bit-ADC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10ch&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;モジュールは1個&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CTMU&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ADCのピン&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;タッチセンサ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RTCC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;リアルタイムクロック&amp;amp;カレンダー&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;USB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1個&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;スレーブ側&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;タイマとPWMがたくさんあるのでロボットは動かし放題ですね！&lt;/p&gt;

&lt;h3 id=&quot;usb&quot;&gt;USBでパソコンと通信&lt;/h3&gt;

&lt;p&gt;デバックのためにマイコンとパソコンで通信をするときは、UARTで通信するのが一般的ですが、PIC18F27J53ならば、それをUSBでできます。&lt;/p&gt;

&lt;p&gt;USBで接続するとCOMポートが現れるので、UARTとまったく同じように使うことができるのです。&lt;/p&gt;

&lt;p&gt;これで、FT232のUSBシリアル変換モジュールは必要なくなります！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-01-08-pic18f27j53/FT232.jpg&quot; alt=&quot;AE-FT232&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;usb-1&quot;&gt;USBブートローダーに対応&lt;/h3&gt;

&lt;p&gt;USB通信を使って、自分自身のプログラムの書き換えをすることができます。ブートローダです。&lt;/p&gt;

&lt;p&gt;初回に1回だけPICkit3でブートローダプログラムを書きこんでしまえば、2回目からはPICkit3を使わずにUSBで書き込むことができます。これなら、スマートに開発をすることができます。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;周辺モジュールのピンを後から割り当て&lt;/h3&gt;

&lt;p&gt;周辺モジュールが多いので、ピンの重複が気になるところです。しかし、PIC18F27J53は「Remappable Pin」といものがあります。&lt;/p&gt;

&lt;p&gt;Remappable PinはPWMやI2Cなどのピンをプログラム内で指定することができます。これなら好きなピンに機能を割り当てられるので、重複を回避できます。&lt;/p&gt;

&lt;p&gt;さらに基板に合わせてピンを決められるので結構便利です。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;タッチセンサ&lt;/h3&gt;

&lt;p&gt;PIC18F27J53にはCTMUというタッチセンサ機能を持ったモジュールがあります。押しボタンの代わりに使えるのでなかなか便利です。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;リアルタイムクロックモジュール&lt;/h3&gt;

&lt;p&gt;リアルタイムモジュールがあれば、32.768kHzの水晶をつなぐだけで時計とカレンダーをカウントしてくれます。レジスタの数を見るだけで時間や日にちをGETできるのでとても簡単！実用的！&lt;/p&gt;

&lt;p&gt;しかも、スリープ中でも時計は止まらないので、電池でも十分動かすことができます。&lt;/p&gt;

&lt;h2 id=&quot;pic18f27j53-1&quot;&gt;PIC18F27J53の使い方(ハードウェア)&lt;/h2&gt;

&lt;h3 id=&quot;section-6&quot;&gt;ピンアサイン&lt;/h3&gt;

&lt;p&gt;PIC18F27J53のピンアサイン（データシートより）&lt;br /&gt;
&lt;img src=&quot;/images/2016-01-08-pic18f27j53/pin-assign.png&quot; alt=&quot;PIC18F27J53のピンアサイン&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RPx&lt;/strong&gt;というピンが「Remappable Pin」です。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;電源について&lt;/h3&gt;

&lt;p&gt;電源電圧は&lt;strong&gt;3.3V&lt;/strong&gt;です。注意してください。&lt;/p&gt;

&lt;p&gt;誤って5Vを接続したことがありますが、壊れませんでした（PICは強い！）。しかし正常には動作しませんでした。&lt;/p&gt;

&lt;p&gt;上のピンアサインの図の灰色のピンは、5.5Vトレラントなので、5.5Vの入力もそのまま接続できます。&lt;/p&gt;

&lt;p&gt;PIC18F27J53のCoreは2.5Vで動作しています。入力電圧は3.3Vなので、内部にレギュレータが入っています。それの安定化のために「V_DDVORE/V_CAP」端子に10uFのコンデンサをつなぐ必要があります。&lt;/p&gt;

&lt;h3 id=&quot;pic18f27j53-2&quot;&gt;PIC18F27J53の一般的な回路図&lt;/h3&gt;

&lt;p&gt;USBから電源をとるときは、3端子レギュレータを通して3.3Vにするのを忘れずに。&lt;/p&gt;

&lt;p&gt;PIC18F27J53の基本的な回路図&lt;br /&gt;
&lt;a href=&quot;/images/2016-01-08-pic18f27j53/sketch.png&quot;&gt;&lt;img src=&quot;/images/2016-01-08-pic18f27j53/sketch.png&quot; alt=&quot;PIC18F27J53の回路図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SPIやPWMなどは「Remappable」のピンに割り当てればOKです。&lt;/p&gt;

&lt;p&gt;回路図を見てわかるように、実際に使えるGPIO(General Purpose Input Output)は、12本(内10本ADC対応&amp;amp;Remappable)です。&lt;/p&gt;

&lt;p&gt;UARTやI2Cを使わないならば、GPIOはもう少し増えます。&lt;/p&gt;

&lt;p&gt;この回路図をもとに回路を作っていきましょう。&lt;/p&gt;

&lt;h2 id=&quot;pic18f27j53-3&quot;&gt;PIC18F27J53の使い方(ソフトウェア)&lt;/h2&gt;

&lt;p&gt;ソフトウェアもほかのPICと少し違うので少し注意が必要です。&lt;/p&gt;

&lt;h3 id=&quot;configration-bits&quot;&gt;Configration Bits&lt;/h3&gt;

&lt;p&gt;いつも変わらないので、コピペしましょう。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG1L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTEN = ON, PLLDIV = 2, CFGPLLEN = ON, STVREN = OFF, XINST = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG1H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config CPUDIV = OSC1, CP0 = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config OSC = INTOSCPLL, SOSCSEL = LOW, CLKOEC = OFF, FCMEN = OFF, IESO = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTPS = 8
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config DSWDTOSC = T1OSCREF, RTCOSC = T1OSCREF, DSBOREN = OFF, DSWDTEN = OFF, DSWDTPS = G2
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config IOL1WAY = OFF, ADCSEL = BIT12, MSSP7B_EN = MSK7
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPFP = PAGE_127, WPCFG = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPDIS = OFF, WPEND = PAGE_WPFP, LS48MHZ = SYS48X8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-8&quot;&gt;動作クロックの設定&lt;/h3&gt;

&lt;p&gt;クロックは内蔵8MHzをPLLで6倍してできる、48MHzを使うのが一般的です。これはUSBとして使える周波数です。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// OSC Settings
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OSC_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IRCF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 内蔵発振周波数は8MHz
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OSCTUNEbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PLLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// PLL(x6)をEnable
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// クロックソースは内蔵発振or外部クロック
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ここに記述した内容と、Configration Bitsの内容によりクロックソースと周波数が決まります。&lt;/p&gt;

&lt;h3 id=&quot;io&quot;&gt;I/Oポート関連&lt;/h3&gt;

&lt;p&gt;PIC18F27J53には8bitの入出力ポートが3つあります。PORTA,PORTB,PORTCです。&lt;/p&gt;

&lt;p&gt;I/Oの設定はTRISA,TRISB,TRISCレジスタで行います。出力が0で、入力が1です。&lt;/p&gt;

&lt;p&gt;アナログ/デジタルの切り替えはANCONレジスタで行います。アナログが0でデジタルが1で、他のPICとは逆なので注意しましょう。&lt;/p&gt;

&lt;p&gt;内蔵プルアップはポートBのみについているので、デジタル入力はポートBでするのがいいでしょう。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// I/O Port Settings
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 0が出力、1が入力
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TRISA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bxxx1xxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RA7, RA6, RA5, Vcap, RA3, RA2, RA1,  RA0
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TRISB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bxx11xxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RB7, RB6, SDA, SCL,  RB3, RB2, RB1,  RB0
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TRISC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10111x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RXD, TXD, D+,  D-,   Vusb,RC2, T1OSI,T1OSO
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 0がアナログ、1がデジタル
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ANCON0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b111xxxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x,x,x,AN4(RA5),AN3(RA3),AN2(RA2),AN1(RA1),AN0(RA0)
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ANCON1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b000xxxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// VBG,x,x,AN12(RB0),AN11(RC2),AN10(RB1),AN9(RB3),AN8(RB2)
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;INTCON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PORTB Pull-up Pnable
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;※「x」となっているところは自分で適当に0/1を入れる。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;タイマ関連&lt;/h3&gt;

&lt;h4 id=&quot;timer-0-8bit&quot;&gt;Timer 0 (8bit)&lt;/h4&gt;

&lt;p&gt;割り込み周波数 = Fosc / (4 * 256 * prescaler) = 46875/prescaler [Hz]&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~8
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer0_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T08BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 8-bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// use internal-OSC
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not use prescaler
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// use prescaler
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0PS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Timer 0 Enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// interrupt Flag clear
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;timer-1&quot;&gt;Timer 1&lt;/h4&gt;

&lt;p&gt;割り込み周波数 = CLOCK / (4 * 65536 * prescaler) [Hz]&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define FOSC_4 0 // Fosc/4
#define T1OSC  2 // Timer 1 OSC
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~3
// clock_select is FOSC_4(Fosc/4) or T1OSC(32.768kHz)
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer1_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1OSC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Drive Crystal
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1CKPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nT1SYNC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No Sync
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RD16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Timer1=16bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IPR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;timer-3&quot;&gt;Timer 3&lt;/h4&gt;

&lt;p&gt;割り込み周波数 = CLOCK / (4 * 65536 * prescaler) [Hz]&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~3
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer3_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Clock = Fosc/4
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not Drive Crystal
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3CKPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RD163&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Timer3=16bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IPR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIE2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;uart&quot;&gt;UARTの設定&amp;amp;動作&lt;/h3&gt;

&lt;p&gt;ここではとりあえずUART通信できるプログラムを示します。本来ならばリングバッファを使って実装します。長くなりそうなので、そのやり方はまた改めて説明します。&lt;/p&gt;

&lt;p&gt;最初に1回&lt;code class=&quot;highlighter-rouge&quot;&gt;UART_init();&lt;/code&gt;を呼び出せば、後は&lt;code class=&quot;highlighter-rouge&quot;&gt;rx_send(data);&lt;/code&gt;で送信する子ができます。&lt;/p&gt;

&lt;p&gt;ボーレートは115200bpsに設定されています。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// UART初期化関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UART_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TX9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:8-bit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TXEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1:enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYNC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:Asynchronous mode
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BRGH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:High Speed
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:Serial Port enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RX9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:8-bit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:continuous receive enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;BAUDCON1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BRG16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:use 16-bit SPBRG
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;SPBRG1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_XTAL_FREQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SPBRGH1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_XTAL_FREQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IPR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Low Priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Interrupt Enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Peripheral Interrupt Enable
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 送信関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TXIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 前のデータの送信完了まで待つ
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXREG1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-10&quot;&gt;割り込み関数&lt;/h3&gt;

&lt;p&gt;割り込み関数はPIC16FやPIC18Fと同様です。&lt;/p&gt;

&lt;p&gt;今回説明した内容の機能をを使う場合、割り込み関数は以下のようになります。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 割り込み関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// UART受信割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RCREG1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RCREG1を読み取ることで割り込みフラグはクリアされる
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 受信データrecv_charを使った何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ0割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ1割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ3割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIE2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;usb-2&quot;&gt;USB関連&lt;/h3&gt;

&lt;p&gt;USB関連は結構複雑で長くなりそうなので、改めて後日書こうと思います。&lt;/p&gt;

&lt;p&gt;→追記：&lt;a href=&quot;/posts/2016-01-08-pic18f27j53/&quot;&gt;PICでUSB通信&lt;/a&gt;をご覧ください。&lt;/p&gt;

&lt;h3 id=&quot;remappable-pin&quot;&gt;Remappable Pinの使い方&lt;/h3&gt;

&lt;p&gt;同じく長くなりそうなので、後日記事を書きます。&lt;/p&gt;

&lt;h3 id=&quot;rtcc&quot;&gt;RTCC(リアルタイムクロック)モジュールの使い方&lt;/h3&gt;

&lt;p&gt;同じく長くなりそうなので、後日記事を書きます。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;タッチセンサの使い方&lt;/h3&gt;

&lt;p&gt;同じく長くなりそうなので、後日記事を書きます。&lt;/p&gt;

&lt;h3 id=&quot;pwmi2cspi&quot;&gt;PWM、I2C、SPIの使い方&lt;/h3&gt;

&lt;p&gt;同じく長くなりそうなので、(元気があれば)後日記事を書きます。&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;プログラムの例&lt;/h2&gt;

&lt;p&gt;このままコピペで動くはずです。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * PIC18F27J53用サンプルプログラム 
 * Date:	2016.01.08
 * Author:	@Ryokeri
 */&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// CONFIG1L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTEN = OFF, PLLDIV = 2, CFGPLLEN = ON, STVREN = OFF, XINST = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG1H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config CPUDIV = OSC1, CP0 = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config OSC = INTOSCPLL, SOSCSEL = LOW, CLKOEC = OFF, FCMEN = OFF, IESO = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTPS = 1024
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config DSWDTOSC = T1OSCREF, RTCOSC = T1OSCREF, DSBOREN = OFF, DSWDTEN = OFF, DSWDTPS = G2
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config IOL1WAY = OFF, ADCSEL = BIT12, MSSP7B_EN = MSK7
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPFP = PAGE_127, WPCFG = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPDIS = OFF, WPEND = PAGE_WPFP, LS48MHZ = SYS48X8
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;xc.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// __delay_ms()関数を使うために周波数を定義
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define _XTAL_FREQ 48000000
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 自作delay関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// OSC Settings
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OSC_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IRCF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 内蔵発振周波数は8MHz
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;OSCTUNEbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PLLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PLL(x6)をEnable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// クロックソースは内蔵発振or外部クロック
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// I/O Port Settings
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IO_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 0が出力、1が入力
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TRISA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00010000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RA7, RA6, RA5, Vcap, RA3, RA2, RA1,  RA0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TRISB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00111111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RB7, RB6, SDA, SCL,  RB3, RB2, RB1,  RB0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TRISC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10111010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RXD, TXD, D+,  D-,   Vusb,RC2, T1OSI,T1OSO
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 0がアナログ、1がデジタル
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ANCON0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b11111111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x,x,x,AN4(RA5),AN3(RA3),AN2(RA2),AN1(RA1),AN0(RA0)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ANCON1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00011111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// VBG,x,x,AN12(RB0),AN11(RC2),AN10(RB1),AN9(RB3),AN8(RB2)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PORTB Pull-up Pnable
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~8
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer0_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T08BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 8-bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// use internal-OSC
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not use prescaler
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// use prescaler
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0PS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Timer 0 Enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// interrupt Flag clear
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define FOSC_4 0 // Fosc/4
#define T1OSC  2 // Timer 1 OSC
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~3
// clock_select is FOSC_4(Fosc/4) or T1OSC(32.768kHz)
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer1_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1OSC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Drive Crystal
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1CKPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nT1SYNC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No Sync
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RD16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Timer1=16bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IPR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~3
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer3_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prescaler is 0~3
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Clock = Fosc/4
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not Drive Crystal
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3CKPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RD163&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Timer3=16bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IPR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIE2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// UART初期化関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UART_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TX9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:8-bit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TXEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1:enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYNC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:Asynchronous mode
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BRGH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:High Speed
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:Serial Port enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RX9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:8-bit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:continuous receive enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;BAUDCON1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BRG16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:use 16-bit SPBRG
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;SPBRG1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_XTAL_FREQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SPBRGH1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_XTAL_FREQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IPR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 送信関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TXIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 送信完了まで待つ
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXREG1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 割り込み関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// UART受信割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RCREG1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RCREG1を読み取ることで割り込みフラグはクリアされる
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ0割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ1割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TMR1H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0.5秒ごとの割り込みにするため
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ3割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIE2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// main関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 初期設定
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;OSC_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IO_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Timer0_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Timer1_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1OSC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Timer3_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UART_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 割り込み許可
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// UART送信
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;H&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;e&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;l&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;l&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;o&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-13&quot;&gt;さいごに&lt;/h2&gt;

&lt;h3 id=&quot;pic&quot;&gt;PICを使おう！&lt;/h3&gt;

&lt;p&gt;僕がググった感じだとPIC18F27J53を使っている人はかなり少ないと思います。この記事を読んで使ってくれる人がいたら嬉しいです。このマイコンは魅力的ですよ～&lt;/p&gt;

&lt;p&gt;PICはとてもおもしろいですね！バンバン使って電子工作を楽しみましょう！&lt;/p&gt;

&lt;p&gt;やっぱり、AVRなんかより&lt;strong&gt;PIC&lt;/strong&gt;の方がいいですね～&lt;/p&gt;

&lt;h3 id=&quot;pic-1&quot;&gt;PIC用ライブラリ&lt;/h3&gt;

&lt;p&gt;僕の作ったPIC用ライブラリのリンクを貼っておきます。参考にしてください。&lt;br /&gt;
&lt;a href=&quot;https://github.com/kerikun11/MPLABXProjects/tree/master/My_library&quot;&gt;PICライブラリ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主に PIC18F27J53 と PIC16F1827、PIC12F1822 用に作られています。&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;何か気づいたら&lt;/h3&gt;

&lt;p&gt;もし、この記事の内容に間違いや疑問をを見つけたら遠慮なく教えてください。Twitterにリプを飛ばしていただけると嬉しいです。&lt;a href=&quot;https://twitter.com/Ryokeri14&quot;&gt;@Ryokeri14&lt;/a&gt;←遠慮なくリプしてください。&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Jan 2016 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2016-01-08-pic18f27j53/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2016-01-08-pic18f27j53/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>yamyでキーボードをカスタマイズ</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;Windowsのキーボードをカスタマイズして使いやすくする。&lt;/p&gt;

&lt;h3 id=&quot;capsctrl&quot;&gt;CapsキーをCtrlキーにする&lt;/h3&gt;

&lt;p&gt;WindowのPCは&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt;キーの位置が小指から遠く押しづらい！&lt;br /&gt;
ということで、&lt;code class=&quot;highlighter-rouge&quot;&gt;Caps&lt;/code&gt;の位置に&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt;キーを置く。&lt;br /&gt;
ちなみに、もともと&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt;があったところにも&lt;code class=&quot;highlighter-rouge&quot;&gt;Caps&lt;/code&gt;を置くこともできる。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;半角/全角をトグルではなく、決めうちにする&lt;/h3&gt;

&lt;p&gt;日本語を入力したくて&lt;code class=&quot;highlighter-rouge&quot;&gt;半角/全角&lt;/code&gt;キーを押したら、英語で入力されてイラッと来ることがある。&lt;br /&gt;
そこで、普段使わない&lt;code class=&quot;highlighter-rouge&quot;&gt;変換&lt;/code&gt;キーを日本語切り替えに、&lt;code class=&quot;highlighter-rouge&quot;&gt;無変換&lt;/code&gt;キーを英語切り替えにする。&lt;/p&gt;

&lt;h3 id=&quot;vim&quot;&gt;Vimユーザー必見！&lt;/h3&gt;

&lt;p&gt;Vimで日本語を入力をしたとき、保存などをしようと&lt;code class=&quot;highlighter-rouge&quot;&gt;:w&lt;/code&gt;と打つと、それが全角で入力されて困ることがある。&lt;br /&gt;
そこで、インサートモードからノーマルモードに入ると自動的に日本語をオフにして英語入力にする&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;今回用いた方法&lt;/h3&gt;

&lt;p&gt;キー割り当てを変えるには以下のような方法がある。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Windowsのレジストリを書き換える。（玄人向け）&lt;/li&gt;
  &lt;li&gt;Ctrl2Cap.exeというアプリを使う。（機能が少ない）&lt;/li&gt;
  &lt;li&gt;yamyというアプリを使う。(便利)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今回はyamyという便利なアプリを使う。&lt;/p&gt;

&lt;h2 id=&quot;yamy&quot;&gt;yamyインストール方法&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;概要&lt;/h3&gt;

&lt;p&gt;yamyはインストールをする必要がない。zip形式でダウンロードして解凍して、yamy.exeを起動するだけ！！&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;ダウンロード&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://osdn.jp/projects/yamy/&quot;&gt;yamyダウンロードページ&lt;/a&gt;からzipファイルをダウンロードする。&lt;br /&gt;
執筆時点の最新バージョンは0.03。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;解凍&amp;amp;配置&lt;/h3&gt;

&lt;p&gt;あとで起動時に自動起動するように設定するので、わかりやすいところに置いておくとよい。例えば、Cドライブ直下など。&lt;/p&gt;

&lt;h3 id=&quot;pc&quot;&gt;PC起動時に自動で起動するように設定&lt;/h3&gt;

&lt;p&gt;Windows10の場合を説明する。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;スタートメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;タスクスケジューラ&lt;/code&gt;を起動する(検索するとよい)。&lt;/li&gt;
  &lt;li&gt;右のほうの&lt;code class=&quot;highlighter-rouge&quot;&gt;タスクを作成&lt;/code&gt;をクリック。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;全般タグ&lt;/code&gt;では、 1. 名前を&lt;code class=&quot;highlighter-rouge&quot;&gt;yamy&lt;/code&gt;とする。 2. &lt;code class=&quot;highlighter-rouge&quot;&gt;最上位の特権で実行する&lt;/code&gt;にチェックする。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;トリガータブ&lt;/code&gt;では、新規→ 1. タスクの開始：&lt;code class=&quot;highlighter-rouge&quot;&gt;ログオン時&lt;/code&gt;にする。 2. 設定：&lt;code class=&quot;highlighter-rouge&quot;&gt;特定のユーザー&lt;/code&gt;で自分だけにする。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;操作タブ&lt;/code&gt;では、新規→ 1. 操作：&lt;code class=&quot;highlighter-rouge&quot;&gt;プログラムの開始&lt;/code&gt; 2. プログラム/スクリプト：yamy.exeのパスとする。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;条件タブ&lt;/code&gt;では、&lt;code class=&quot;highlighter-rouge&quot;&gt;コンピュータをAC電源で使用している場合のみ...&lt;/code&gt;のチェックを外す。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;設定タブ&lt;/code&gt;では、&lt;code class=&quot;highlighter-rouge&quot;&gt;タスクを要求時に実行する&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;要求時に終了しない場合、タスクを強制的に停止する&lt;/code&gt;のみにチェック。他は外す。&lt;/li&gt;
  &lt;li&gt;OKを押して終了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;再起動すると、タスクバーにアイコンが現れる。&lt;/p&gt;

&lt;p&gt;参考画像&lt;br /&gt;
&lt;img src=&quot;/images/2016-01-07-yamy/02.png&quot; alt=&quot;設定画面02&quot; /&gt;
&lt;img src=&quot;/images/2016-01-07-yamy/03.png&quot; alt=&quot;設定画面03&quot; /&gt;
&lt;img src=&quot;/images/2016-01-07-yamy/04.png&quot; alt=&quot;設定画面04&quot; /&gt;
&lt;img src=&quot;/images/2016-01-07-yamy/05.png&quot; alt=&quot;設定画面05&quot; /&gt;
&lt;img src=&quot;/images/2016-01-07-yamy/06.png&quot; alt=&quot;設定画面06&quot; /&gt;
&lt;img src=&quot;/images/2016-01-07-yamy/07.png&quot; alt=&quot;設定画面07&quot; /&gt;
&lt;img src=&quot;/images/2016-01-07-yamy/08.png&quot; alt=&quot;設定画面08&quot; /&gt;
&lt;img src=&quot;/images/2016-01-07-yamy/09.png&quot; alt=&quot;設定画面09&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;yamy-1&quot;&gt;yamyの設定&lt;/h2&gt;

&lt;h3 id=&quot;section-6&quot;&gt;オリジナルの設定ファイルを作成&lt;/h3&gt;

&lt;p&gt;yamy.exeのあるフォルダ内に&lt;code class=&quot;highlighter-rouge&quot;&gt;mysettings.mayu&lt;/code&gt;など適当なテキストファイルを作成する。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;設定を書く&lt;/h3&gt;

&lt;p&gt;さっき作ったmysettings.mayuの中に以下を書く。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include &quot;109.mayu&quot;
keymap Global

# My Settings
key *E0ひらがな = S-*F10

key *変換 = &amp;amp;Ignore
key *IC-~IL-変換 = $ToggleIME # 変換で IME-ON

key *E0無変換 = &amp;amp;Ignore
key *IC-IL-E0無変換 = $ToggleIME # 無変換で IME-OFF

mod Control += E0英数
key *E0英数  = *LControl

# For Cygwin
window Cygwin /cygwin/ : Global
  key A-v = RButton # Paste

  key IL-~IC-Esc = $ToggleIME Esc   
  key IC-Esc = Esc

  key IL-*IC-C-LeftSquareBracket = Esc $ToggleIME Esc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;次に、同じフォルダ内にある&lt;code class=&quot;highlighter-rouge&quot;&gt;yamy.ini&lt;/code&gt;テキストエディタで開いて、下のほうの&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;escapeNLSKeys=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とする。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;作った設定を読み込む&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;タスクバーのアイコンを右クリックして設定を開く。&lt;/li&gt;
  &lt;li&gt;追加ボタンを押す。&lt;/li&gt;
  &lt;li&gt;名前は適当なものを。ファイルは&lt;code class=&quot;highlighter-rouge&quot;&gt;mysettings.mayu&lt;/code&gt;。シンボルには&lt;code class=&quot;highlighter-rouge&quot;&gt;-DUSE109&lt;/code&gt;と書く。&lt;/li&gt;
  &lt;li&gt;OKを押して画面を閉じる。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-01-07-yamy/10.png&quot; alt=&quot;設定画面10&quot; /&gt;
&lt;img src=&quot;/images/2016-01-07-yamy/11.png&quot; alt=&quot;設定画面11&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;任務完了&lt;/h2&gt;

&lt;p&gt;これで設定は完了。&lt;/p&gt;

&lt;p&gt;あとは、自分でmysettingsにいろいろ書けば好きな割り当てができる。さらに、タスクバーのアイコンを右クリックして「調査」を開くと、実際にキーボードを押したときそのボタンが何に割り当てられているか教えてくれるので便利！&lt;/p&gt;

&lt;p&gt;キーの名前は、同じディレクトリ内の&lt;code class=&quot;highlighter-rouge&quot;&gt;109.mayu&lt;/code&gt;というファイルの中に書いてあるので、そこで確認できる。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;参考サイト&lt;/h2&gt;

&lt;p&gt;参考にさせていただきました。ありがとうございます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://rcmdnk.github.io/blog/tags/yamy/&quot;&gt;rcmdnk’s blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/kaosf/20111122/1321969965&quot;&gt;kaosfield blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 07 Jan 2016 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2016-01-07-yamy/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2016-01-07-yamy/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>ESP8266で赤外線学習リモコン</title>
        <description>&lt;h2 id=&quot;esp8266&quot;&gt;ESP8266とは&lt;/h2&gt;

&lt;h3 id=&quot;wifi&quot;&gt;日本の技適を取得済みWiFiモジュール！！&lt;/h3&gt;

&lt;p&gt;ESP8266とはWiFi制御用マイコンです。もともと中国で流行っていました。そのマイコンを内蔵したESP-WROOM-02というWiFiモジュールが日本の技適を取得したので、日本でも人気になりました。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;とにかく安い！&lt;/h3&gt;

&lt;p&gt;その価格はなんと、たったの&lt;strong&gt;550円&lt;/strong&gt;です！！&lt;br /&gt;
&lt;a href=&quot;http://akizukidenshi.com/catalog/g/gM-09607/&quot;&gt;ESP-WROOM-02&lt;/a&gt;←秋月電子などで売っています。&lt;br /&gt;
&lt;img src=&quot;/images/2015-12-30-ir-station/esp8266.jpg&quot; alt=&quot;ESP8266&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;開発の簡単さも流行りの理由&lt;/h3&gt;

&lt;p&gt;このマイコンのすごいところは、&lt;strong&gt;Arduino IDE&lt;/strong&gt;で開発ができることです。とても簡単に開発ができます。関数もArduinoで使われているものと同じ名前です。Arduinoと同じように書き込みボタンを押せば書き込みができます。&lt;/p&gt;

&lt;p&gt;さらに、Arduinoをよく使う人は知っている通り、Arduino IDEに付属したサンプルプログラムがとても充実しています。それを書き込むだけでそれなりのことができます。&lt;/p&gt;

&lt;p&gt;それを少しずついじっているといつの間にかオリジナルのプログラムが完成しているという感じです。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;スペックが十分すぎる…&lt;/h3&gt;

&lt;p&gt;しかも、このESP8266マイコンはスペックがかなり高く、WiFiモジュールとしてだけでなく格安マイコンとしても十分使うことができるほどです。メモリが十分にあるので、自由なプログラムを書くことができます。&lt;/p&gt;

&lt;p&gt;マイコンは、&lt;strong&gt;32bit&lt;/strong&gt;マイコンです。&lt;br /&gt;
動作周波数は、&lt;strong&gt;160MHz&lt;/strong&gt;まで対応しています。&lt;br /&gt;
外付けのSPIFlashがついていて、プログラムメモリが&lt;strong&gt;１MB&lt;/strong&gt;ほどあります。&lt;br /&gt;
RAMも大量にあって、&lt;strong&gt;81kB&lt;/strong&gt;もあります。&lt;/p&gt;

&lt;p&gt;参考までにPICやAVRマイコンなどはROMが32kBくらい、RAMは4kBほどです。&lt;/p&gt;

&lt;p&gt;今回はこのWiFiモジュールで遊びます。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;赤外線学習リモコン&lt;/h2&gt;

&lt;p&gt;赤外線学習リモコンとは自作の赤外線リモコンです。一番最初に本物のリモコンの信号を記憶して、2回目からはその記憶した赤外線を発します。こうしてリモコンを複製することができるのです。&lt;/p&gt;

&lt;p&gt;今回は&lt;strong&gt;WiFi経由&lt;/strong&gt;でスマホからコントロールできる赤外線学習リモコンを作りました。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;作ったもの&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;本体&lt;/h3&gt;

&lt;p&gt;今回は試作なのでブレッドボードで作りました。&lt;br /&gt;
右に４つの赤外線LEDがついています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-12-30-ir-station/body.jpg&quot; alt=&quot;ESP8266-Remocon&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wifi-1&quot;&gt;WiFiの設定&lt;/h3&gt;

&lt;p&gt;電源を入れるとまずWiFiのアクセスポイントになって、「ESP8266-Remocon」というWiFi電波を発します。スマホなどでそれにつないで、「http://esp8266.local」に接続すると下の画面が表示されます。&lt;/p&gt;

&lt;p&gt;ここで、家のWiFiのSSIDを選んでパスワードを入力すると、家のWiFiにアクセスを試みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-12-30-ir-station/page_wifi.png&quot; alt=&quot;ESP8266-Remocon&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;スマホでの操作画面&lt;/h3&gt;

&lt;p&gt;うまく接続できると、下の画面が出てきて、リモコンが使えるようになります。&lt;/p&gt;

&lt;p&gt;リモコンを登録するときは下の好きなチャンネルの欄にボタンの名前を書いて「Recode」ボタンを押すとリモコンのサンプリングを開始します。リモコンの登録がうまくいくと、上のボタンにさっき入力した名前が表示されてボタンが使えるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-12-30-ir-station/page_button.png&quot; alt=&quot;ESP8266-Remocon&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;IoT(Internet of Things)&lt;/strong&gt;という言葉があります。&lt;br /&gt;
&lt;strong&gt;人と人が&lt;/strong&gt;インターネットにつなぐだけでなく&lt;strong&gt;ものとものが&lt;/strong&gt;互いにインターネットでつながり、相互に作用し合うということです。&lt;br /&gt;
ESP8266 WiFiモジュールはIoTに最適です。より多くのものがインターネットによりつながるといいですね！&lt;/p&gt;

&lt;p&gt;このWiFiモジュールを使ってとりあえず実用的なものができました。&lt;br /&gt;
ESP8266はとにかくすごいマイコンです！みなさんもぜひ使ってみてください！&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Dec 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-12-30-ir-station/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-12-30-ir-station/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Cygwinの使い方</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;Cygwinとは仮想UNIX環境をつくるソフトである。WindowsはUNIXベースの環境ではないので、コマンドライン操作がとてもやりづらい。Cygwinを使えば、C言語をはじめとしてrubyやpythonなど様々な開発をWindows上でできる。しかも、GUIでなくCUIなのでとても軽い。&lt;/p&gt;

&lt;h2 id=&quot;cygwin&quot;&gt;Cygwinのインストール手順&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin.com&lt;/a&gt;からCygwinのインストーラをダウンロードする。32bitマシン用と64bitマシン用があるので適当なほうを選ぶ。&lt;/li&gt;
  &lt;li&gt;DLしたインストーラを起動する。&lt;/li&gt;
  &lt;li&gt;デフォルトの設定で次へを押す。&lt;/li&gt;
  &lt;li&gt;URLを選択するところでは&lt;code class=&quot;highlighter-rouge&quot;&gt;~~~.jp&lt;/code&gt;など、日本のURLを選ぶとダウンロードが早く終わる。&lt;/li&gt;
  &lt;li&gt;インストールするファイルを選ぶところでは、一番上で&lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;と検索して、&lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt;の中の&lt;code class=&quot;highlighter-rouge&quot;&gt;wget: Utility to ~&lt;/code&gt;の回転矢印アイコンをクリックして次へを押し、インストールする。他のソフトは後で&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-cyg&lt;/code&gt;でインストールするので、今はこれだけでいい。&lt;/li&gt;
  &lt;li&gt;インストールしたらcygwinを開く。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;インストール画像&lt;br /&gt;
&lt;img src=&quot;/images/2015-12-04-cygwin/01.png&quot; alt=&quot;インストール画面01&quot; title=&quot;インストール画面01&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/02.png&quot; alt=&quot;インストール画面02&quot; title=&quot;インストール画面02&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/03.png&quot; alt=&quot;インストール画面03&quot; title=&quot;インストール画面03&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/04.png&quot; alt=&quot;インストール画面04&quot; title=&quot;インストール画面04&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/05.png&quot; alt=&quot;インストール画面05&quot; title=&quot;インストール画面05&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/06.png&quot; alt=&quot;インストール画面06&quot; title=&quot;インストール画面06&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/07.png&quot; alt=&quot;インストール画面07&quot; title=&quot;インストール画面07&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/08.png&quot; alt=&quot;インストール画面08&quot; title=&quot;インストール画面08&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/09.png&quot; alt=&quot;インストール画面09&quot; title=&quot;インストール画面09&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/10.png&quot; alt=&quot;インストール画面10&quot; title=&quot;インストール画面10&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/11.png&quot; alt=&quot;インストール画面11&quot; title=&quot;インストール画面11&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;apt-cyg&quot;&gt;apt-cygを使う&lt;/h2&gt;

&lt;h3 id=&quot;apt-cyg-1&quot;&gt;apt-cygとは&lt;/h3&gt;

&lt;p&gt;apt-cygとは普通のシェルスクリプトで、新しくソフトウェアをインストールするときに使う。Macintoshのyumやlinuxのapt-getとほぼ同じ使い方ができる。&lt;/p&gt;

&lt;h3 id=&quot;apt-cyg-2&quot;&gt;apt-cygを使う理由&lt;/h3&gt;

&lt;p&gt;cygwinでは、新たにソフトをインストールする際には、cygwinインストール時に使ったsetup.exeを使うのが一般的である。&lt;/p&gt;

&lt;p&gt;しかし、setup.exeで欲しいソフトをインストールするとき、そのソフトが他のソフトに依存していることがある。それなのに欲しいソフトだけインストールしても、エラーになってしまう。これを解決するには、Googleでそのソフトの依存関係を調べて、必要なソフトをすべてsetup.exeで選んでインストールしなければならない。はっきり言ってめんどくさい。&lt;/p&gt;

&lt;p&gt;めんどくさいので、setup.exeに表示された&lt;strong&gt;すべてのソフト&lt;/strong&gt;をインストールしてみたことがある。これなら依存関係があっても全部あるんだから大丈夫！と思った。&lt;/p&gt;

&lt;p&gt;が、なんど１晩かかってもDLが終わらず、インストールが終わった後にサイズを確認したら&lt;strong&gt;60GB&lt;/strong&gt;も容量を取られてしまった。もう絶対にやらない。&lt;/p&gt;

&lt;h3 id=&quot;apt-cyg-3&quot;&gt;apt-cygをインストール&lt;/h3&gt;

&lt;p&gt;Cygwinを起動したら、以下のコマンドを実行する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg
$ chmod 755 apt-cyg
$ mv apt-cyg /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;インストール画面
&lt;img src=&quot;/images/2015-12-04-cygwin/12.png&quot; alt=&quot;インストール画面12&quot; title=&quot;インストール画面12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これでインストールは完了。&lt;/p&gt;

&lt;p&gt;あとは、欲しいソフトをインストールする&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-cyg install vim
$ apt-cyg install make
$ apt-cyg install gcc-core
$ apt-cyg install gcc-g++
$ apt-cyg install zsh
$ apt-cyg install tmux
$ apt-cyg install git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;などなど&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;おまけ（各種設定）&lt;/h2&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windowsのコピペを使う&lt;/h3&gt;

&lt;p&gt;Cygwinのデフォルトの設定ではWindowsのCtrl+C,Ctrl+Vが使えない。これでは不便なので使えるようにする。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cygwinのウィンドウの左上のCygwinアイコンを右クリックする。&lt;/li&gt;
  &lt;li&gt;optionを開く&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Keys&lt;/code&gt;の中の一番下の&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+letter shortcuts&lt;/code&gt;にチェックを入れる。&lt;/li&gt;
  &lt;li&gt;ついでに&lt;code class=&quot;highlighter-rouge&quot;&gt;Looks&lt;/code&gt;のなかの&lt;code class=&quot;highlighter-rouge&quot;&gt;Cursor&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt;にするとよい。&lt;/li&gt;
  &lt;li&gt;さらに&lt;code class=&quot;highlighter-rouge&quot;&gt;Looks&lt;/code&gt;のなかの&lt;code class=&quot;highlighter-rouge&quot;&gt;Transparency&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;Medium&lt;/code&gt;か&lt;code class=&quot;highlighter-rouge&quot;&gt;High&lt;/code&gt;にするとブラウザなどを下に置いたときに透かして見れるので便利。&lt;/li&gt;
  &lt;li&gt;saveで終了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Shiftキー＋いつものコピペキーでコピペができる。&lt;/p&gt;

&lt;p&gt;設定画像&lt;br /&gt;
&lt;img src=&quot;/images/2015-12-04-cygwin/13.png&quot; alt=&quot;インストール画面13&quot; title=&quot;インストール画面13&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/14.png&quot; alt=&quot;インストール画面14&quot; title=&quot;インストール画面14&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/15.png&quot; alt=&quot;インストール画面15&quot; title=&quot;インストール画面15&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;zsh&quot;&gt;デフォルトのシェルをzshにする&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-cyg install zsh
$ ls /etc/passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここで&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;が存在しないときは以下のコマンドを打ち作る。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkpasswd &amp;gt; /etc/passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;作ったら開く&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vim /etc/passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一番下のほうの自分のユーザー名のところで、&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/zsh&lt;/code&gt;に変更する。&lt;br /&gt;
あとはCygwinを再起動すればデフォルトがzshellになっている。&lt;/p&gt;

&lt;p&gt;ついでに僕の&lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;を書いておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kerikun11/dotfiles/blob/master/.zshrc&quot;&gt;.zshrc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;シェルを起動するとsshのkeyを求められるので入力すると、2回目からは自動で入力してくれるようになってる。&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Dec 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-12-04-cygwin/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-12-04-cygwin/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>Raspberry Pi で NAS 作り</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;NASがほしい！&lt;br /&gt;
じゃあ作ろう。&lt;/p&gt;

&lt;p&gt;スペック&lt;br /&gt;
サーバ：Raspberrypi 2 Type B&lt;br /&gt;
HDD：Western Digital 2TB 3.5 inch&lt;br /&gt;
転送速度：10MB/s（ラズパイのイーサーネットが100Baseなので仕方ない…）&lt;/p&gt;

&lt;h2 id=&quot;samba&quot;&gt;Sambaをインストール&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install samba
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;hdd&quot;&gt;HDDを設定する&lt;/h2&gt;

&lt;h3 id=&quot;hdd-1&quot;&gt;HDDをラズパイに繋ぐ。&lt;/h3&gt;
&lt;p&gt;ポータブルHDDだと電力が足りなくなるかもしれないので、3.5inchのHDDを使用した。&lt;/p&gt;

&lt;h3 id=&quot;hdd-2&quot;&gt;HDDをフォーマット＆マウント&lt;/h3&gt;

&lt;p&gt;HDDをラズパイに繋ぐ&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lsblk
NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda 		  8:0    0  1.8T  0 disk 
└─sda1		  8:1    0  1.8T  0 part 
mmcblk0		179:0    0 58.2G  0 disk 
├─mmcblk0p1	179:1    0    1G  0 part 
├─mmcblk0p2	179:2    0    1K  0 part 
├─mmcblk0p3	179:3    0   32M  0 part 
├─mmcblk0p5	179:5    0   60M  0 part /boot
└─mmcblk0p6	179:6    0 57.1G  0 part /
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;HDDが&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda&lt;/code&gt;につながれていることがわかる。&lt;br /&gt;
今までのパーティションを消して、新たに作る。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo fdisk /dev/sda
Command (m for help): d
Command (m for help): n
Enter を 連打
Command (m for help): w
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;HDDをフォーマット&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkfs.ext4 /dev/sda1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;フォーマットが完了したらマウント&lt;br /&gt;
毎回同じ所にマウントされるように設定する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkdir /media/hdd-2tb
$ sudo blkid /dev/sda1
/dev/sda1: UUID=&quot;21600e41-2f5a-4954-8575-5e89f0e11560&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;983fd59f-2b2b-41a4-b409-acac2fa62f5c&quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここで表示されるUUIDをコピーしておく。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここの最下部に以下を追記(UUIDはさっきコピーしたもの)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UUID=*************	/media/hdd-2tb	ext4	defaults	0	0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ラズパイを再起動&lt;br /&gt;
これでしっかりマウントされているはず。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lsblk
NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda 		  8:0    0  1.8T  0 disk 
└─sda1		  8:1    0  1.8T  0 part /hdd-2tb
mmcblk0		179:0    0 58.2G  0 disk 
├─mmcblk0p1	179:1    0    1G  0 part 
├─mmcblk0p2	179:2    0    1K  0 part 
├─mmcblk0p3	179:3    0   32M  0 part 
├─mmcblk0p5	179:5    0   60M  0 part /boot
└─mmcblk0p6	179:6    0 57.1G  0 part /
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;共有フォルダの作成と所有権の変更&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /media/hdd-2tb
$ sudo mkdir share
$ sudo chown *myuser* share
$ sudo chgrp *myuser* share
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;samba-1&quot;&gt;Sambaの設定&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/samba/smb.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここにの最下部に以下を追記&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[share]
   path = /media/hdd-2tb
   read only = no
   browsable = yes
   guest ok = yes
   force user = kerikun11
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ファイアウォールを設定している場合はSamba用にポートを開放&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ufw allow 137/udp
$ sudo ufw allow 138/udp
$ sudo ufw allow 139/tcp
$ sudo ufw allow 445/tcp

$ sudo service ufw restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sambaを起動&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service samba-ad-bc start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでつながるはず。&lt;/p&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windowsからアクセス&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;エクスプローラーの左側のナビゲーションウィンドウのネットワークを開く。&lt;/li&gt;
  &lt;li&gt;RASPBERRYPIがあるのでそれを開く。&lt;/li&gt;
  &lt;li&gt;shareというフォルダを開けたら完成！&lt;/li&gt;
  &lt;li&gt;shareというフォルダを右クリックで「ネットワークドライブの割り当て」とすると、マイコンピュータにあたかもHDDが繋がれているかのように表示されて便利に使える。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 23 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-23-samba/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-23-samba/</guid>
        
        <category>電子工作</category>
        
        <category>ラズパイ</category>
        
        <category>サーバー</category>
        
        <category>Samba</category>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>ファイアウォールの設定</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ufw

$ sudo ufw status
Status: inactive

$ sudo ufw enable
Command may disrupt existing ssh connections. Proceed with operation (y|n)? 
y

$ sudo ufw disenable
$ sudo ufw reset
Resetting all rules to installed defaults. This may disrupt existing ssh connections. Proceed with operation (y|n)?
y

$ sudo ufw disenable
$ sudo ufw default deny
$ sudo ufw allow 80
$ sudo ufw allow 22
$ sudo ufw enable

$ sudo ufw status
Status: active
 
 To                         Action      From
 --                         ------      ----
 22		                    ALLOW       Anywhere
 80                         ALLOW       Anywhere
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 17 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-17-firewall/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-17-firewall/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>delayやwhileを使わないI2C液晶表示プログラム</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;秋月やaitendoで売っているI2C液晶を使っている人は多い。しかし、ほとんどのサンプルプログラムは、I2Cの通信をwhile文などにより送信完了待ちしていて、その間に（割り込みを除く）他のプログラムが実行できない。そこで今回は、I2C液晶に表示させる内容を送信バッファに入れておけば自動で送信してくれるプログラムを書く。&lt;/p&gt;

&lt;p&gt;秋月の液晶もaitendoの液晶も共通の液晶制御ICを使っている。その型番が「ST7032」なので、液晶のこともその名前で呼ぶ。&lt;br /&gt;
&lt;a href=&quot;http://akizukidenshi.com/catalog/g/gK-06795/&quot;&gt;秋月のI2C液晶(AQM0802)&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;/images/2015-11-15-I2C-LCD/AQM0802.jpg&quot; alt=&quot;AQM0802&quot; title=&quot;I2C_LCD&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ロジック・アナライザで一目瞭然！&lt;/h2&gt;

&lt;p&gt;実際にプログラムが動作している様子をロジック・アナライザで確かめた。&lt;br /&gt;
上の２つのデータがI2C、一番下のデータがメインループのループ回数を表している。&lt;/p&gt;

&lt;p&gt;ダメな方（I2C通信をしている間は、メインループが止まってしまっている。）
&lt;a href=&quot;/images/2015-11-15-I2C-LCD/i2c_old.png&quot;&gt;&lt;img src=&quot;/images/2015-11-15-I2C-LCD/i2c_old.png&quot; alt=&quot;old program&quot; title=&quot;ダメな方&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;良い方（I2C通信をしながらメインループもしっかり動いている。）
&lt;a href=&quot;/images/2015-11-15-I2C-LCD/i2c_new.png&quot;&gt;&lt;img src=&quot;/images/2015-11-15-I2C-LCD/i2c_new.png&quot; alt=&quot;new program&quot; title=&quot;良いな方&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※双方のメインループに停止時間があるが、これは、送信リングバッファに送る処理に時間がかかっているだけなので今回は無視して欲しい。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;プログラム&lt;/h2&gt;

&lt;p&gt;僕は普段からPICを使っているので、PIC18F27J53用のプログラムを書いた。&lt;/p&gt;

&lt;p&gt;ダメな方&lt;br /&gt;
&lt;a href=&quot;/images/2015-11-15-I2C-LCD/PIC18F27J53-I2C_LCD_old01.zip&quot;&gt;PIC18F27J53-I2C-LCD-old.zip&lt;/a&gt;&lt;br /&gt;
良い方&lt;br /&gt;
&lt;a href=&quot;/images/2015-11-15-I2C-LCD/PIC18F27J53-I2C_LCD_new01.zip&quot;&gt;PIC18F27J53-I2C-LCD-new.zip&lt;/a&gt;&lt;br /&gt;
（MPLAB.Xプロジェクトファイルなので、そのままMPLABXで読み込めます。)&lt;/p&gt;

&lt;p&gt;以下はプログラムの要点だけ抜粋&lt;br /&gt;
mainループに&lt;code class=&quot;highlighter-rouge&quot;&gt;ST7032_task();&lt;/code&gt;があり、中のswitch文で状態遷移をしていく。何もアクションがなければすぐに関数から抜ける。割り込み関数内には&lt;code class=&quot;highlighter-rouge&quot;&gt;ST7032_ISR();&lt;/code&gt;があり、送信完了割り込みなどで任意のフラグを上げる。&lt;code class=&quot;highlighter-rouge&quot;&gt;ST7032_task();&lt;/code&gt;ではフラグがあがるのを監視しているが、while文での監視ではなく、何もなければすぐ関数からbreakして、なにかフラグが上がっていた時だけ、その瞬間にできる仕事をだけをしてまた関数から抜ける。&lt;/p&gt;

&lt;p&gt;使い方&lt;br /&gt;
main.c&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;My_ST7032.h&quot;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Hardware_initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// いろいろ初期設定する
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ST7032_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ST7032_cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PIC18F27J53&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// main loop
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ST7032_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kerikun11/MPLABXProjects/blob/master/My_library/My_ST7032.h&quot;&gt;My_ST7032.h&lt;/a&gt;←リンク&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_STATE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_IDOLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_WAIT&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_state_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kerikun11/MPLABXProjects/blob/master/My_library/My_ST7032.c&quot;&gt;My_ST7032.c&lt;/a&gt;←リンク&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;My_ST7032.h&quot;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;st7032_state_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ST7032_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST7032_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b11000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// control byte
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// data byte 
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// stop bit
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT_26US&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// wait
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ST7032_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSP1IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSP1IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSP1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;st7032_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIE2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCL1IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCL1IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCL1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ST7032_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSP1CON2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSP1STAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// SSP is busy
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_state_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_IDOLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_IDOLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;st7032_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;SSP1CON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st7032_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// no SSPIF
&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;st7032_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SSP1BUF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT_26US&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT_1MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT_40MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;SSP1CON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_WAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_WAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_IDOLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 15 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-15-i2c-lcd/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-15-i2c-lcd/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>CPUの創り方</title>
        <description>&lt;h2 id=&quot;cpu2003-&quot;&gt;書籍「CPUの創り方」（2003年）渡波郁 著&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/book.jpg&quot; alt=&quot;CPUの創り方&quot; title=&quot;CPUの創り方&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　この本は電子工作の入門書です。しかし入門書と言っても内容は壮大で、CPUを設計して自作しようというものです。電子工作初心者だけでなく、ある程度電子工作をしてきた人にも読みごたえのある一冊になっています。&lt;/p&gt;

&lt;h2 id=&quot;td4&quot;&gt;作ったもの : TD4&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/board_top.jpg&quot; alt=&quot;TD4&quot; title=&quot;TD4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　この本の中で設計しているCPUを実際に作りました。TD4とは&lt;strong&gt;T&lt;/strong&gt;ada &lt;strong&gt;D&lt;/strong&gt;ousa-suru-dakei-no &lt;strong&gt;4&lt;/strong&gt;-bit CPU という意味です。&lt;/p&gt;

&lt;h2 id=&quot;iccpu&quot;&gt;ICとCPUの違い&lt;/h2&gt;
&lt;p&gt;　ICは、決まった動作をしかできません。「こんな機能が欲しい」という時は、その機能を持ったICを買いに行かなければなりません。しかし、CPUは「プログラム」を実行することができます。これにより、プログラム次第で様々な動作をさせることができます。今回は、決まった動作しかできない「IC」を使って柔軟な動作の「CPU」を作りました。（と言っても、回路を設計したのは上の本の作者さんです。）&lt;/p&gt;

&lt;h2 id=&quot;cpu&quot;&gt;CPUの構成&lt;/h2&gt;

&lt;h3 id=&quot;cpubit&quot;&gt;CPUのbit数&lt;/h3&gt;
&lt;p&gt;　先にも書いたとおり、これは4bitのCPUです。4bit CPUというのは各レジスタが4bitでできているということです。&lt;/p&gt;

&lt;h3 id=&quot;rom&quot;&gt;プログラムメモリ（ROM）&lt;/h3&gt;
&lt;p&gt;　写真左側に、16個のDIPスイッチが並んでいます。これがプログラムメモリ(ROM)です。8bitのDIPスイッチが16個あるので、16ByteのROMになります。普通、ROMといえば不揮発性のフラッシュメモリですが、TD4では物理的スイッチにより実現しています。&lt;/p&gt;

&lt;h3 id=&quot;ram&quot;&gt;レジスタ（RAM）&lt;/h3&gt;
&lt;p&gt;　TD4には4bitのレジスタが４つあり、以下の役割があります。写真中央の縦に並んだ４つのICです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プログラム・カウンタ&lt;/li&gt;
  &lt;li&gt;汎用レジスタA&lt;/li&gt;
  &lt;li&gt;汎用レジスタB&lt;/li&gt;
  &lt;li&gt;出力レジスタ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;alu&quot;&gt;算術論理演算装置（ALU）&lt;/h3&gt;
&lt;p&gt;　TD4は、4bit + 4bit の加算器を持っています。以上。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;入出力&lt;/h2&gt;
&lt;p&gt;　入力は4bitで、写真中央最下部の４つのスライドスイッチです。これらのHigh/Lowをレジスタに取り込むことができます。&lt;br /&gt;
　出力も4bitで、それぞれに黄色のLEDがつながっています。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;動作&lt;/h2&gt;
&lt;p&gt;　TD4にプログラミングするには、まずはアセンブリ言語を書きます。それをハンドアセンブル（アセンブリ言語を、２進法に変えること）をして、TD4のDIPスイッチにプログラムを書き込みます。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;アセンブリ言語命令一覧&lt;/h3&gt;
&lt;p&gt;　プログラムメモリは8bitで1かたまりです。8bitのうち、左4bitがオペレーションコード、右4bitがデータになっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/asm.jpg&quot; alt=&quot;アセンブリコード表&quot; title=&quot;アセンブリコード表&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;動作周波数&lt;/h3&gt;
&lt;p&gt;　本の中ではハンドクロック（ボタンを押すたびにクロックが進む）と1HzのRCクロックが用意されていました。これに加えて、可変抵抗による可変クロックをつけました。&lt;br /&gt;
　クロックの最速は、344Hzでした。オシロスコープでクロックを見てみるっと、波が少し汚いです。これはRC発振を標準ロジックICのシュミットトリガで行ってるためだと思われます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/344Hz.jpg&quot; alt=&quot;オシロスコープ&quot; title=&quot;オシロスコープ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　そこで、クロックのソースをファンクション・ジェネレータに変えてみました。すると、約1MHzくらいまで動作しました。しかし、クロックが動くのが確認できても、プログラムを正常に実行しているのかは早すぎてわかりませんでした。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;　この本を読むと、CPUの構造が本当によくわかります。実在するCPUもこれの拡張にすぎません。 マイコンなどを使う時も内部の構造を知っていて使うのと知らずに使うのでは、生産性がかなり違うと思います。ブラックボックスと思い込んでしまうのはだめです。&lt;br /&gt;
　TD4を作るとハンダ付けの技術が上がります。本を読むだけでなく、実際に作ってみましょう。作り終わったら、&lt;strong&gt;楽しい楽しいデバック作業&lt;/strong&gt;が待ってますよ(^^)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/board_back.jpg&quot; alt=&quot;TD4 裏面&quot; title=&quot;TD4 裏面&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-04-create-cpu/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-04-create-cpu/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Surface Pro 3 に Ubuntu15.10を入れる(UEFI環境のデュアルブート)</title>
        <description>&lt;h2 id=&quot;uefi&quot;&gt;UEFIとは&lt;/h2&gt;
&lt;p&gt;　BIOSの代わりに最近のパソコンに導入されたインターフェース。BIOS特有の制約を解消したものと言える。UEFI環境でブートするには、ディスクの先頭にUEFIシステムパティションというものを置かなければならない。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;今現在できること、できないこと&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;できること&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Surface Pro 3 に Ubuntu 15.10 を入れること。&lt;/li&gt;
  &lt;li&gt;Surface Type cover のキーボードを使うこと。&lt;/li&gt;
  &lt;li&gt;Surface Type cover のタッチパッドを使うこと。&lt;/li&gt;
  &lt;li&gt;タッチ画面を使うこと。&lt;/li&gt;
  &lt;li&gt;Surface Pen を使うこと。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;できないこと&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Surface Type cover のタッチパッドの２本指スクロール。&lt;/li&gt;
  &lt;li&gt;スリープボタン、音量ボタン&lt;br /&gt;
  →追記2015.11.6：linux kernel 4.3以上で対応！&lt;/li&gt;
  &lt;li&gt;電力効率が悪い（Windows使用時に比べて2/3程度になる）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;用意するもの&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Surface Pro 3&lt;/li&gt;
  &lt;li&gt;Ubuntuインストール用のUSBメモリ（4GB以上）&lt;/li&gt;
  &lt;li&gt;USBハブ&lt;/li&gt;
  &lt;li&gt;USBキーボード（最初はSurface Type coverを認識しません）&lt;/li&gt;
  &lt;li&gt;USBマウス&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ubuntu&quot;&gt;Ubuntuインストール手順&lt;/h2&gt;

&lt;h3 id=&quot;usb&quot;&gt;1.インストールUSBの作成&lt;/h3&gt;

&lt;p&gt;まずは、通常通りWindowsで作業を行う。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ubuntulinux.jp/&quot;&gt;Ubuntu Japanese&lt;/a&gt;よりISOイメージをダウンロードする。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://osdn.jp/projects/sfnet_usbwriter/&quot;&gt;USBWriter&lt;/a&gt;などを使って、ISOイメージをUSBメモリに焼く。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;windows&quot;&gt;2.Windows側の設定&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;bitlockerの停止&lt;br /&gt;
  コントロールパネルから、bitlockerの暗号化を解除する。&lt;/li&gt;
  &lt;li&gt;高速スタートアップ機能の停止&lt;br /&gt;
  同じくコントロールパネルから、高速スタートアップ機能を停止する。&lt;/li&gt;
  &lt;li&gt;重要なファイルは必ずバックアップを取っておく&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;usb-1&quot;&gt;3.USBブート&lt;/h3&gt;
&lt;p&gt;※他サイトではセキュアブートを解除しろと書いてありますが、解除する必要はありません。Ubuntuはセキュアです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;電源の切れたSurfaceにUSBハブとUSBキーボードをつなぐ。&lt;/li&gt;
  &lt;li&gt;Ubuntuの入ったUSBメモリを挿す。&lt;/li&gt;
  &lt;li&gt;USBブートするために、ボリュームマイナスボタンを押しながら電源ボタンを押す。&lt;/li&gt;
  &lt;li&gt;Surfaceロゴが現れたら、ボタンを放す。&lt;/li&gt;
  &lt;li&gt;GRUB2のブートローダーが現れるので、Try Ubuntu を選択する。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ubuntu-1&quot;&gt;4.Ubuntu用のパーティション作成&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-03-surface-ubuntu/gparted.png&quot; alt=&quot;GParted&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Altボタンを一度押して、「GParted」アプリを起動する。&lt;/li&gt;
  &lt;li&gt;右上のメニューでUbuntuをインストールするDisk(SSD)を選択する。&lt;/li&gt;
  &lt;li&gt;一番大きいWindowsのパーティションを縮小する。&lt;/li&gt;
  &lt;li&gt;上の操作で空いた領域にまず、Ubuntuのルートディレクトリ用のパーティションを作る。大きさはswp領域のためにSurfaceのRAM+2GBくらい残しておくと良い。マウントやフォーマットはインストール時にするので、適当で良い。&lt;/li&gt;
  &lt;li&gt;残った空き領域をswp領域用にパーティションを作る。ここでも形式は何でも良い。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;point&quot;&gt;Point&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;WindowsとUbuntuの領域を隣同士に設定しておくと、後で容量の変更がうまくできるのでおすすめ。&lt;/li&gt;
  &lt;li&gt;SDカードにUbuntuをインストールすることもできるが、おすすめしません！！動作が遅すぎて使えたものではありません。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ubuntu-2&quot;&gt;5.Ubuntuのインストール&lt;/h3&gt;

&lt;p&gt;パーティションが作れたら、いよいよUbuntuをインストールします。&lt;/p&gt;

&lt;p&gt;先ほどUbuntuように作ったパーティションを編集する&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;容量はお好きなように。（私は32000MB）&lt;/li&gt;
  &lt;li&gt;パーティションのタイプは、「基本パーティション」&lt;/li&gt;
  &lt;li&gt;パーティションの場所は、「この領域の始点」&lt;/li&gt;
  &lt;li&gt;利用方法は、「ext4ジャーナリングファイルシステム」&lt;/li&gt;
  &lt;li&gt;マウントポイントは、「/」を書く。ルートディレクトリということ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次に、swp領域のセットアップをする。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;容量はRAM+2GB程度。&lt;/li&gt;
  &lt;li&gt;パーティションのタイプは、「論理パーティション」&lt;/li&gt;
  &lt;li&gt;パーティションの場所は、「この領域の始点」&lt;/li&gt;
  &lt;li&gt;利用方法は、「スワップ領域」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windowsがインストールされているパーティション(ntfs)パーティションを編集して、パーティションのタイプを「ntfs」マウントポイントを「/windows」にしておくと、UbuntuからWindows内のファイルにアクセスできるようになる。&lt;/p&gt;

&lt;p&gt;ブートローダーインストールデバイスは、Ubuntuのルートパーティションに設定する。&lt;/p&gt;

&lt;p&gt;設定ができたら画面に従ってインストールする。&lt;/p&gt;

&lt;h3 id=&quot;surface-type-cover-&quot;&gt;6.Surface Type Cover を使えるようにする&lt;/h3&gt;

&lt;p&gt;Terminal などで以下のファイルを開き下の文を最下部に追記する。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo vi /usr/share/X11/xorg.conf.d/10-evdev.conf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Section &quot;InputClass&quot;  
	Identifier &quot;Surface Pro 3 cover&quot;
	MatchIsPointer &quot;on&quot;
	MatchDevicePath &quot;/dev/input/event*&quot;
	Driver &quot;evdev&quot;
	Option &quot;vendor&quot; &quot;045e&quot;
	Option &quot;product&quot; &quot;07dd&quot;
	Option &quot;IgnoreAbsoluteAxes&quot; &quot;True&quot;
EndSection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;「product」の”07dd”はJIS配列のキーボードの場合。US配列は”07dc”とする。&lt;/p&gt;

&lt;p&gt;同様に次のファイルにも追記する。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo vi /usr/share/X11/xorg.conf.d/50-synaptics.conf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Section &quot;InputClass&quot;
    Identifier &quot;Disable clickpad buttons on Apple touchpads&quot;
    MatchProduct &quot;Apple|bcm5974&quot;
    MatchDriver &quot;synaptics&quot;
    Option &quot;SoftButtonAreas&quot; &quot;0 0 0 0 0 0 0 0&quot;
EndSection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再起動する。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;7.センサー設定&lt;/h3&gt;
&lt;p&gt;様々なドライバをインストール&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install -y lm-sensors
$ sudo sensors-detect
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これを実行するといろいろ聞かれるので、yesを打ち続ける。&lt;/p&gt;

&lt;p&gt;Bluetoothドライバをインストール&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone git://git.marvell.com/mwifiex-firmware.git
$ mkdir -p /lib/firmware/mrvl/
$ sudo cp mwifiex-firmware/mrvl/\* /lib/firmware/mrvl/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;linux-kernel&quot;&gt;8.必要に応じてLinux-kernelをインストールする。&lt;/h3&gt;

&lt;p&gt;ここまでの操作でキーボードやタッチ画面や音量ボタンなどが正常に動くならば、kernelのインストールはいらない。&lt;/p&gt;

&lt;p&gt;不満な点があるならば、&lt;a href=&quot;http://kernel.ubuntu.com/~kernel-ppa/mainline/&quot;&gt;Index of /~kernel-ppa/mainline&lt;/a&gt;から最新のkernelのdebファイルをダウンロードする。
例えば、v4.3が最新なら、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v4.3-wily/linux-headers-4.3.0-040300-generic_4.3.0-040300.201511020949_amd64.deb
v4.3-wily/linux-headers-4.3.0-040300_4.3.0-040300.201511020949_all.deb
v4.3-wily/linux-image-4.3.0-040300-generic_4.3.0-040300.201511020949_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;の３つのファイルをダウンロードする。&lt;/p&gt;

&lt;p&gt;Terminalで、ダウンロードしたdebのあるディレクトリで
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo dpkg -i linux-*.deb&lt;/code&gt;
を実行してインストールする。再起動して直っていたら完成。治らないならば、kernelのソースを入手して、パッチを当ててリビルドする必要があるが、とてもめんどくさい。公式に対応されるのを待つほうが早いかも。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;困った時は？&lt;/h2&gt;

&lt;h3 id=&quot;section-6&quot;&gt;インストール時&lt;/h3&gt;
&lt;p&gt;インストールは必ずしもうまく行くとは限りません。一度失敗しても、もう一度試すとうまく行く場合があります。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;インストール後（ドライバの設定など）&lt;/h3&gt;
&lt;p&gt;何故かうまく行かない時、再起動するとうまく行くことがあります。とりあえず、再起動してみましょう。&lt;/p&gt;

&lt;h3 id=&quot;ubuntu-3&quot;&gt;Ubuntuの削除または再インストール&lt;/h3&gt;
&lt;p&gt;環境をいじっていたらおかしくなってしまって、Ubuntuを諦めたり、再インストールすることがある。そんなときは注意！！&lt;/p&gt;

&lt;p&gt;Ubuntuをインストールした際に、ブートローダの優先順位がUbuntu優先になっています。&lt;/p&gt;

&lt;p&gt;その状態でUbuntuを削除すると、UbuntuはおろかWindowsも起動しなくなります。&lt;br /&gt;
&lt;a href=&quot;http://qiita.com/batimiasu/items/0d87413913fbbb90837b&quot;&gt;このような記事&lt;/a&gt;を参考にしましょう。&lt;/p&gt;

&lt;h3 id=&quot;ubuntuwindows&quot;&gt;Ubuntuを削除したらWindowsが起動しなくなったときは&lt;/h3&gt;

&lt;p&gt;exfatでフォーマットしたUSBメモリに、UEFIシェルファイルを入れて、そこからブートし、ブート優先順位を変える。&lt;/p&gt;

&lt;h4 id=&quot;uefiusb&quot;&gt;UEFIシェルの入ったUSBメモリを作る&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;正常に動く別のPCで&lt;a href=&quot;/images/2015-11-03-surface-ubuntu/Shell.efi&quot;&gt;UEFIshell&lt;/a&gt;をダウンロードする。&lt;/li&gt;
  &lt;li&gt;FAT32でフォーマットしたUSBメモリに、&lt;code class=&quot;highlighter-rouge&quot;&gt;EFI/Boot/&lt;/code&gt;というフォルダを作る。&lt;/li&gt;
  &lt;li&gt;その中に先ほどダウンロードしたUEFIシェルを&lt;code class=&quot;highlighter-rouge&quot;&gt;Bootx64.efi&lt;/code&gt;という名前にリネームして入れる。&lt;/li&gt;
  &lt;li&gt;終わり。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-8&quot;&gt;ブートの優先順位を変える&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Surfaceの電源が切れた状態でボリュームアップボタンを押しながら電源を入れる→UEFI設定画面が現れる。&lt;/li&gt;
  &lt;li&gt;セキュアブートをdisenableにする。UEFIシェルはUbuntuと違ってセキュアブートに弾かれてしまうから。&lt;/li&gt;
  &lt;li&gt;今度は、ボリュームダウンボタンを押しながらSurfaceを起動する。するとUEFIシェルが現れる。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fs1:&lt;/code&gt;と入力する。これで、SSDのUEFIシステムパーティションの中に入った。&lt;code class=&quot;highlighter-rouge&quot;&gt;fs0:&lt;/code&gt;は今シェルを使っているUSBだと思われる。SSDの他にディスクがつながっているときは、&lt;code class=&quot;highlighter-rouge&quot;&gt;fs1:&lt;/code&gt;じゃなくて&lt;code class=&quot;highlighter-rouge&quot;&gt;fs2:&lt;/code&gt;とかになるかもしれない。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bcfg boot dump -v&lt;/code&gt;と入力する。するとブートエントリが表示される。&lt;/li&gt;
  &lt;li&gt;その中のUbuntuの２桁のブート優先順位の番号（おそらく01）を確認する。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bcfg boot rm 01&lt;/code&gt;と入力すると、Ubuntu のブートエントリを削除できる。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reboot&lt;/code&gt;で再起動する。次からはWindowsが起動するはずだ。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-9&quot;&gt;細部の設定&lt;/h2&gt;

&lt;h3 id=&quot;section-10&quot;&gt;ホームディレクトリのフォルダを日本語から英語に変える&lt;/h3&gt;

&lt;p&gt;　Ubuntuを日本語でインストールすると、ホームディレクトリのフォルダ類（ドキュメントやダウンロードなど）が日本語になっている。このままだと、ターミナルでのアクセスが少し面倒である。これらを英語に変える方法がある。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
$ LANG=C xdg-user-dirs-gtk-update
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;を実行して、現れたダイアログで「Don’t ask me again」にチェックを入れて、「Update Names」を押す。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;使ってみての感想&lt;/h2&gt;

&lt;p&gt;Surface Pro 3 最高ーーー！！&lt;br /&gt;
Linux 最高ーーー！&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-03-surface-ubuntu/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-03-surface-ubuntu/</guid>
        
        
        <category>memo</category>
        
      </item>
    
  </channel>
</rss>
