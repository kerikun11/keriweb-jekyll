<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KERI&#39;s Lab</title>
    <description>KERI&#39;s Lab へようこそ。ここでは、趣味の電子工作やサーバーづくりなどを紹介しています。</description>
    <link>http://kerikeri.top/</link>
    <atom:link href="http://kerikeri.top/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 05 Nov 2015 22:52:16 +0900</pubDate>
    <lastBuildDate>Thu, 05 Nov 2015 22:52:16 +0900</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>CPUの創り方</title>
        <description>&lt;h2 id=&quot;cpu2003-&quot;&gt;書籍「CPUの創り方」（2003年）渡波郁 著&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/book.jpg&quot; alt=&quot;CPUの創り方&quot; title=&quot;CPUの創り方&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　この本は電子工作の入門書です。しかし入門書と言っても内容は壮大で、CPUを設計して自作しようというものです。電子工作初心者だけでなく、ある程度電子工作をしてきた人にも読みごたえのある一冊になっています。&lt;/p&gt;

&lt;h2 id=&quot;td4&quot;&gt;作ったもの : TD4&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/board_top.jpg&quot; alt=&quot;TD4&quot; title=&quot;TD4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　この本の中で設計しているCPUを実際に作りました。TD4とは&lt;strong&gt;T&lt;/strong&gt;ada &lt;strong&gt;D&lt;/strong&gt;ousa-suru-dakei-no &lt;strong&gt;4&lt;/strong&gt;-bit CPU という意味です。&lt;/p&gt;

&lt;h2 id=&quot;iccpu&quot;&gt;ICとCPUの違い&lt;/h2&gt;
&lt;p&gt;　ICとは、決まった動作をしかできません。「こんな機能が欲しい」という時は、その機能を持ったICを買いに行かなければなりません。しかし、CPUは「プログラム」を実行することができます。これにより、プログラム次第で様々な動作をすることができます。今回は、決まった動作しかできない「IC」を使って柔軟な動作の「CPU」を作りました。（と言っても、回路を設計したのは本の作者です。）&lt;/p&gt;

&lt;h2 id=&quot;cpu&quot;&gt;CPUの構成&lt;/h2&gt;

&lt;h3 id=&quot;cpubit&quot;&gt;CPUのbit数&lt;/h3&gt;
&lt;p&gt;　先にも書いたとおり、これは4bitのCPUです。4bit CPUというのは各レジスタが4bitでできているということです。&lt;/p&gt;

&lt;h3 id=&quot;rom&quot;&gt;プログラムメモリ（ROM）&lt;/h3&gt;
&lt;p&gt;　写真左側に、16個のDIPスイッチが並んでいます。これがプログラムメモリ(ROM)です。8bitのDIPスイッチが16個あるので、16ByteのROMになります。普通、ROMといえば不揮発性のフラッシュメモリですが、TD4では物理的スイッチにより再現してあります。&lt;/p&gt;

&lt;h3 id=&quot;ram&quot;&gt;レジスタ（RAM）&lt;/h3&gt;
&lt;p&gt;　TD4には4bitのレジスタが４つあり、以下の役割があります。写真中央に縦に並んだ４つのICです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プログラム・カウンタ&lt;/li&gt;
  &lt;li&gt;汎用レジスタA&lt;/li&gt;
  &lt;li&gt;汎用レジスタB&lt;/li&gt;
  &lt;li&gt;出力レジスタ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;alu&quot;&gt;算術論理演算装置（ALU）&lt;/h3&gt;
&lt;p&gt;　TD4は、4bit + 4bit の加算器を持っています。以上。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;入出力&lt;/h2&gt;
&lt;p&gt;　入力は、写真中央最下部の４つのスライドスイッチです。これらのHigh/Lowをレジスタに取り込むことができます。&lt;br /&gt;
　出力には、４つのLEDがつながっています。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;動作&lt;/h2&gt;
&lt;p&gt;　TD4にプログラミングするには、まずはアセンブリ言語を書きます。それをハンドアセンブル（アセンブリ言語を、２進法に変えること）をして、TD4のDIPスイッチにプログラムを書き込みます。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;アセンブリ言語命令一覧&lt;/h3&gt;
&lt;p&gt;　プログラムメモリは8bitで1かたまりです。8bitのうち、左4bitがオペレーションコード、右4bitがデータになっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/asm.jpg&quot; alt=&quot;アセンブリコード表&quot; title=&quot;アセンブリコード表&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;動作周波数&lt;/h3&gt;
&lt;p&gt;　本の中ではハンドクロック（ボタンを押すたびにクロックが進む）と1HzのRCクロックが用意されていました。これに加えて、可変抵抗による可変クロックをつけました。&lt;br /&gt;
　クロックの最速は、344Hzでした。オシロスコープでクロックを見てみるっと、波が少し汚いです。これはRC発振を標準ロジックICのシュミットトリガで行ってるためだと思われます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/344Hz.jpg&quot; alt=&quot;オシロスコープ&quot; title=&quot;オシロスコープ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　そこで、クロックのソースをファンクション・ジェネレータに変えてみました。すると、約1MHzくらいまで動作しました。しかし、クロックが動くのが確認できても、プログラムを正常に実行しているのかは早すぎてわかりません。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;　この本を読むと、CPUの構造が本当によくわかります。実在するCPUもこれの拡張にすぎません。 マイコンなどを使う時も内部の構造を知っていて使うのと知らずに使うのでは、生産性がかなり違うと思います。ブラックボックスと思い込んでしまうのはだめです。&lt;br /&gt;
　TD4を作るとハンダ付けの技術が上がります。本を読むだけでなく、実際に作ってみましょう。作り終わったら、&lt;strong&gt;楽しい楽しいデバック作業&lt;/strong&gt;が待ってますよ(^^)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/board_back.jpg&quot; alt=&quot;TD4 裏面&quot; title=&quot;TD4 裏面&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-04-create-cpu/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-04-create-cpu/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Surface Pro 3 に Ubuntu15.10を入れる(UEFI環境のデュアルブート)</title>
        <description>&lt;h2 id=&quot;uefi&quot;&gt;UEFIとは&lt;/h2&gt;
&lt;p&gt;　BIOSの代わりに最近のパソコンに導入されたインターフェース。BIOS特有の制約を解消したものと言える。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;今現在できること、できないこと&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;できること&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Surface Pro 3 に Ubuntu 15.10 を入れること。&lt;/li&gt;
  &lt;li&gt;Surface Type cover のキーボードを使うこと。&lt;/li&gt;
  &lt;li&gt;Surface Type cover のタッチパッドを使うこと。&lt;/li&gt;
  &lt;li&gt;タッチ画面を使うこと。&lt;/li&gt;
  &lt;li&gt;Surface Pen を使うこと。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;できないこと&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Surface Type cover のタッチパッドの２本指スクロール。&lt;/li&gt;
  &lt;li&gt;スリープボタン、音量ボタン&lt;/li&gt;
  &lt;li&gt;電力効率が悪い&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;用意するもの&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Surface Pro 3&lt;/li&gt;
  &lt;li&gt;Ubuntuインストール用のUSBメモリ（4GB以上）&lt;/li&gt;
  &lt;li&gt;USBハブ&lt;/li&gt;
  &lt;li&gt;USBキーボード（最初はSurface Type coverを認識しません）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;ホームディレクトリのフォルダを日本語から英語に変える&lt;/h2&gt;

&lt;p&gt;　Ubuntuを日本語でインストールすると、ホームディレクトリのフォルダ類（ドキュメントやダウンロードなど）が日本語になっている。このままだと、ターミナルでのアクセスが少し面倒である。これらを英語に変える方法がある。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ LANG=C xdg-user-dirs-gtk-update
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;を実行して、現れたダイアログで「Don’t ask me again」にチェックを入れて、「Update Names」を押す。&lt;/p&gt;

</description>
        <pubDate>Tue, 03 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-03-surface-ubuntu/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-03-surface-ubuntu/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>SSHの使い方</title>
        <description>&lt;h1&gt;SSH&lt;/h1&gt;
&lt;section&gt;

	&lt;h2&gt;SSHとは&lt;/h2&gt;
	&lt;article&gt;
		&lt;p&gt;　Secure Shell。暗号や認証の技術を利用して、安全にリモートコンピュータと通信するためのプロトコル。 パスワードなどの認証部分を含むすべてのネットワーク上の通信が暗号化される。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h2&gt;ホスト側設定&lt;/h2&gt;
	&lt;article&gt;
		&lt;p&gt;openssh-serverをインストールしておく必要がある。これをインストールする前に、パスワードなどがしっかり設定されているかなどを確認しておくこと。&lt;/p&gt;
		&lt;pre&gt;$sudo apt-get install openssh-server&lt;/pre&gt;
		&lt;p&gt;を実行すると外部からアクセスできるようになる。&lt;/p&gt;
		&lt;pre&gt;$ sudo vim /etc/ssh/sshd_config&lt;/pre&gt;
		&lt;p&gt;　ここで各種設定をする。&lt;/p&gt;
		&lt;pre&gt;
Port 22
		&lt;/pre&gt;
	&lt;/article&gt;

	&lt;h2&gt;鍵の生成&lt;/h2&gt;
	&lt;article&gt;
		&lt;p&gt;　鍵はクライアント側で生成することが多い。&lt;/p&gt;
		&lt;pre&gt;$ssh-keygen -t ecdsa -C &quot;comment&quot;&lt;/pre&gt;
		&lt;p&gt;を実行するとファイル名とパスワード作成を求められるが空欄でもENTERを押せば良い。すると、カレントディレクトリに「id_ecdsa」「id_ecdsa.pu」の２つのファイルが生成される。この内、「id_ecdsa.pub」を適当な手段でsshで繋ぎたい相手（ホスト側）に渡す。これは公開鍵なので、誰かに見られても大丈夫である。むしろ、どこからでもアクセスできる場所においておくのが便利である。逆に「id_ecdsa」は、秘密鍵なので、厳重に保管する。&lt;/p&gt;
		&lt;p&gt;　公開鍵をホスト側のPCに移動したら、鍵リストに追加する。ホームディレクトリに.sshディレクトリがなければ作る。&lt;/p&gt;
		&lt;pre&gt;$ mkdir ~/.ssh&lt;/pre&gt;
		&lt;p&gt;　ここに「authorized_keys」というファイルがあれば、以下のように追加する。&lt;/p&gt;
		&lt;pre&gt;$ cat id_ecdsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/pre&gt;
		&lt;p&gt;なければ、新規作成してから、鍵を追加する。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h2&gt;SSHの接続&lt;/h2&gt;
	&lt;article&gt;
		&lt;p&gt;　接続コマンドは以下の通り。ログインユーザー名と、ホストアドレスを書く。&lt;/p&gt;
		&lt;pre&gt;$ssh your_username@your_domain.com&lt;/pre&gt;
		&lt;p&gt;　公開鍵認証がうまく設定できていれば、これで接続ができる。失敗していると、パスワードを求められて、パスワード認証となってしまう。(sshd_confでパスワード認証が許可されている場合)&lt;/p&gt;
		&lt;p&gt;　公開鍵認証を使わなくても、パスワード認証でも接続することができる。しかしこれはあまり使われない（使わないほうが良い）。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h2&gt;.ssh/config&lt;/h2&gt;
	&lt;article&gt;
		&lt;p&gt;　sshにつなぐときに毎回アドレスを入力するのは面倒なので、よく使うものはconfigに登録しておくと良い。&lt;/p&gt;
		&lt;pre&gt;
$vim ~/.ssh/config

Host local_raspi
	HostName	192.168.11.2 ←ラズパイのIP
	IdentityFile	~/.ssh/id_ecdsa
	User		kerikun11
	Port		22

Host global_raspi
	HostName	kerikeri.top ←ドメイン
	IdentityFile	~/.ssh/id_ecdsa
	User		kerikun11
	Port		22
		&lt;/pre&gt;
		&lt;p&gt;　接続の仕方は、以下の通り。とても簡単。&lt;/p&gt;
		&lt;pre&gt;$ssh global_raspi&lt;/pre&gt;
	&lt;/article&gt;
&lt;/section&gt;
</description>
        <pubDate>Sat, 31 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-10-31-ssh/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-10-31-ssh/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>linkを作る「ln」コマンド</title>
        <description>&lt;h2&gt;ハードリンクとシンボリックリンク&lt;/h2&gt;
&lt;article&gt;
	&lt;p&gt;　ハードリンクは、別名の同じファイルといえる。ターゲットとリンクの区別がなく、すべてのファイルに実体があり（ディスク容量を消費）、削除するにはすべてのファイルを削除する必要がある。&lt;/p&gt;
	&lt;p&gt;　シンボリックリンクは、いわゆるショートカットと同じで、パス情報のみを保持している。したがって、実体を削除するとシンボリックリンはエラーになる。&lt;/p&gt;
&lt;/article&gt;
&lt;h2&gt;コマンド形式&lt;/h2&gt;
&lt;article&gt;
	&lt;p&gt;　以下のようなコマンドを実行する。&lt;/p&gt;
	&lt;pre&gt;$ ln -fids &amp;lt;ターゲット&amp;gt; &amp;lt;リンク&amp;gt;&lt;/pre&gt;
	&lt;ul&gt;
		&lt;li&gt;-f	指定したリンク先にもともとリンクやファイルがあっても、警告なしに上書きする&lt;/li&gt;
		&lt;li&gt;-i	指定したリンク先にもともとリンクやファイルがあるときに、問合わせる&lt;/li&gt;
		&lt;li&gt;-d	ディレクトリのリンクを作成&lt;/li&gt;
		&lt;li&gt;-s	シンボリックリンクを作成（デフォルトはハードリンク）&lt;/li&gt;
	&lt;/ul&gt;
&lt;/article&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;article&gt;
	&lt;p&gt;　Gitのdotfilesなどで管理している.vimrcなどを所定の場所に配置するコマンド&lt;/p&gt;
	&lt;pre&gt;$ ln -sf ~/dotfiles/.vimrc ~/.vimrc&lt;/pre&gt;

</description>
        <pubDate>Wed, 28 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-10-28-link/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-10-28-link/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>Shell Scriptの使い方</title>
        <description>&lt;h2&gt;実行権限をつける&lt;/h2&gt;
&lt;article&gt;
	&lt;p&gt;　テキストファイルを実行可能ファイルにする。&lt;/p&gt;
	&lt;pre&gt;$chmod u+x filename.sh&lt;/pre&gt;
&lt;/article&gt;

&lt;h2&gt;実行する&lt;/h2&gt;
&lt;pre&gt;$ ./filename.sh&lt;/pre&gt;
</description>
        <pubDate>Wed, 21 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-10-21-shell-script/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-10-21-shell-script/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>Gitの使い方</title>
        <description>&lt;h2&gt;主なコマンド&lt;/h2&gt;
&lt;article&gt;
	&lt;h3&gt;clone&lt;/h3&gt;
	&lt;p&gt;　設定ファイルやソースファイルなどはGitにおいて管理するよ良い。その際、設定ファイルのあった場所にはcloneしたディレクトリへのショートカットを置いておく。設定ファイルにはユーザー名とパスワードが記述されているものが多いので、それらをアップロードしないように細心の注意を払うこと。Gitは履歴が残るので、たとえファイルを削除しても簡単には消えてくれない。&lt;/p&gt;
	&lt;pre&gt;$git clone https://github.com/your_username/your_repository.git&lt;/pre&gt;
	&lt;p&gt;　cloneを置きたいディレクトリで上のコマンドを実行すると、新たにリポジトリ名のディレクトリが生成される。&lt;/p&gt;
	&lt;h3&gt;add&lt;/h3&gt;
	&lt;p&gt;　新規作成したファイルをGitにあげるにはcloneしているディレクトリに入って、以下のコマンドを実行する。&lt;/p&gt;
	&lt;pre&gt;$git add filename&lt;/pre&gt;
	&lt;h3&gt;commit&lt;/h3&gt;
	&lt;p&gt;ファイルを変更したら、以下のコマンドによりファイルの変更を確定する。commitすると、変更履歴が更新される。（ローカルで使える。）その後pushすることで変更をサーバーへ送る。-aオプションをつけるとaddも一緒にできる。&lt;/p&gt;
	&lt;pre&gt;$git commit filename -m &#39;message&#39;&lt;/pre&gt;
	&lt;h3&gt;push&lt;/h3&gt;
	&lt;p&gt;　commitしたら、cloneしているディレクトリに入って、&lt;/p&gt;
	&lt;pre&gt;$git push&lt;/pre&gt;
	&lt;p&gt;を実行すると、Git上のファイルが更新される。&lt;/p&gt;
	&lt;h3&gt;pull&lt;/h3&gt;
	&lt;p&gt;　ほかの場所で更新した内容をこのPCにも反映させるには、cloneしているディレクトリに入って、以下のコマンドを実行する。&lt;/p&gt;
	&lt;pre&gt;$git pull&lt;/pre&gt;
	&lt;h3&gt;diff&lt;/h3&gt;
	&lt;p&gt;変更の差分を表示する。&lt;/p&gt;
	&lt;pre&gt;$git diff filename&lt;/pre&gt;
&lt;/article&gt;
</description>
        <pubDate>Wed, 21 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-10-21-git/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-10-21-git/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>Charge Station</title>
        <description>&lt;figure class=&quot;home-gallery&quot;&gt;
	&lt;img src=&quot;/images/2015-10-09-charge-station-6/top.jpg&quot;&gt;
	&lt;img src=&quot;/images/2015-10-09-charge-station-6/charge.jpg&quot;&gt;
	&lt;img src=&quot;/images/2015-10-09-charge-station-6/board_top.jpg&quot;&gt;
	&lt;img src=&quot;/images/2015-10-09-charge-station-6/board_bottom.jpg&quot;&gt;
&lt;/figure&gt;
&lt;section class=&quot;item&quot;&gt;
	&lt;article&gt;
		&lt;h1&gt;概要&lt;/h1&gt;
		&lt;p&gt;　ChargeStationとは自作の携帯電話充電器です。僕が命名しました。充電が終わると自動で給電を止めるので、電気の節約になります。&lt;/p&gt;
	&lt;/article&gt;

	&lt;article&gt;
		&lt;h1&gt;機能&lt;/h1&gt;
		&lt;ol&gt;
			&lt;li&gt;自動給電オフ&lt;/li&gt;
			&lt;li&gt;充電電流、積算電流、充電時間表示&lt;/li&gt;
			&lt;li&gt;LEDインジケータ&lt;/li&gt;
			&lt;li&gt;時計表示&lt;/li&gt;
			&lt;li&gt;充電データ出力（USBシリアル）&lt;/li&gt;
			&lt;li&gt;各種設定&lt;/li&gt;
		&lt;/ol&gt;
	&lt;/article&gt;

	&lt;article&gt;
		&lt;h1&gt;仕様&lt;/h1&gt;
		&lt;ul&gt;
			&lt;li&gt;使用マイコン：PIC18F27J53&lt;/li&gt;
			&lt;li&gt;電力供給能力：5V・最大6A&lt;/li&gt;
			&lt;li&gt;ファームの書き換え：USBシリアル&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/article&gt;

	&lt;article&gt;
		&lt;h1&gt;使い方&lt;/h1&gt;
		&lt;ol&gt;
			&lt;li&gt;ChargeStationにACアダプタをつなぐ→液晶に文字が表示される&lt;/li&gt;
			&lt;li&gt;充電したいUSB機器を、３つの充電ポートのうちの１つにつなぐ&lt;/li&gt;
			&lt;li&gt;各充電ポートのタッチボタンに触れる→充電開始&lt;/li&gt;
			&lt;li&gt;充電電流に応じて、充電ポートの脇のLEDが点滅します&lt;/li&gt;
			&lt;li&gt;各ポートのタッチボタンに触れると充電電流、積算電流、充電時間が順に表示される&lt;/li&gt;
		&lt;/ol&gt;
	&lt;/article&gt;

&lt;/section&gt;
&lt;section class=&quot;settings&quot;&gt;
	&lt;article&gt;
		&lt;h1&gt;設定&lt;/h1&gt;
		&lt;p&gt;　ChargeStation左側面のタッチボタンを長押しすると、設定モードに入る。再度ボタンを押すと設定を終わる。ChargeStation表面の左右のボタンをセレクトボタン、真ん中のボタンを決定ボタンとして使う。設定項目は以下の通り。&lt;/p&gt;
		&lt;ol&gt;
			&lt;li&gt;時計合わせ&lt;/li&gt;
			&lt;li&gt;充電完了後自動給電停止機能のオンオフ&lt;/li&gt;
			&lt;li&gt;LEDインジケータのオンオフ&lt;/li&gt;
			&lt;li&gt;積算データのリセット&lt;/li&gt;
		&lt;/ol&gt;
	&lt;/article&gt;
&lt;/section&gt;
</description>
        <pubDate>Fri, 09 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-10-09-charge-station-6/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-10-09-charge-station-6/</guid>
        
        
        <category>production</category>
        
      </item>
    
      <item>
        <title>vimの設定</title>
        <description>&lt;h1&gt;vim の設定&lt;/h1&gt;

&lt;h2&gt;.vimrc&lt;/h2&gt;
&lt;pre&gt;
syntax enable
set number
set autoindent
set smartindent
set backspace=start,eol,indent
set mouse=a
set tabstop=4
set shiftwidth=4
&quot;set expandtab
set encoding=utf-8
set cursorline
set nocompatible

filetype plugin indent off

if has(&#39;vim_starting&#39;)
		set runtimepath+=~/.vim/bundle/neobundle.vim
		call neobundle#begin(expand(&#39;~/.vim/bundle&#39;))
endif

NeoBundle &#39;mattn/emmet-vim&#39;
NeoBundle &#39;anyakichi/vim-surround&#39;
NeoBundle &#39;scrooloose/nerdcommenter&#39;
NeoBundle &#39;hail2u/vim-css3-syntax&#39;
NeoBundle &#39;taichouchou2/html5.vim&#39;
NeoBundle &#39;taichouchou2/vim-javascript&#39;

if has(&#39;vim_starting&#39;)
		call neobundle#end()
endif

filetype plugin indent on
&lt;/pre&gt;

&lt;h2&gt;pluginの設定&lt;/h2&gt;
&lt;article&gt;
	&lt;p&gt;　NeoBundleをダウンロードする。&lt;/p&gt;
	&lt;pre&gt;
$ mkdir -p ~.vim/bundle
$ git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim&lt;/pre&gt;
	&lt;p&gt;　プラグインを入れるには.vimrcにNeoBundleから続けてプラグイン名を書き、保存して、vim上で、&lt;/p&gt;
	&lt;pre&gt;:NeoBundleInstall&lt;/pre&gt;
	&lt;p&gt;または&lt;/p&gt;
	&lt;pre&gt;:NeoBundleUpdate&lt;/pre&gt;
	&lt;p&gt;を実行する。&lt;/p&gt;
&lt;/article&gt;


</description>
        <pubDate>Wed, 07 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-10-07-vim/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-10-07-vim/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>Raspberry Pi 2 Type Bでサーバー作り</title>
        <description>&lt;h2&gt;ラズパイの用意&lt;/h2&gt;
&lt;article&gt;
&lt;ol&gt;
&lt;li&gt;ラズパイ用のOS「NOOBS」を&lt;a href=&quot;http://raspberrypi.org/downloads/&quot; target=&quot;_blank&quot;&gt;raspberrypi.org&lt;/a&gt;からDLして解凍する。&lt;/li&gt;
&lt;li&gt;microSDカードをFAT32でフォーマットする。&lt;/li&gt;
&lt;li&gt;解凍したファイルをSDカードにコピーする。&lt;/li&gt;
&lt;li&gt;ラズパイにSDカード、キーボード、LANケーブル（またはWiFiドングル）をつないで電源を入れる。&lt;/li&gt;
&lt;/ol&gt;
&lt;/article&gt;

&lt;h2&gt;無線LANの接続&lt;/h2&gt;
&lt;article&gt;
&lt;p&gt;　WiFiドングルをラズパイに差す。&lt;/p&gt;
&lt;pre&gt;$ifconfig&lt;/pre&gt;
&lt;p&gt;このコマンドで、インターフェースを確認する。&lt;/p&gt;
&lt;pre&gt;$iwconfig&lt;/pre&gt;
&lt;p&gt;このコマンドでWiFi情報を確認できる。&lt;/p&gt;
&lt;p&gt;　次のファイルを編集して、ハードウェアインターフェースの設定をする。&lt;/p&gt;
&lt;pre&gt;
$sudo vim /etc/network/interfaces

auto lo
iface lo inet loopback

auto eth0
allow-hotplug eth0
iface eth0 inet static
address 192.168.11.2	←your IP
netmask 255.255.255.0	←your subnetmask
gateway 192.168.11.1	←your router IP
dns-nameserver 8.8.8.8 10.255.0.1

auto wlan0
allow-hotplug wlan0
iface wlan0 inet static
address 192.168.11.2	←your IP
netmask 255.255.255.0	←your subnetmask
gateway 192.168.11.1	←your router IP
dns-nameserver 8.8.8.8 10.255.0.1

wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

auto wlan1
allow-hotplug wlan1
iface wlan0 inet manual
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/pre&gt;
&lt;p&gt;次のコマンド&lt;/p&gt;
&lt;pre&gt;$wpa_passphrase &quot;your SSID&quot; &quot;Password&quot;&lt;/pre&gt;
&lt;p&gt;で表示された内容をもとに次のファイルの下に追加で記述する。&lt;/p&gt;
&lt;pre&gt;
$sudo vim /etc/wpa_supplicant/wpa_supplicant.conf

~~~
network={
	ssid=&quot;your SSID&quot;
#psk=&quot;Password&quot;
		psk=&quot;.......&quot;
		key_mgmt=WPA-PSK
		proto=WPA WPA2
		pairwise=CCMP TKIP
		group=CCMP TKIP WEP104 WEP40
}						&lt;/pre&gt;
&lt;p&gt;　これでラズパイを再起動すればつながるはず。&lt;/p&gt;
&lt;/article&gt;

&lt;h2&gt;Webサーバー作り&lt;/h2&gt;
&lt;article&gt;
&lt;p&gt;　まずは、ラズパイのローカルIPを固定にする。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ラズパイ上でラズパイ自身のローカルIPアドレスを確認しておく。&lt;/li&gt;
&lt;pre&gt;$ip addr&lt;/pre&gt;
&lt;li&gt;家のルーターの管理設定にログインして、ラズパイのIPの設定を、「自動割り当て」から「手動割り当て」に変更する。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　次に、Webサーバーアプリの「Apache2」をインストールする。&lt;/p&gt;
&lt;pre&gt;$sudo apt-get install apache2&lt;/pre&gt;
&lt;p&gt;　これで、とりあえずはローカルでサーバーとして使うことができる。ローカルネットワークの端末のブラウザでラズパイのローカルIPアドレスを入力すれば、アクセスできる。&lt;/p&gt;
&lt;/article&gt;

&lt;h2&gt;サーバーを外部へ公開する&lt;/h2&gt;
&lt;article&gt;
&lt;p&gt;　今の状態では、LANからしかサーバーにアクセスできない。これを外のネットワークからでもアクセスできるようにする。&lt;/p&gt;
&lt;p&gt;　まず、家のルーターから外への接続用のポートを開放する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ルーターの管理設定に入る。&lt;/li&gt;
&lt;li&gt;ルータ設定のポート変換を選ぶ&lt;/li&gt;
&lt;li&gt;ポート変換の新規追加で、LAN側IPアドレスをラズパイのローカルIPアドレスに、LAN側ポートを80にする。&lt;/li&gt;
&lt;li&gt;同じように22ポートも開放する。（80はHTTP用、22はSSH用である）&lt;/li&gt;
&lt;li&gt;ラズパイをDMZ(非武装地帯)に置くことですべてのポートを開放することができるが、ファイアウォールなどを適切に設定して、使わないポートをふさがなくてはならない。グローバルからローカルに入るとき、ルーターのファイアウォールによって守られているがDMZはその外にある。したがって、ラズパイは破壊されやすくなるが、たとえラズパイが破壊されてもローカルまで破壊されることは少なくなる。&lt;/li&gt;
&lt;li&gt;ポートの開放状況は以下のコマンドで確認できる。&lt;pre&gt;$nmap&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　次に、&lt;a href=&quot;http://www.ugtop.com/spill.shtml&quot; target=&quot;_blank&quot;&gt;確認くん&lt;/a&gt;により自分の家のグローバルIPアドレスを確認する。家のネットワークからアクセスしましょう。&lt;/p&gt;
&lt;p&gt;　これで、適当なブラウザから、このグローバルIPアドレスにアクセスすれば、どこからでもラズパイのWebサーバーにアクセスできる。（ドメインはまだ取得していないので、IPアドレスを直打ちして接続している）&lt;/p&gt;
&lt;/article&gt;

&lt;h2&gt;独自ドメインを取得する&lt;/h2&gt;
&lt;article&gt;
&lt;p&gt;　ポートの開放により外部からサーバーにアクセスできるようになった。しかし、今のままではIPアドレスにアクセスなのでいまいち。そこで次は独自ドメインを取得して自分専用のURLをGETする。&lt;/p&gt;
&lt;p&gt;　ドメイン取得をできるサイトはいくつかあるが、ネット上で評価のよかった「&lt;a href=&quot;http://www.muumuudomain.com&quot; target=&quot;_blank&quot;&gt;ムームードメイン&lt;/a&gt;」で取得した。[.top]一番安くて、なんと77円＋税/年！とても安い。&lt;/p&gt;
&lt;/article&gt;

&lt;h2&gt;DNSサーバーとは&lt;/h2&gt;
&lt;article&gt;
&lt;p&gt;　独自ドメインを取得しましたが、取得したドメインはまだラズパイのIPアドレス（家のグローバルIPアドレス）に紐ついていません。それを紐つけるのがDNSサーバーです。DNS情報はあまりにも多いので、一つのDNSサーバーで管理しているわけではなく、ネット上に無数に散らばっています。したがってあるDNSサーバーに登録すれば、いろいろなDNSサーバーを経由して目的のIPアドレスを知ることができます。DNS情報のことをレコードと言い、以下に分類されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aレコード：ドメイン名からIPアドレスを返す（正引き）&lt;/li&gt;
&lt;li&gt;PTRレコード：IPアドレスからドメイン名を返す（逆引き）&lt;/li&gt;
&lt;li&gt;CNAMEレコード：ドメイン名から別のドメイン名を返す&lt;/li&gt;
&lt;li&gt;NSレコード：「再起問い合わせ」や「反復問い合わせ」の際に、「ここへ問い合わせよ」と教えてくれる&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;

&lt;h2&gt;MyDNS.jpの登録&lt;/h2&gt;
&lt;article&gt;
&lt;p&gt;　普通、グローバルIPアドレスは動的に割り当てられるので、それとホスト名（ドメイン名）を動的に登録・管理するのがDDNSです。無料DDNSのひとつに&lt;a href=&quot;http://www.mydns.jp&quot; target=&quot;_blank&quot;&gt;MyDNS.jp&lt;/a&gt;があるので、今回はそれを使います。まずは会員登録をします。そして「IP ADDR DIRECT」のところに家のグローバルIPアドレスを記載します。次に、「DOMAIN INFO」のところに自分の取得したホスト名（独自ドメイン）を記載します。欄が多いですが、それ以外は何も書かなくて大丈夫です。&lt;/p&gt;
&lt;/article&gt;

&lt;h2&gt;DNSの浸透時間&lt;/h2&gt;
&lt;article&gt;
&lt;p&gt;　ここまでの作業をすれば、取得した独自ドメインをブラウザのURLに書くだけで自分のサーバーにつなことができます。しかし、すぐにつなぐことはできません。先にも書いたようにDNSサーバーはネット上に無数に散らばっていますので、最初にアクセスしたDNSが自分のドメインとIPの関連付けを持っているとは限りません。DNSからDNSへと広がっていき、次第に世界中からアクセスできるようになります。&lt;/p&gt;
&lt;/article&gt;

&lt;h2&gt;動的IPの自動更新&lt;/h2&gt;
&lt;article&gt;
&lt;p&gt;　ムームードメインで、独自ドメインを取得した。MyDNS.jpにも登録した。次にやることは、動的IPアドレスの自動更新である。定期的にグローバルIPの変更をチェックして&lt;a href=&quot;http://www.mydns.jp&quot; target=&quot;_blank&quot;&gt;MyDNS.jp&lt;/a&gt;に通知をすればよい。それには以下のコマンドを実行する。&lt;/p&gt;
&lt;pre&gt;$ wget -O- &#39;http://mydnsXXXXXX:PASSWORD@www.mydns.jp/login.html&#39;&lt;/pre&gt;
&lt;p&gt;これをcronなどを使って定期的に実行すればよい。&lt;/p&gt;
&lt;/article&gt;


</description>
        <pubDate>Mon, 05 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-10-05-raspi-server/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-10-05-raspi-server/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>シンガポールでロボコンしてきました</title>
        <description>みなさんこんにちは！&lt;br /&gt;
椋けり(@Ryokeri14)です。&lt;br /&gt;
夏休みになりました。ロ技研のみなさんは進捗めまぐるしいことでしょう。&lt;br /&gt;
&lt;br /&gt;
今回の話題は僕が参加してきたIDCロボコンについてです。&lt;br /&gt;
&lt;br /&gt;
東工大の制御システム工学科2年には「創造設計第一」という授業があり、授業の中で個人戦のロボコンをします。&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/creative_design.jpg&quot; title=&quot;創造設計第一のロボコン&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/creative_design.jpg&quot; width=&quot;480&quot; height=&quot;360&quot; border=&quot;0&quot; alt=&quot;創造設計第一のロボコン&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
そこで優秀な成績を収めると、世界大会のIDCロボコンに参加することができます。&lt;br /&gt;
1年生のみなさん、4類からも5類からも制御システム工学科に来ることができます。是非来てね！&lt;br /&gt;
&lt;br /&gt;
ほぼ毎年、ロボット技術研究会の中にIDCロボコン参加者が出ます。今年は僕が行って参りました！&lt;br /&gt;
&lt;br /&gt;
今年のIDCロボコンはシンガポールで行われました。ちなみに去年はモロッコ、一昨年はブラジルでした。来年はタイで行われます。&lt;br /&gt;
&lt;br /&gt;
日本からは東工大4名、東京電機大学6名の計10名が参加しました。 東京電機大学の選考方式は、東工大とは違い、英語のプレゼンなどが含まれているそうです。（もし僕が電機大生だったら参加できなかっただろう...）&lt;br /&gt;
&lt;br /&gt;
参加国は、アメリカ、モロッコ、日本、中国、シンガポール、エジプト、タイ、韓国です。&lt;br /&gt;
人数は合計54人で、10チームに分かれて、ロボットを作り、ロボコンをします。&lt;br /&gt;
一つのチームには、基本的に同じ国の人はいないので、コミュニケーションをとるのがとても大変です。&lt;br /&gt;
&lt;br /&gt;
大会の開催期間は12日間です。最終日にロボコンがあります。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
〈ルールについて〉（東京電機大学のHPより引用）&lt;br /&gt;
&lt;a  target=&quot;_blank&quot; title=&quot;title&quot; href=&quot;/images/2015-08-12-IDC-robocon/theme.jpg&quot;&gt;&lt;img  class=&quot;pict&quot; hspace=&quot;5&quot; alt=&quot;theme&quot; border=&quot;0&quot; height=&quot;227&quot; width=&quot;480&quot; src=&quot;/images/2015-08-12-IDC-robocon/theme.jpg&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/field.jpg&quot; title=&quot;field&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/field.jpg&quot; width=&quot;480&quot; height=&quot;348&quot; border=&quot;0&quot; alt=&quot;field&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
今年のテーマは「Space Cleaner」です。デブリに見立てたオブジェクトを回収して、運搬するゲームです。&lt;br /&gt;
&lt;div&gt;ゲームフィールドは、軌道ゾーン、スペースゾーン、地球ゾーンの3つからなります。外側の軌道ゾーンにあるオブジェクトを集め、地球ゾーンに運ぶことで得点できるルールです。軌道ゾーンでオブジェクトを回収するオービットロボットとスペースゾーンから地球ゾーンに運搬するスペースロボットの2台を製作していきます。&lt;/div&gt;&lt;br /&gt;
&lt;div&gt;軌道ゾーンには回収の難易度に応じて得点が異なる2種類のオブジェクト（白球と黄色球）があり、それ以外に総得点が2倍になるボーナスオブジェクト（オレンジ球）があります。&lt;br /&gt;
&lt;br /&gt;
フィールド上の青いゾーンにロボットが触れてしまうと、かなり大きな減点ペナルティがあります。&lt;br /&gt;
&lt;br /&gt;
競技時間は予選ラウンドが150秒、決勝トーナメントが180秒です。&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/real_field.jpg&quot; title=&quot;フィールド&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/real_field.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; border=&quot;0&quot; alt=&quot;フィールド&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;br /&gt;
東京電機大学のホームページに特設ページがあり、デイリーレポートがあるのでこれを見るとわかりやすいです。&lt;br /&gt;
URL : &lt;a  href=&quot;http://www.fr.dendai.ac.jp/education/idc2015/idc2015dailyreport.html&quot; target=&quot;_blank&quot;&gt;http://www.fr.dendai.ac.jp/education/idc2015/idc2015dailyreport.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
僕のチームは以下の通りです。&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/member.jpg&quot; title=&quot;チームメンバー&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/member.jpg&quot; width=&quot;480&quot; height=&quot;480&quot; border=&quot;0&quot; alt=&quot;チームメンバー&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;br /&gt;
&lt;/a&gt;左から&lt;br /&gt;
機械担当、スペースロボット操縦のタイ人&lt;br /&gt;
機械担当の中国人&lt;br /&gt;
制御担当、チームリーダーのモロッコ人&lt;br /&gt;
機械担当のエジプト人&lt;br /&gt;
制御担当、オービットロボット操縦の僕、日本人&lt;br /&gt;
です。&lt;br /&gt;
&lt;br /&gt;
各チームには、2種類のArduino、サーボモーター、DCモーター、アクリル板、アルミ板などロボットを作るには十分な材料が与えられます。しかも、各チームに1台ずつ3Dプリンタも与えられました。&lt;br /&gt;
初日には、Arduino講習会や、3DCAD講習会もあり、環境は十分といえます。&lt;br /&gt;
ただし、言語はすべて英語です。英語です！！&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/ardin.jpg&quot; title=&quot;ロボット作り&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/ardin.jpg&quot; width=&quot;480&quot; height=&quot;360&quot; border=&quot;0&quot; alt=&quot;ロボット作り&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;br /&gt;
僕はロボット作りは好きです。&lt;br /&gt;
しかし、英語は全然できません。&lt;br /&gt;
チームメイトはみんな英語が話せたので、&lt;br /&gt;
僕だけ話せない状況でした。&lt;br /&gt;
僕は絵を描いたり、辞書を駆使したりして必死にコミュニケーションを試みました。&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/note1.jpg&quot; title=&quot;ホワイトボード&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/note1.jpg&quot; width=&quot;480&quot; height=&quot;360&quot; border=&quot;0&quot; alt=&quot;ホワイトボード&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;a  href=&quot;note2.jpg&quot; title=&quot;ホワイトボード&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/note2.jpg&quot; width=&quot;480&quot; height=&quot;360&quot; border=&quot;0&quot; alt=&quot;ホワイトボード&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;/a&gt;&lt;br /&gt;
↑こんな感じです。&lt;br /&gt;
&lt;br /&gt;
午前9時から午後6時までワークショップで、そのあとはたまにチームミーティングがあったりしたので、かなり忙しい毎日でした。しかも最後2日は、午後6時までだったのが午後9時30分までに延長され、ずっと作業をしていました。まぁ、ロボコン直前はどこもこんな感じでしょうか。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
6日目の土曜日の午後と、7日目の日曜日はお休みでした。&lt;br /&gt;
そこで観光を楽しみます。シンガポールの参加者が僕たちを案内してくれました。&lt;br /&gt;
世界3大がっかり観光名所、マーライオン！&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/marlion1.jpg&quot; title=&quot;マーライオンその１&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/marlion1.jpg&quot; width=&quot;480&quot; height=&quot;315&quot; border=&quot;0&quot; alt=&quot;マーライオンその1&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;br /&gt;
みなさん、知ってますか？&lt;br /&gt;
シンガポールにはマーライオンが5つあります！！←ここ、がっかりポイント☆&lt;br /&gt;
&lt;br /&gt;
そのうち、２つを見てきました。&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/marlion2.jpg&quot; title=&quot;マーライオンその２&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/marlion2.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; border=&quot;0&quot; alt=&quot;マーライオンその２&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;br /&gt;
それなりに楽しめました。&lt;br /&gt;
&lt;br /&gt;
Day offが終わると、ロボコンへラストスパートです。&lt;br /&gt;
僕のチームは下の写真のようなロボットを作りました。&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/2robots.jpg&quot; title=&quot;僕の班が創ったロボット&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/2robots.jpg&quot; width=&quot;480&quot; height=&quot;360&quot; border=&quot;0&quot; alt=&quot;僕の班が作ったロボット&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/orbit_robot.jpg&quot; title=&quot;僕の操縦したロボット&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/orbit_robot.jpg&quot; width=&quot;480&quot; height=&quot;360&quot; border=&quot;0&quot; alt=&quot;僕の操縦したロボット&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
戦略は単純で、スペースデブリであるボールをオービットロボットがアームで一つずつ拾い、それをスペースロボットが受け取って、地球に入れるだけです。１０チームの中で僕のチームが一番シンプルだったと思います。&lt;br /&gt;
&lt;br /&gt;
本戦の前にはシーディングコンテストという予選リーグがありました。5チームずつ2つのリーグに分かれてリーグ戦をします。各リーグの最下位、つまり１０チームのうち2チームはこの時点で落ちてしまいます。（けっこう厳しい）&lt;br /&gt;
&lt;br /&gt;
シーディングコンテストの段階では、多くのチームが安定性を欠いていて、僕らのシンプルな構造のロボットは全勝で単独首位に立つことができました！！&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/tournament.jpg&quot; title=&quot;決勝トーナメント&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/tournament.jpg&quot; width=&quot;480&quot; height=&quot;360&quot; border=&quot;0&quot; alt=&quot;決勝トーナメント&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;/a&gt;&lt;br /&gt;
僕のチーム名は「MEC-JT」です。Morocco Egypt China Japan Thailandの頭文字をとっています。（ハイフンはなんとなくらしい。僕がいない間にいつのまにかチーム名が決まっていた。）&lt;br /&gt;
&lt;br /&gt;
本戦は、8チームのトーナメントです。さすがに本戦ではどのチームも安定性が向上しており、簡単には勝てませんでしたが、なんとか決勝まで勝ち残りました！&lt;br /&gt;
創造設計第一は50人のトーナメントだったのでそれに比べればかなり短いトーナメントでした。&lt;br /&gt;
&lt;br /&gt;
決勝では、相手の大量得点に敵わず、負けてしまいました。残念です。&lt;br /&gt;
ということで、準優勝に終わりました。&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/2nd_place.jpg&quot; title=&quot;表彰式&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/2nd_place.jpg&quot; width=&quot;480&quot; height=&quot;480&quot; border=&quot;0&quot; alt=&quot;表彰式&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a  href=&quot;/images/2015-08-12-IDC-robocon/end.jpg&quot; title=&quot;集合写真&quot; target=&quot;_blank&quot;&gt;&lt;img  src=&quot;/images/2015-08-12-IDC-robocon/end.jpg&quot; width=&quot;480&quot; height=&quot;480&quot; border=&quot;0&quot; alt=&quot;集合写真&quot; hspace=&quot;5&quot; class=&quot;pict&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
まとめ&lt;br /&gt;
&lt;br /&gt;
このロボコンで感じたことは、英語力のなさです。&lt;br /&gt;
コミュニケーションは、まぁ何とかなります。相手が聞こうとしてくれていれば伝わります。しかし、コミュニケーション以外にも英語はあります。ルール説明や工作機械の説明など、 理解しなければならないこと、理解していて当然のことも、英語がわからないせいで全く理解できませんでした。それにより有意義な活動ができないのはもったいない！ということで、英語を勉強しましょう...&lt;br /&gt;
&lt;br /&gt;
留学でも旅行でもなく、ロボコンをしにシンガポールに行ってきました。異国混成チームでロボットを作る。このような機会はほとんどないと思います。作業を進めるのはそう簡単ではありませんでしたが、チームメイトみんなで話し合い、協力して、苦労して、ロボットを作ることができました。ロボコン本番で点を獲得したときの感動は今でも忘れられません。すばらしいイベントに参加できて、感謝の気持ちでいっぱいです。&lt;/div&gt;

	&lt;/body&gt;
&lt;/html&gt;
	
</description>
        <pubDate>Wed, 12 Aug 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-08-12-idc-robocon/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-08-12-idc-robocon/</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
