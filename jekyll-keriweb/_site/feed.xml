<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KERI&#39;s Lab</title>
    <description>KERI&#39;s Lab へようこそ。ここでは、趣味の電子工作やサーバーづくりなどを紹介しています。</description>
    <link>http://kerikeri.top/</link>
    <atom:link href="http://kerikeri.top/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 07 Jan 2016 10:27:36 +0900</pubDate>
    <lastBuildDate>Thu, 07 Jan 2016 10:27:36 +0900</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>ESP8266で赤外線学習リモコン</title>
        <description>&lt;h2 id=&quot;esp8266&quot;&gt;ESP8266とは&lt;/h2&gt;

&lt;h3 id=&quot;wifi&quot;&gt;日本の技適を取得済みWiFiモジュール！！&lt;/h3&gt;

&lt;p&gt;ESP8266とはWiFi制御用マイコンです。もともと中国で流行っていました。そのマイコンを内蔵したESP-WROOM-02というWiFiモジュールが日本の技適を取得したので、日本でも人気になりました。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;とにかく安い！&lt;/h3&gt;

&lt;p&gt;その価格はなんと、たったの&lt;strong&gt;550円&lt;/strong&gt;です！！&lt;br /&gt;
&lt;a href=&quot;http://akizukidenshi.com/catalog/g/gM-09607/&quot;&gt;ESP-WROOM-02&lt;/a&gt;←秋月電子などで売っています。&lt;br /&gt;
&lt;img src=&quot;/images/2015-12-30-ir-station/esp8266.jpg&quot; alt=&quot;ESP8266&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;開発の簡単さも流行りの理由&lt;/h3&gt;

&lt;p&gt;このマイコンのすごいところは、&lt;strong&gt;Arduino IDE&lt;/strong&gt;で開発ができることです。とても簡単に開発ができます。関数もArduinoで使われているものと同じ名前です。Arduinoと同じように書き込みボタンを押せば書き込みができます。&lt;/p&gt;

&lt;p&gt;さらに、Arduinoをよく使う人は知っている通り、Arduino IDEに付属したサンプルプログラムがとても充実しています。それを書き込むだけでそれなりのことができます。&lt;/p&gt;

&lt;p&gt;それを少しずついじっているといつの間にかオリジナルのプログラムが完成しているという感じです。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;スペックが十分すぎる…&lt;/h3&gt;

&lt;p&gt;しかも、このESP8266マイコンはスペックがかなり高く、WiFiモジュールとしてだけでなく格安マイコンとしても十分使うことができるほどです。メモリが十分にあるので、自由なプログラムを書くことができます。&lt;/p&gt;

&lt;p&gt;マイコンは、&lt;strong&gt;32bit&lt;/strong&gt;マイコンです。&lt;br /&gt;
動作周波数は、&lt;strong&gt;160MHz&lt;/strong&gt;まで対応しています。&lt;br /&gt;
外付けのSPIFlashがついていて、プログラムメモリが&lt;strong&gt;１MB&lt;/strong&gt;ほどあります。&lt;br /&gt;
RAMも大量にあって、&lt;strong&gt;81kB&lt;/strong&gt;もあります。&lt;/p&gt;

&lt;p&gt;参考までにPICやAVRマイコンなどはROMが32kBくらい、RAMは4kBほどです。&lt;/p&gt;

&lt;p&gt;今回はこのWiFiモジュールで遊びます。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;赤外線学習リモコン&lt;/h2&gt;

&lt;p&gt;赤外線学習リモコンとは自作の赤外線リモコンです。一番最初に本物のリモコンの信号を記憶して、2回目からはその記憶した赤外線を発します。こうしてリモコンを複製することができるのです。&lt;/p&gt;

&lt;p&gt;今回は&lt;strong&gt;WiFi経由&lt;/strong&gt;でスマホからコントロールできる赤外線学習リモコンを作りました。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;作ったもの&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;本体&lt;/h3&gt;

&lt;p&gt;今回は試作なのでブレッドボードで作りました。&lt;br /&gt;
右に４つの赤外線LEDがついています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-12-30-ir-station/body.jpg&quot; alt=&quot;ESP8266-Remocon&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wifi-1&quot;&gt;WiFiの設定&lt;/h3&gt;

&lt;p&gt;電源を入れるとまずWiFiのアクセスポイントになって、「ESP8266-Remocon」というWiFi電波を発します。スマホなどでそれにつないで、「http://esp8266.local」に接続すると下の画面が表示されます。&lt;/p&gt;

&lt;p&gt;ここで、家のWiFiのSSIDを選んでパスワードを入力すると、家のWiFiにアクセスを試みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-12-30-ir-station/page_wifi.png&quot; alt=&quot;ESP8266-Remocon&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;スマホでの操作画面&lt;/h3&gt;

&lt;p&gt;うまく接続できると、下の画面が出てきて、リモコンが使えるようになります。&lt;/p&gt;

&lt;p&gt;リモコンを登録するときは下の好きなチャンネルの欄にボタンの名前を書いて「Recode」ボタンを押すとリモコンのサンプリングを開始します。リモコンの登録がうまくいくと、上のボタンにさっき入力した名前が表示されてボタンが使えるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-12-30-ir-station/page_button.png&quot; alt=&quot;ESP8266-Remocon&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;IoT(Internet of Things)&lt;/strong&gt;という言葉があります。&lt;br /&gt;
&lt;strong&gt;人と人が&lt;/strong&gt;インターネットにつなぐだけでなく&lt;strong&gt;ものとものが&lt;/strong&gt;互いにインターネットでつながり、相互に作用し合うということです。&lt;br /&gt;
ESP8266 WiFiモジュールはIoTに最適です。より多くのものがインターネットによりつながるといいですね！&lt;/p&gt;

&lt;p&gt;このWiFiモジュールを使ってとりあえず実用的なものができました。&lt;br /&gt;
ESP8266はとにかくすごいマイコンです！みなさんもぜひ使ってみてください！&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Dec 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-12-30-ir-station/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-12-30-ir-station/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Cygwinの使い方</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;Cygwinとは仮想UNIX環境をつくるソフトである。WindowsはUNIXベースの環境ではないので、コマンドライン操作がとてもやりづらい。Cygwinを使えば、C言語をはじめとしてrubyやpythonなど様々な開発をWindows上でできる。しかも、GUIでなくCUIなのでとても軽い。&lt;/p&gt;

&lt;h2 id=&quot;cygwin&quot;&gt;Cygwinのインストール手順&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin.com&lt;/a&gt;からCygwinのインストーラをダウンロードする。32bitマシン用と64bitマシン用があるので適当なほうを選ぶ。&lt;/li&gt;
  &lt;li&gt;DLしたインストーラを起動する。&lt;/li&gt;
  &lt;li&gt;デフォルトの設定で次へを押す。&lt;/li&gt;
  &lt;li&gt;URLを選択するところでは&lt;code class=&quot;highlighter-rouge&quot;&gt;~~~.jp&lt;/code&gt;など、日本のURLを選ぶとダウンロードが早く終わる。&lt;/li&gt;
  &lt;li&gt;インストールするファイルを選ぶところでは、一番上で&lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;と検索して、&lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt;の中の&lt;code class=&quot;highlighter-rouge&quot;&gt;wget: Utility to ~&lt;/code&gt;の回転矢印アイコンをクリックして次へを押し、インストールする。他のソフトは後で&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-cyg&lt;/code&gt;でインストールするので、今はこれだけでいい。&lt;/li&gt;
  &lt;li&gt;インストールしたらcygwinを開く。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;インストール画像&lt;br /&gt;
&lt;img src=&quot;/images/2015-12-04-cygwin/01.png&quot; alt=&quot;インストール画面01&quot; title=&quot;インストール画面01&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/02.png&quot; alt=&quot;インストール画面02&quot; title=&quot;インストール画面02&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/03.png&quot; alt=&quot;インストール画面03&quot; title=&quot;インストール画面03&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/04.png&quot; alt=&quot;インストール画面04&quot; title=&quot;インストール画面04&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/05.png&quot; alt=&quot;インストール画面05&quot; title=&quot;インストール画面05&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/06.png&quot; alt=&quot;インストール画面06&quot; title=&quot;インストール画面06&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/07.png&quot; alt=&quot;インストール画面07&quot; title=&quot;インストール画面07&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/08.png&quot; alt=&quot;インストール画面08&quot; title=&quot;インストール画面08&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/09.png&quot; alt=&quot;インストール画面09&quot; title=&quot;インストール画面09&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/10.png&quot; alt=&quot;インストール画面10&quot; title=&quot;インストール画面10&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/11.png&quot; alt=&quot;インストール画面11&quot; title=&quot;インストール画面11&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;apt-cyg&quot;&gt;apt-cygを使う&lt;/h2&gt;

&lt;h3 id=&quot;apt-cyg-1&quot;&gt;apt-cygとは&lt;/h3&gt;

&lt;p&gt;apt-cygとは普通のシェルスクリプトで、新しくソフトウェアをインストールするときに使う。Macintoshのyumやlinuxのapt-getとほぼ同じ使い方ができる。&lt;/p&gt;

&lt;h3 id=&quot;apt-cyg-2&quot;&gt;apt-cygを使う理由&lt;/h3&gt;

&lt;p&gt;cygwinでは、新たにソフトをインストールする際には、cygwinインストール時に使ったsetup.exeを使うのが一般的である。&lt;/p&gt;

&lt;p&gt;しかし、setup.exeで欲しいソフトをインストールするとき、そのソフトが他のソフトに依存していることがある。それなのに欲しいソフトだけインストールしても、エラーになってしまう。これを解決するには、Googleでそのソフトの依存関係を調べて、必要なソフトをすべてsetup.exeで選んでインストールしなければならない。はっきり言ってめんどくさい。&lt;/p&gt;

&lt;p&gt;めんどくさいので、setup.exeに表示された&lt;strong&gt;すべてのソフト&lt;/strong&gt;をインストールしてみたことがある。これなら依存関係があっても全部あるんだから大丈夫！と思った。&lt;/p&gt;

&lt;p&gt;が、なんど１晩かかってもDLが終わらず、インストールが終わった後にサイズを確認したら&lt;strong&gt;60GB&lt;/strong&gt;も容量を取られてしまった。もう絶対にやらない。&lt;/p&gt;

&lt;h3 id=&quot;apt-cyg-3&quot;&gt;apt-cygをインストール&lt;/h3&gt;

&lt;p&gt;Cygwinを起動したら、以下のコマンドを実行する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg
$ chmod 755 apt-cyg
$ mv apt-cyg /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでインストールは完了。&lt;/p&gt;

&lt;p&gt;あとは、欲しいソフトをインストールする&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-cyg install vim
$ apt-cyg install make
$ apt-cyg install gcc-core
$ apt-cyg install gcc-g++
$ apt-cyg install zsh
$ apt-cyg install tmux
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;などなど&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;おまけ（各種設定）&lt;/h2&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windowsのコピペを使う&lt;/h3&gt;

&lt;p&gt;Cygwinのデフォルトの設定ではWindowsのCtrl+C,Ctrl+Vが使えない。これでは不便なので使えるようにする。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cygwinのウィンドウの左上のCygwinアイコンを右クリックする。&lt;/li&gt;
  &lt;li&gt;optionを開く&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Keys&lt;/code&gt;の中の一番下の&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+letter shortcuts&lt;/code&gt;にチェックを入れる。&lt;/li&gt;
  &lt;li&gt;ついでに&lt;code class=&quot;highlighter-rouge&quot;&gt;Looks&lt;/code&gt;のなかの&lt;code class=&quot;highlighter-rouge&quot;&gt;Cursor&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt;にするとよい。&lt;/li&gt;
  &lt;li&gt;さらに&lt;code class=&quot;highlighter-rouge&quot;&gt;Looks&lt;/code&gt;のなかの&lt;code class=&quot;highlighter-rouge&quot;&gt;Transparency&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;Medium&lt;/code&gt;か&lt;code class=&quot;highlighter-rouge&quot;&gt;High&lt;/code&gt;にするとブラウザなどを下に置いたときに透かして見れるので便利。&lt;/li&gt;
  &lt;li&gt;saveで終了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Shiftキー＋いつものコピペキーでコピペができる。&lt;/p&gt;

&lt;p&gt;設定画像&lt;br /&gt;
&lt;img src=&quot;/images/2015-12-04-cygwin/12.png&quot; alt=&quot;インストール画面12&quot; title=&quot;インストール画面12&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/13.png&quot; alt=&quot;インストール画面13&quot; title=&quot;インストール画面13&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/14.png&quot; alt=&quot;インストール画面14&quot; title=&quot;インストール画面14&quot; /&gt; 
&lt;img src=&quot;/images/2015-12-04-cygwin/15.png&quot; alt=&quot;インストール画面15&quot; title=&quot;インストール画面15&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;zsh&quot;&gt;デフォルトのシェルをzshにする&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-cyg install zsh
$ ls /etc/passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここで&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;が存在しないときは以下のコマンドを打ち作る。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkpasswd &amp;gt; /etc/passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;作ったら開く&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vim /etc/passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一番下のほうの自分のユーザー名のところで、&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/zsh&lt;/code&gt;に変更する。&lt;br /&gt;
あとはCygwinを再起動すればデフォルトがzshellになっている。&lt;/p&gt;

&lt;p&gt;ついでに僕の&lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;を書いておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kerikun11/dotfiles/blob/master/.zshrc&quot;&gt;.zshrc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;シェルを起動するとsshのkeyを求められるので入力すると、2回目からは自動で入力してくれるようになってる。&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Dec 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-12-04-cygwin/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-12-04-cygwin/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>Raspberry Pi で NAS 作り</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;NASがほしい！&lt;br /&gt;
じゃあ作ろう。&lt;/p&gt;

&lt;p&gt;スペック&lt;br /&gt;
サーバ：Raspberrypi 2 Type B&lt;br /&gt;
HDD：Western Digital 2TB 3.5 inch&lt;br /&gt;
転送速度：10MB/s（ラズパイのイーサーネットが100Baseなので仕方ない…）&lt;/p&gt;

&lt;h2 id=&quot;samba&quot;&gt;Sambaをインストール&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install samba
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;hdd&quot;&gt;HDDを設定する&lt;/h2&gt;

&lt;h3 id=&quot;hdd-1&quot;&gt;HDDをラズパイに繋ぐ。&lt;/h3&gt;
&lt;p&gt;ポータブルHDDだと電力が足りなくなるかもしれないので、3.5inchのHDDを使用した。&lt;/p&gt;

&lt;h3 id=&quot;hdd-2&quot;&gt;HDDをフォーマット＆マウント&lt;/h3&gt;

&lt;p&gt;HDDをラズパイに繋ぐ&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lsblk
NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda 		  8:0    0  1.8T  0 disk 
└─sda1		  8:1    0  1.8T  0 part 
mmcblk0		179:0    0 58.2G  0 disk 
├─mmcblk0p1	179:1    0    1G  0 part 
├─mmcblk0p2	179:2    0    1K  0 part 
├─mmcblk0p3	179:3    0   32M  0 part 
├─mmcblk0p5	179:5    0   60M  0 part /boot
└─mmcblk0p6	179:6    0 57.1G  0 part /
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;HDDが&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda&lt;/code&gt;につながれていることがわかる。&lt;br /&gt;
今までのパーティションを消して、新たに作る。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo fdisk /dev/sda
Command (m for help): d
Command (m for help): n
Enter を 連打
Command (m for help): w
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;HDDをフォーマット&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkfs.ext4 /dev/sda1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;フォーマットが完了したらマウント&lt;br /&gt;
毎回同じ所にマウントされるように設定する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkdir /media/hdd-2tb
$ sudo blkid /dev/sda1
/dev/sda1: UUID=&quot;21600e41-2f5a-4954-8575-5e89f0e11560&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;983fd59f-2b2b-41a4-b409-acac2fa62f5c&quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここで表示されるUUIDをコピーしておく。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここの最下部に以下を追記(UUIDはさっきコピーしたもの)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UUID=*************	/media/hdd-2tb	ext4	defaults	0	0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ラズパイを再起動&lt;br /&gt;
これでしっかりマウントされているはず。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lsblk
NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda 		  8:0    0  1.8T  0 disk 
└─sda1		  8:1    0  1.8T  0 part /hdd-2tb
mmcblk0		179:0    0 58.2G  0 disk 
├─mmcblk0p1	179:1    0    1G  0 part 
├─mmcblk0p2	179:2    0    1K  0 part 
├─mmcblk0p3	179:3    0   32M  0 part 
├─mmcblk0p5	179:5    0   60M  0 part /boot
└─mmcblk0p6	179:6    0 57.1G  0 part /
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;共有フォルダの作成と所有権の変更&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /media/hdd-2tb
$ sudo mkdir share
$ sudo chown *myuser* share
$ sudo chgrp *myuser* share
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;samba-1&quot;&gt;Sambaの設定&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/samba/smb.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここにの最下部に以下を追記&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[share]
   path = /media/hdd-2tb
   read only = no
   browsable = yes
   guest ok = yes
   force user = kerikun11
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ファイアウォールを設定している場合はSamba用にポートを開放&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ufw allow 137/udp
$ sudo ufw allow 138/udp
$ sudo ufw allow 139/tcp
$ sudo ufw allow 445/tcp

$ sudo service ufw restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sambaを起動&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service samba-ad-bc start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでつながるはず。&lt;/p&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windowsからアクセス&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;エクスプローラーの左側のナビゲーションウィンドウのネットワークを開く。&lt;/li&gt;
  &lt;li&gt;RASPBERRYPIがあるのでそれを開く。&lt;/li&gt;
  &lt;li&gt;shareというフォルダを開けたら完成！&lt;/li&gt;
  &lt;li&gt;shareというフォルダを右クリックで「ネットワークドライブの割り当て」とすると、マイコンピュータにあたかもHDDが繋がれているかのように表示されて便利に使える。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 23 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-23-samba/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-23-samba/</guid>
        
        <category>電子工作</category>
        
        <category>ラズパイ</category>
        
        <category>サーバー</category>
        
        <category>Samba</category>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>ファイアウォールの設定</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ufw

$ sudo ufw status
Status: inactive

$ sudo ufw enable
Command may disrupt existing ssh connections. Proceed with operation (y|n)? 
y

$ sudo ufw disenable
$ sudo ufw reset
Resetting all rules to installed defaults. This may disrupt existing ssh connections. Proceed with operation (y|n)?
y

$ sudo ufw disenable
$ sudo ufw default deny
$ sudo ufw allow 80
$ sudo ufw allow 22
$ sudo ufw enable

$ sudo ufw status
Status: active
 
 To                         Action      From
 --                         ------      ----
 22		                    ALLOW       Anywhere
 80                         ALLOW       Anywhere
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 17 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-17-firewall/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-17-firewall/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>delayやwhileを使わないI2C液晶表示プログラム</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;秋月やaitendoで売っているI2C液晶を使っている人は多い。しかし、ほとんどのサンプルプログラムは、I2Cの通信をwhile文などにより送信完了待ちしていて、その間に（割り込みを除く）他のプログラムが実行できない。そこで今回は、I2C液晶に表示させる内容を送信バッファに入れておけば自動で送信してくれるプログラムを書く。&lt;/p&gt;

&lt;p&gt;秋月の液晶もaitendoの液晶も共通の液晶制御ICを使っている。その型番が「ST7032」なので、液晶のこともその名前で呼ぶ。&lt;br /&gt;
&lt;a href=&quot;http://akizukidenshi.com/catalog/g/gK-06795/&quot;&gt;秋月のI2C液晶(AQM0802)&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;/images/2015-11-15-I2C-LCD/AQM0802.jpg&quot; alt=&quot;AQM0802&quot; title=&quot;I2C_LCD&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ロジック・アナライザで一目瞭然！&lt;/h2&gt;

&lt;p&gt;実際にプログラムが動作している様子をロジック・アナライザで確かめた。&lt;br /&gt;
上の２つのデータがI2C、一番下のデータがメインループのループ回数を表している。&lt;/p&gt;

&lt;p&gt;ダメな方（I2C通信をしている間は、メインループが止まってしまっている。）
&lt;a href=&quot;/images/2015-11-15-I2C-LCD/i2c_old.png&quot;&gt;&lt;img src=&quot;/images/2015-11-15-I2C-LCD/i2c_old.png&quot; alt=&quot;old program&quot; title=&quot;ダメな方&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;良い方（I2C通信をしながらメインループもしっかり動いている。）
&lt;a href=&quot;/images/2015-11-15-I2C-LCD/i2c_new.png&quot;&gt;&lt;img src=&quot;/images/2015-11-15-I2C-LCD/i2c_new.png&quot; alt=&quot;new program&quot; title=&quot;良いな方&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※双方のメインループに停止時間があるが、これは、送信リングバッファに送る処理に時間がかかっているだけなので今回は無視して欲しい。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;プログラム&lt;/h2&gt;

&lt;p&gt;僕は普段からPICを使っているので、PIC18F27J53用のプログラムを書いた。&lt;/p&gt;

&lt;p&gt;ダメな方&lt;br /&gt;
&lt;a href=&quot;/images/2015-11-15-I2C-LCD/PIC18F27J53-I2C_LCD_old01.zip&quot;&gt;PIC18F27J53-I2C-LCD-old.zip&lt;/a&gt;&lt;br /&gt;
良い方&lt;br /&gt;
&lt;a href=&quot;/images/2015-11-15-I2C-LCD/PIC18F27J53-I2C_LCD_new01.zip&quot;&gt;PIC18F27J53-I2C-LCD-new.zip&lt;/a&gt;&lt;br /&gt;
（MPLAB.Xプロジェクトファイルなので、そのままMPLABXで読み込めます。)&lt;/p&gt;

&lt;p&gt;以下はプログラムの要点だけ抜粋&lt;br /&gt;
mainループに&lt;code class=&quot;highlighter-rouge&quot;&gt;ST7032_task();&lt;/code&gt;があり、中のswitch文で状態遷移をしていく。何もアクションがなければすぐに関数から抜ける。割り込み関数内には&lt;code class=&quot;highlighter-rouge&quot;&gt;ST7032_ISR();&lt;/code&gt;があり、送信完了割り込みなどで任意のフラグを上げる。&lt;code class=&quot;highlighter-rouge&quot;&gt;ST7032_task();&lt;/code&gt;ではフラグがあがるのを監視しているが、while文での監視ではなく、何もなければすぐ関数からbreakして、なにかフラグが上がっていた時だけ、その瞬間にできる仕事をだけをしてまた関数から抜ける。&lt;/p&gt;

&lt;p&gt;使い方&lt;br /&gt;
main.c&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;My_ST7032.h&quot;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Hardware_initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// いろいろ初期設定する
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ST7032_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ST7032_cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PIC18F27J53&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// main loop
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ST7032_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kerikun11/MPLABXProjects/blob/master/My_library/My_ST7032.h&quot;&gt;My_ST7032.h&lt;/a&gt;←リンク&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_STATE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_IDOLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ST7032_WAIT&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_state_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kerikun11/MPLABXProjects/blob/master/My_library/My_ST7032.c&quot;&gt;My_ST7032.c&lt;/a&gt;←リンク&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;My_ST7032.h&quot;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;st7032_state_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ST7032_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST7032_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b11000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// control byte
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// data byte 
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// stop bit
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT_26US&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// wait
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ST7032_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSP1IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSP1IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSP1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;st7032_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIE2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCL1IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCL1IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCL1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ST7032_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSP1CON2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSP1STAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// SSP is busy
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_state_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_IDOLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_IDOLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;st7032_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;SSP1CON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st7032_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// no SSPIF
&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;st7032_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SSP1BUF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcd_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT_26US&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT_1MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT_40MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;SSP1CON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_WAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_WAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st7032_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST7032_IDOLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 15 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-15-i2c-lcd/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-15-i2c-lcd/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>CPUの創り方</title>
        <description>&lt;h2 id=&quot;cpu2003-&quot;&gt;書籍「CPUの創り方」（2003年）渡波郁 著&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/book.jpg&quot; alt=&quot;CPUの創り方&quot; title=&quot;CPUの創り方&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　この本は電子工作の入門書です。しかし入門書と言っても内容は壮大で、CPUを設計して自作しようというものです。電子工作初心者だけでなく、ある程度電子工作をしてきた人にも読みごたえのある一冊になっています。&lt;/p&gt;

&lt;h2 id=&quot;td4&quot;&gt;作ったもの : TD4&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/board_top.jpg&quot; alt=&quot;TD4&quot; title=&quot;TD4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　この本の中で設計しているCPUを実際に作りました。TD4とは&lt;strong&gt;T&lt;/strong&gt;ada &lt;strong&gt;D&lt;/strong&gt;ousa-suru-dakei-no &lt;strong&gt;4&lt;/strong&gt;-bit CPU という意味です。&lt;/p&gt;

&lt;h2 id=&quot;iccpu&quot;&gt;ICとCPUの違い&lt;/h2&gt;
&lt;p&gt;　ICは、決まった動作をしかできません。「こんな機能が欲しい」という時は、その機能を持ったICを買いに行かなければなりません。しかし、CPUは「プログラム」を実行することができます。これにより、プログラム次第で様々な動作をさせることができます。今回は、決まった動作しかできない「IC」を使って柔軟な動作の「CPU」を作りました。（と言っても、回路を設計したのは上の本の作者さんです。）&lt;/p&gt;

&lt;h2 id=&quot;cpu&quot;&gt;CPUの構成&lt;/h2&gt;

&lt;h3 id=&quot;cpubit&quot;&gt;CPUのbit数&lt;/h3&gt;
&lt;p&gt;　先にも書いたとおり、これは4bitのCPUです。4bit CPUというのは各レジスタが4bitでできているということです。&lt;/p&gt;

&lt;h3 id=&quot;rom&quot;&gt;プログラムメモリ（ROM）&lt;/h3&gt;
&lt;p&gt;　写真左側に、16個のDIPスイッチが並んでいます。これがプログラムメモリ(ROM)です。8bitのDIPスイッチが16個あるので、16ByteのROMになります。普通、ROMといえば不揮発性のフラッシュメモリですが、TD4では物理的スイッチにより実現しています。&lt;/p&gt;

&lt;h3 id=&quot;ram&quot;&gt;レジスタ（RAM）&lt;/h3&gt;
&lt;p&gt;　TD4には4bitのレジスタが４つあり、以下の役割があります。写真中央の縦に並んだ４つのICです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プログラム・カウンタ&lt;/li&gt;
  &lt;li&gt;汎用レジスタA&lt;/li&gt;
  &lt;li&gt;汎用レジスタB&lt;/li&gt;
  &lt;li&gt;出力レジスタ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;alu&quot;&gt;算術論理演算装置（ALU）&lt;/h3&gt;
&lt;p&gt;　TD4は、4bit + 4bit の加算器を持っています。以上。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;入出力&lt;/h2&gt;
&lt;p&gt;　入力は4bitで、写真中央最下部の４つのスライドスイッチです。これらのHigh/Lowをレジスタに取り込むことができます。&lt;br /&gt;
　出力も4bitで、それぞれに黄色のLEDがつながっています。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;動作&lt;/h2&gt;
&lt;p&gt;　TD4にプログラミングするには、まずはアセンブリ言語を書きます。それをハンドアセンブル（アセンブリ言語を、２進法に変えること）をして、TD4のDIPスイッチにプログラムを書き込みます。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;アセンブリ言語命令一覧&lt;/h3&gt;
&lt;p&gt;　プログラムメモリは8bitで1かたまりです。8bitのうち、左4bitがオペレーションコード、右4bitがデータになっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/asm.jpg&quot; alt=&quot;アセンブリコード表&quot; title=&quot;アセンブリコード表&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;動作周波数&lt;/h3&gt;
&lt;p&gt;　本の中ではハンドクロック（ボタンを押すたびにクロックが進む）と1HzのRCクロックが用意されていました。これに加えて、可変抵抗による可変クロックをつけました。&lt;br /&gt;
　クロックの最速は、344Hzでした。オシロスコープでクロックを見てみるっと、波が少し汚いです。これはRC発振を標準ロジックICのシュミットトリガで行ってるためだと思われます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/344Hz.jpg&quot; alt=&quot;オシロスコープ&quot; title=&quot;オシロスコープ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　そこで、クロックのソースをファンクション・ジェネレータに変えてみました。すると、約1MHzくらいまで動作しました。しかし、クロックが動くのが確認できても、プログラムを正常に実行しているのかは早すぎてわかりませんでした。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;　この本を読むと、CPUの構造が本当によくわかります。実在するCPUもこれの拡張にすぎません。 マイコンなどを使う時も内部の構造を知っていて使うのと知らずに使うのでは、生産性がかなり違うと思います。ブラックボックスと思い込んでしまうのはだめです。&lt;br /&gt;
　TD4を作るとハンダ付けの技術が上がります。本を読むだけでなく、実際に作ってみましょう。作り終わったら、&lt;strong&gt;楽しい楽しいデバック作業&lt;/strong&gt;が待ってますよ(^^)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-04-create-CPU/board_back.jpg&quot; alt=&quot;TD4 裏面&quot; title=&quot;TD4 裏面&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-04-create-cpu/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-04-create-cpu/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Surface Pro 3 に Ubuntu15.10を入れる(UEFI環境のデュアルブート)</title>
        <description>&lt;h2 id=&quot;uefi&quot;&gt;UEFIとは&lt;/h2&gt;
&lt;p&gt;　BIOSの代わりに最近のパソコンに導入されたインターフェース。BIOS特有の制約を解消したものと言える。UEFI環境でブートするには、ディスクの先頭にUEFIシステムパティションというものを置かなければならない。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;今現在できること、できないこと&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;できること&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Surface Pro 3 に Ubuntu 15.10 を入れること。&lt;/li&gt;
  &lt;li&gt;Surface Type cover のキーボードを使うこと。&lt;/li&gt;
  &lt;li&gt;Surface Type cover のタッチパッドを使うこと。&lt;/li&gt;
  &lt;li&gt;タッチ画面を使うこと。&lt;/li&gt;
  &lt;li&gt;Surface Pen を使うこと。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;できないこと&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Surface Type cover のタッチパッドの２本指スクロール。&lt;/li&gt;
  &lt;li&gt;スリープボタン、音量ボタン&lt;br /&gt;
  →追記2015.11.6：linux kernel 4.3以上で対応！&lt;/li&gt;
  &lt;li&gt;電力効率が悪い（Windows使用時に比べて2/3程度になる）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;用意するもの&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Surface Pro 3&lt;/li&gt;
  &lt;li&gt;Ubuntuインストール用のUSBメモリ（4GB以上）&lt;/li&gt;
  &lt;li&gt;USBハブ&lt;/li&gt;
  &lt;li&gt;USBキーボード（最初はSurface Type coverを認識しません）&lt;/li&gt;
  &lt;li&gt;USBマウス&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ubuntu&quot;&gt;Ubuntuインストール手順&lt;/h2&gt;

&lt;h3 id=&quot;usb&quot;&gt;1.インストールUSBの作成&lt;/h3&gt;

&lt;p&gt;まずは、通常通りWindowsで作業を行う。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ubuntulinux.jp/&quot;&gt;Ubuntu Japanese&lt;/a&gt;よりISOイメージをダウンロードする。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://osdn.jp/projects/sfnet_usbwriter/&quot;&gt;USBWriter&lt;/a&gt;などを使って、ISOイメージをUSBメモリに焼く。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;windows&quot;&gt;2.Windows側の設定&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;bitlockerの停止&lt;br /&gt;
  コントロールパネルから、bitlockerの暗号化を解除する。&lt;/li&gt;
  &lt;li&gt;高速スタートアップ機能の停止&lt;br /&gt;
  同じくコントロールパネルから、高速スタートアップ機能を停止する。&lt;/li&gt;
  &lt;li&gt;重要なファイルは必ずバックアップを取っておく&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;usb-1&quot;&gt;3.USBブート&lt;/h3&gt;
&lt;p&gt;※他サイトではセキュアブートを解除しろと書いてありますが、解除する必要はありません。Ubuntuはセキュアです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;電源の切れたSurfaceにUSBハブとUSBキーボードをつなぐ。&lt;/li&gt;
  &lt;li&gt;Ubuntuの入ったUSBメモリを挿す。&lt;/li&gt;
  &lt;li&gt;USBブートするために、ボリュームマイナスボタンを押しながら電源ボタンを押す。&lt;/li&gt;
  &lt;li&gt;Surfaceロゴが現れたら、ボタンを放す。&lt;/li&gt;
  &lt;li&gt;GRUB2のブートローダーが現れるので、Try Ubuntu を選択する。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ubuntu-1&quot;&gt;4.Ubuntu用のパーティション作成&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-03-surface-ubuntu/gparted.png&quot; alt=&quot;GParted&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Altボタンを一度押して、「GParted」アプリを起動する。&lt;/li&gt;
  &lt;li&gt;右上のメニューでUbuntuをインストールするDisk(SSD)を選択する。&lt;/li&gt;
  &lt;li&gt;一番大きいWindowsのパーティションを縮小する。&lt;/li&gt;
  &lt;li&gt;上の操作で空いた領域にまず、Ubuntuのルートディレクトリ用のパーティションを作る。大きさはswp領域のためにSurfaceのRAM+2GBくらい残しておくと良い。マウントやフォーマットはインストール時にするので、適当で良い。&lt;/li&gt;
  &lt;li&gt;残った空き領域をswp領域用にパーティションを作る。ここでも形式は何でも良い。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;point&quot;&gt;Point&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;WindowsとUbuntuの領域を隣同士に設定しておくと、後で容量の変更がうまくできるのでおすすめ。&lt;/li&gt;
  &lt;li&gt;SDカードにUbuntuをインストールすることもできるが、おすすめしません！！動作が遅すぎて使えたものではありません。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ubuntu-2&quot;&gt;5.Ubuntuのインストール&lt;/h3&gt;

&lt;p&gt;パーティションが作れたら、いよいよUbuntuをインストールします。&lt;/p&gt;

&lt;p&gt;先ほどUbuntuように作ったパーティションを編集する&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;容量はお好きなように。（私は32000MB）&lt;/li&gt;
  &lt;li&gt;パーティションのタイプは、「基本パーティション」&lt;/li&gt;
  &lt;li&gt;パーティションの場所は、「この領域の始点」&lt;/li&gt;
  &lt;li&gt;利用方法は、「ext4ジャーナリングファイルシステム」&lt;/li&gt;
  &lt;li&gt;マウントポイントは、「/」を書く。ルートディレクトリということ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次に、swp領域のセットアップをする。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;容量はRAM+2GB程度。&lt;/li&gt;
  &lt;li&gt;パーティションのタイプは、「論理パーティション」&lt;/li&gt;
  &lt;li&gt;パーティションの場所は、「この領域の始点」&lt;/li&gt;
  &lt;li&gt;利用方法は、「スワップ領域」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windowsがインストールされているパーティション(ntfs)パーティションを編集して、パーティションのタイプを「ntfs」マウントポイントを「/windows」にしておくと、UbuntuからWindows内のファイルにアクセスできるようになる。&lt;/p&gt;

&lt;p&gt;ブートローダーインストールデバイスは、Ubuntuのルートパーティションに設定する。&lt;/p&gt;

&lt;p&gt;設定ができたら画面に従ってインストールする。&lt;/p&gt;

&lt;h3 id=&quot;surface-type-cover-&quot;&gt;6.Surface Type Cover を使えるようにする&lt;/h3&gt;

&lt;p&gt;Terminal などで以下のファイルを開き下の文を最下部に追記する。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo vi /usr/share/X11/xorg.conf.d/10-evdev.conf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Section &quot;InputClass&quot;  
	Identifier &quot;Surface Pro 3 cover&quot;
	MatchIsPointer &quot;on&quot;
	MatchDevicePath &quot;/dev/input/event*&quot;
	Driver &quot;evdev&quot;
	Option &quot;vendor&quot; &quot;045e&quot;
	Option &quot;product&quot; &quot;07dd&quot;
	Option &quot;IgnoreAbsoluteAxes&quot; &quot;True&quot;
EndSection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;「product」の”07dd”はJIS配列のキーボードの場合。US配列は”07dc”とする。&lt;/p&gt;

&lt;p&gt;同様に次のファイルにも追記する。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo vi /usr/share/X11/xorg.conf.d/50-synaptics.conf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Section &quot;InputClass&quot;
    Identifier &quot;Disable clickpad buttons on Apple touchpads&quot;
    MatchProduct &quot;Apple|bcm5974&quot;
    MatchDriver &quot;synaptics&quot;
    Option &quot;SoftButtonAreas&quot; &quot;0 0 0 0 0 0 0 0&quot;
EndSection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再起動する。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;7.センサー設定&lt;/h3&gt;
&lt;p&gt;様々なドライバをインストール&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install -y lm-sensors
$ sudo sensors-detect
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これを実行するといろいろ聞かれるので、yesを打ち続ける。&lt;/p&gt;

&lt;p&gt;Bluetoothドライバをインストール&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone git://git.marvell.com/mwifiex-firmware.git
$ mkdir -p /lib/firmware/mrvl/
$ sudo cp mwifiex-firmware/mrvl/\* /lib/firmware/mrvl/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;linux-kernel&quot;&gt;8.必要に応じてLinux-kernelをインストールする。&lt;/h3&gt;

&lt;p&gt;ここまでの操作でキーボードやタッチ画面や音量ボタンなどが正常に動くならば、kernelのインストールはいらない。&lt;/p&gt;

&lt;p&gt;不満な点があるならば、&lt;a href=&quot;http://kernel.ubuntu.com/~kernel-ppa/mainline/&quot;&gt;Index of /~kernel-ppa/mainline&lt;/a&gt;から最新のkernelのdebファイルをダウンロードする。
例えば、v4.3が最新なら、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v4.3-wily/linux-headers-4.3.0-040300-generic_4.3.0-040300.201511020949_amd64.deb
v4.3-wily/linux-headers-4.3.0-040300_4.3.0-040300.201511020949_all.deb
v4.3-wily/linux-image-4.3.0-040300-generic_4.3.0-040300.201511020949_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;の３つのファイルをダウンロードする。&lt;/p&gt;

&lt;p&gt;Terminalで、ダウンロードしたdebのあるディレクトリで
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo dpkg -i linux-*.deb&lt;/code&gt;
を実行してインストールする。再起動して直っていたら完成。治らないならば、kernelのソースを入手して、パッチを当ててリビルドする必要があるが、とてもめんどくさい。公式に対応されるのを待つほうが早いかも。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;困った時は？&lt;/h2&gt;

&lt;h3 id=&quot;section-6&quot;&gt;インストール時&lt;/h3&gt;
&lt;p&gt;インストールは必ずしもうまく行くとは限りません。一度失敗しても、もう一度試すとうまく行く場合があります。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;インストール後（ドライバの設定など）&lt;/h3&gt;
&lt;p&gt;何故かうまく行かない時、再起動するとうまく行くことがあります。とりあえず、再起動してみましょう。&lt;/p&gt;

&lt;h3 id=&quot;ubuntu-3&quot;&gt;Ubuntuの削除または再インストール&lt;/h3&gt;
&lt;p&gt;環境をいじっていたらおかしくなってしまって、Ubuntuを諦めたり、再インストールすることがある。そんなときは注意！！&lt;/p&gt;

&lt;p&gt;Ubuntuをインストールした際に、ブートローダの優先順位がUbuntu優先になっています。&lt;/p&gt;

&lt;p&gt;その状態でUbuntuを削除すると、UbuntuはおろかWindowsも起動しなくなります。&lt;br /&gt;
&lt;a href=&quot;http://qiita.com/batimiasu/items/0d87413913fbbb90837b&quot;&gt;このような記事&lt;/a&gt;を参考にしましょう。&lt;/p&gt;

&lt;h3 id=&quot;ubuntuwindows&quot;&gt;Ubuntuを削除したらWindowsが起動しなくなったときは&lt;/h3&gt;

&lt;p&gt;exfatでフォーマットしたUSBメモリに、UEFIシェルファイルを入れて、そこからブートし、ブート優先順位を変える。&lt;/p&gt;

&lt;h4 id=&quot;uefiusb&quot;&gt;UEFIシェルの入ったUSBメモリを作る&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;正常に動く別のPCで&lt;a href=&quot;/files/Shell.efi&quot;&gt;UEFIshell&lt;/a&gt;をダウンロードする。&lt;/li&gt;
  &lt;li&gt;FAT32でフォーマットしたUSBメモリに、&lt;code class=&quot;highlighter-rouge&quot;&gt;EFI/Boot/&lt;/code&gt;というフォルダを作る。&lt;/li&gt;
  &lt;li&gt;その中に先ほどダウンロードしたUEFIシェルを&lt;code class=&quot;highlighter-rouge&quot;&gt;Bootx64.efi&lt;/code&gt;という名前にリネームして入れる。&lt;/li&gt;
  &lt;li&gt;終わり。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-8&quot;&gt;ブートの優先順位を変える&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Surfaceの電源が切れた状態でボリュームアップボタンを押しながら電源を入れる→UEFI設定画面が現れる。&lt;/li&gt;
  &lt;li&gt;セキュアブートをdisenableにする。UEFIシェルはUbuntuと違ってセキュアブートに弾かれてしまうから。&lt;/li&gt;
  &lt;li&gt;今度は、ボリュームダウンボタンを押しながらSurfaceを起動する。するとUEFIシェルが現れる。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fs1:&lt;/code&gt;と入力する。これで、SSDのUEFIシステムパーティションの中に入った。&lt;code class=&quot;highlighter-rouge&quot;&gt;fs0:&lt;/code&gt;は今シェルを使っているUSBだと思われる。SSDの他にディスクがつながっているときは、&lt;code class=&quot;highlighter-rouge&quot;&gt;fs1:&lt;/code&gt;じゃなくて&lt;code class=&quot;highlighter-rouge&quot;&gt;fs2:&lt;/code&gt;とかになるかもしれない。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bcfg boot dump -v&lt;/code&gt;と入力する。するとブートエントリが表示される。&lt;/li&gt;
  &lt;li&gt;その中のUbuntuの２桁のブート優先順位の番号（おそらく01）を確認する。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bcfg boot rm 01&lt;/code&gt;と入力すると、Ubuntu のブートエントリを削除できる。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reboot&lt;/code&gt;で再起動する。次からはWindowsが起動するはずだ。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-9&quot;&gt;細部の設定&lt;/h2&gt;

&lt;h3 id=&quot;section-10&quot;&gt;ホームディレクトリのフォルダを日本語から英語に変える&lt;/h3&gt;

&lt;p&gt;　Ubuntuを日本語でインストールすると、ホームディレクトリのフォルダ類（ドキュメントやダウンロードなど）が日本語になっている。このままだと、ターミナルでのアクセスが少し面倒である。これらを英語に変える方法がある。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
$ LANG=C xdg-user-dirs-gtk-update
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;を実行して、現れたダイアログで「Don’t ask me again」にチェックを入れて、「Update Names」を押す。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;使ってみての感想&lt;/h2&gt;

&lt;p&gt;Surface Pro 3 最高ーーー！！&lt;br /&gt;
Linux 最高ーーー！&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-03-surface-ubuntu/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-03-surface-ubuntu/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>SSHの使い方</title>
        <description>&lt;h1&gt;SSH&lt;/h1&gt;
&lt;section&gt;

	&lt;h2&gt;SSHとは&lt;/h2&gt;
	&lt;article&gt;
		&lt;p&gt;　Secure Shell。暗号や認証の技術を利用して、安全にリモートコンピュータと通信するためのプロトコル。 パスワードなどの認証部分を含むすべてのネットワーク上の通信が暗号化される。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h2&gt;ホスト側設定&lt;/h2&gt;
	&lt;article&gt;
		&lt;p&gt;openssh-serverをインストールしておく必要がある。これをインストールする前に、パスワードなどがしっかり設定されているかなどを確認しておくこと。&lt;/p&gt;
		&lt;pre&gt;$sudo apt-get install openssh-server&lt;/pre&gt;
		&lt;p&gt;を実行すると外部からアクセスできるようになる。&lt;/p&gt;
		&lt;pre&gt;$ sudo vim /etc/ssh/sshd_config&lt;/pre&gt;
		&lt;p&gt;　ここで各種設定をする。&lt;/p&gt;
		&lt;pre&gt;
Port 22
		&lt;/pre&gt;
	&lt;/article&gt;

	&lt;h2&gt;鍵の生成&lt;/h2&gt;
	&lt;article&gt;
		&lt;p&gt;　鍵はクライアント側で生成することが多い。&lt;/p&gt;
		&lt;pre&gt;$ssh-keygen -t ecdsa -C &quot;comment&quot;&lt;/pre&gt;
		&lt;p&gt;を実行するとファイル名とパスワード作成を求められるが空欄でもENTERを押せば良い。すると、カレントディレクトリに「id_ecdsa」「id_ecdsa.pu」の２つのファイルが生成される。この内、「id_ecdsa.pub」を適当な手段でsshで繋ぎたい相手（ホスト側）に渡す。これは公開鍵なので、誰かに見られても大丈夫である。むしろ、どこからでもアクセスできる場所においておくのが便利である。逆に「id_ecdsa」は、秘密鍵なので、厳重に保管する。&lt;/p&gt;
		&lt;p&gt;　公開鍵をホスト側のPCに移動したら、鍵リストに追加する。ホームディレクトリに.sshディレクトリがなければ作る。&lt;/p&gt;
		&lt;pre&gt;$ mkdir ~/.ssh&lt;/pre&gt;
		&lt;p&gt;　ここに「authorized_keys」というファイルがあれば、以下のように追加する。&lt;/p&gt;
		&lt;pre&gt;$ cat id_ecdsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/pre&gt;
		&lt;p&gt;なければ、新規作成してから、鍵を追加する。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h2&gt;SSHの接続&lt;/h2&gt;
	&lt;article&gt;
		&lt;p&gt;　接続コマンドは以下の通り。ログインユーザー名と、ホストアドレスを書く。&lt;/p&gt;
		&lt;pre&gt;$ssh your_username@your_domain.com&lt;/pre&gt;
		&lt;p&gt;　公開鍵認証がうまく設定できていれば、これで接続ができる。失敗していると、パスワードを求められて、パスワード認証となってしまう。(sshd_confでパスワード認証が許可されている場合)&lt;/p&gt;
		&lt;p&gt;　公開鍵認証を使わなくても、パスワード認証でも接続することができる。しかしこれはあまり使われない（使わないほうが良い）。&lt;/p&gt;
	&lt;/article&gt;

	&lt;h2&gt;.ssh/config&lt;/h2&gt;
	&lt;article&gt;
		&lt;p&gt;　sshにつなぐときに毎回アドレスを入力するのは面倒なので、よく使うものはconfigに登録しておくと良い。&lt;/p&gt;
		&lt;pre&gt;
$vim ~/.ssh/config

Host local_raspi
	HostName	192.168.11.2 ←ラズパイのIP
	IdentityFile	~/.ssh/id_ecdsa
	User		kerikun11
	Port		22

Host global_raspi
	HostName	kerikeri.top ←ドメイン
	IdentityFile	~/.ssh/id_ecdsa
	User		kerikun11
	Port		22
		&lt;/pre&gt;
		&lt;p&gt;　接続の仕方は、以下の通り。とても簡単。&lt;/p&gt;
		&lt;pre&gt;$ssh global_raspi&lt;/pre&gt;
	&lt;/article&gt;
&lt;/section&gt;
</description>
        <pubDate>Sat, 31 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-10-31-ssh/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-10-31-ssh/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>linkを作る「ln」コマンド</title>
        <description>&lt;h2&gt;ハードリンクとシンボリックリンク&lt;/h2&gt;
&lt;article&gt;
	&lt;p&gt;　ハードリンクは、別名の同じファイルといえる。ターゲットとリンクの区別がなく、すべてのファイルに実体があり（ディスク容量を消費）、削除するにはすべてのファイルを削除する必要がある。&lt;/p&gt;
	&lt;p&gt;　シンボリックリンクは、いわゆるショートカットと同じで、パス情報のみを保持している。したがって、実体を削除するとシンボリックリンはエラーになる。&lt;/p&gt;
&lt;/article&gt;
&lt;h2&gt;コマンド形式&lt;/h2&gt;
&lt;article&gt;
	&lt;p&gt;　以下のようなコマンドを実行する。&lt;/p&gt;
	&lt;pre&gt;$ ln -fids &amp;lt;ターゲット&amp;gt; &amp;lt;リンク&amp;gt;&lt;/pre&gt;
	&lt;ul&gt;
		&lt;li&gt;-f	指定したリンク先にもともとリンクやファイルがあっても、警告なしに上書きする&lt;/li&gt;
		&lt;li&gt;-i	指定したリンク先にもともとリンクやファイルがあるときに、問合わせる&lt;/li&gt;
		&lt;li&gt;-d	ディレクトリのリンクを作成&lt;/li&gt;
		&lt;li&gt;-s	シンボリックリンクを作成（デフォルトはハードリンク）&lt;/li&gt;
	&lt;/ul&gt;
&lt;/article&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;article&gt;
	&lt;p&gt;　Gitのdotfilesなどで管理している.vimrcなどを所定の場所に配置するコマンド&lt;/p&gt;
	&lt;pre&gt;$ ln -sf ~/dotfiles/.vimrc ~/.vimrc&lt;/pre&gt;

</description>
        <pubDate>Wed, 28 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-10-28-link/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-10-28-link/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>Gitの使い方</title>
        <description>&lt;p&gt;ここではGithubを使ったGitの使い方を説明する。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;主なコマンド&lt;/h2&gt;

&lt;h3 id=&quot;clone&quot;&gt;clone&lt;/h3&gt;
&lt;p&gt;　Git上にあるファイルをローカルにクローンする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/your_username/your_repository.git
$ git clone git@github.com:your_username/your_password/your_repository.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　cloneを置きたいディレクトリで上のコマンドを実行すると、新たにリポジトリ名のディレクトリが生成される。&lt;/p&gt;

&lt;h3 id=&quot;add&quot;&gt;add&lt;/h3&gt;
&lt;p&gt;　新規作成したファイルをGitにあげるにはcloneしているディレクトリに入って、以下のコマンドを実行する。
　設定ファイルやソースファイルなどはGitにおいて管理するよ良い。その際、設定ファイルのあった場所にはcloneしたディレクトリへのショートカットを置いておく。設定ファイルにはユーザー名とパスワードが記述されているものが多いので、それらをアップロードしないように細心の注意を払うこと。Gitは履歴が残るので、たとえファイルを削除しても簡単には消えてくれない。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add filename
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;commit&quot;&gt;commit&lt;/h3&gt;
&lt;p&gt;ファイルを追加または変更したら、以下のコマンドによりファイルの変更を確定する。commitすると、変更履歴が更新される。ローカルリポジトリでの変更が記録される。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit filename -m &#39;message&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;push&quot;&gt;push&lt;/h3&gt;
&lt;p&gt;　commitしたら、cloneしているディレクトリに入って、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;を実行すると、Git上のファイルが更新される。&lt;/p&gt;

&lt;h3 id=&quot;pull&quot;&gt;pull&lt;/h3&gt;
&lt;p&gt;　ほかの場所で更新した内容をこのPCにも反映させるには、cloneしているディレクトリに入って、以下のコマンドを実行する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;diff&quot;&gt;diff&lt;/h3&gt;
&lt;p&gt;変更の差分を表示する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git diff filename
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ssh&quot;&gt;SSHの設定&lt;/h2&gt;
&lt;p&gt;Githubに繋ぐには、httpsとsshの２通りある。httpsの場合、UserIDとPasswordを入力する必要があるため、セキュリティに不安がある。そこでSSHを使って接続してみる。この場合、SSH鍵のPasswordのみで通信できる。SSH鍵にパスワードをかけなければ、passwordなしで、公開鍵認証の安全な通信ができる。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;設定の手順&lt;/h3&gt;

&lt;h4 id=&quot;section-2&quot;&gt;鍵の作成&lt;/h4&gt;
&lt;p&gt;ホームディレクトリに.sshディレクトリがない場合&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir ~/.ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;共通&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/.ssh
$ ssh-keygen -t ecdsa -C &quot;for github&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この時ファイル名とパスワードを求められるが、ファイル名は空欄で良い。パスワードは任意。なくても大丈夫。&lt;/p&gt;

&lt;p&gt;次に以下のファイルを開く。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim config
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここで、以下を記述または追記&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host github
	User			git
	HostName		github.com
	Port			22
	IdentityFile	~/.ssh/id_ecdsa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-3&quot;&gt;鍵の登録&lt;/h4&gt;

&lt;p&gt;次に、ブラウザからGithubにログインして、画面右上のアイコン→Settings→SSH keys→Add SSH keyってところで先ほどの&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/id_ecdsa.pub&lt;/code&gt;の内容を貼り付ける。&lt;/p&gt;

&lt;h4 id=&quot;clone-1&quot;&gt;新たにcloneするときは&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://your_usermame/your_repository.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;の代わりに&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone github:your_username/your_repository.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;でcloneすればよい。&lt;/p&gt;

&lt;h4 id=&quot;cloneinit&quot;&gt;すでにcloneしているまたは、新しくinitしたときは&lt;/h4&gt;

&lt;p&gt;すでにcloneしているリポジトリや、新たなリポジトリでさっき設定したSSHを使うには、リポジトリの設定を変更すればよい。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote set-url origin github:your_username/your_repository.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;git&quot;&gt;Gitを使う手順&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;初期設定&lt;/h3&gt;

&lt;p&gt;自分の情報を登録する&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global user.name &quot;Your Name&quot;
$ git config --global user.email &quot;your_email@smaple.com&quot;
$ git config --global core.editor vim (or emacs)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;設定の確認&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;clone-2&quot;&gt;他人のリポジトリをclone&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;cloneしたいリポジトリに入って、&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone github:username/repository.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;自分のレポジトリを使う&lt;/h3&gt;

&lt;h4 id=&quot;clone-3&quot;&gt;もともとあるリポジトリをclone&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;cloneしたいリポジトリに入って、&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone github:my_username/my_repository.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;ファイルを編集する&lt;/li&gt;
  &lt;li&gt;変更を追加&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;変更をコミット&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit -m &quot;any comment&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;変更をプッシュ&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-6&quot;&gt;新たにリポジトリを作る&lt;/h4&gt;

&lt;p&gt;1.新しくリポジトリにするディレクトリ内に入って、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 21 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-10-21-git/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-10-21-git/</guid>
        
        
        <category>memo</category>
        
      </item>
    
  </channel>
</rss>
