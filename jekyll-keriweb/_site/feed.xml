<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KERI&#39;s Lab</title>
    <description>KERI&#39;s Lab へようこそ。ここでは、趣味の電子工作やサーバーづくりなどを紹介しています。</description>
    <link>http://kerikeri.top/</link>
    <atom:link href="http://kerikeri.top/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 13 Mar 2016 14:12:57 +0900</pubDate>
    <lastBuildDate>Sun, 13 Mar 2016 14:12:57 +0900</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Sinatraでアプリケーションを作る</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;概要&lt;/h1&gt;

&lt;p&gt;格安WiFiモジュールESP-WROOM-02を使って電流を計測してそれを受信し表示するアプリケーションを作りました。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;見た目&lt;/h1&gt;

&lt;p&gt;ちょっとした計算をしてレポートとして表示しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;index.png&quot; alt=&quot;ページ&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;電流計測機器&lt;/h1&gt;

&lt;p&gt;5~30VほどのDCケーブルに中継することでその電圧と電流を計り、データをWiFiでサーバーに送ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pm1.jpg&quot; alt=&quot;電力計&quot; /&gt;
&lt;img src=&quot;pm2.jpg&quot; alt=&quot;電力計&quot; /&gt;
&lt;img src=&quot;pm3.jpg&quot; alt=&quot;電力計&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;環境&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Windows10 &amp;amp; Cygwin&lt;/li&gt;
  &lt;li&gt;ruby 2.2.4p230 (2015-12-16 revision 53155) [x86_64-cygwin]&lt;/li&gt;
  &lt;li&gt;gem 2.6.1&lt;/li&gt;
  &lt;li&gt;SQLite 3.11.1 2016-03-03&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-4&quot;&gt;ソースプログラム&lt;/h1&gt;

&lt;p&gt;必要なソースファイルは以下の３つです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;app.rb&lt;/li&gt;
  &lt;li&gt;views/layout.erb&lt;/li&gt;
  &lt;li&gt;views/index.erb&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;apprb&quot;&gt;app.rb&lt;/h2&gt;

&lt;p&gt;Sinatraを動かしているメインファイルです。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sinatra&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sinatra/reloader&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;active_record&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;establish_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;adapter&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sqlite3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;database&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./PowerStation.db&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;helpers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;
	&lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:esc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:escape_html&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Power Station&quot;&lt;/span&gt;
	&lt;span class=&quot;vi&quot;&gt;@samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id desc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
	&lt;span class=&quot;vi&quot;&gt;@intCurrent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;vi&quot;&gt;@intPower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currentValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_f&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;voltageValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_f&lt;/span&gt;
		&lt;span class=&quot;vi&quot;&gt;@intCurrent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
		&lt;span class=&quot;vi&quot;&gt;@intPower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;erb&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/new&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;ss&quot;&gt;:deviceName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:deviceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
			&lt;span class=&quot;ss&quot;&gt;:currentValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:currentValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
			&lt;span class=&quot;ss&quot;&gt;:voltageValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:voltageValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/&#39;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;erb&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/deleteAll&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;destroy_all&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/delete&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;viewslayouterb&quot;&gt;views/layout.erb&lt;/h2&gt;

&lt;p&gt;サイト内共通のHTMLヘッダーやフッターはここに書きます。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ja&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= @title %&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= yield %&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;viewsindexerb&quot;&gt;views/index.erb&lt;/h2&gt;

&lt;p&gt;実際にブラウザに表示される部分を書きます。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Power Station&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Report&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Average : &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= if @samples.length != 0 then @samples.average(:voltageValue).round(3) end %&amp;gt; [V], &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= if @samples.length != 0 then @samples.average(:currentValue).round(3) end %&amp;gt; [A], &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= if @samples.length != 0 then (@samples.average(:currentValue) * @samples.average(:voltageValue)).round(3) end %&amp;gt; [W]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Integrating : &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= @intCurrent.round(3) %&amp;gt; [Ah]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Electrical Energy : &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= @intPower.round(3) %&amp;gt; [Wh]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Data&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height:30em;overflow:scroll;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% @samples.each do |sample| %&amp;gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;%= sample.id %&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deleteCmd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cursor:pointer;color:blue;}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;delete&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= sample.created_at %&amp;gt; (&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= sample.deviceName %&amp;gt;) : &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= esc sample.voltageValue %&amp;gt; [V], &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= esc sample.currentValue %&amp;gt; [A]
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Add new&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/new&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	Device Name:&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deviceName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	Voltage:&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;voltageValue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	Current:&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;currentValue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Post!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Delete&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deleteAll&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Delete All Data&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.deleteAll&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Are you sure to delete?&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/deleteAll&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.deleteCmd&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Are you sure to delete?&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/delete&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;section-5&quot;&gt;参考サイト&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://dotinstall.com&quot;&gt;ドットインストール&lt;/a&gt;のレッスンを参考にデータを表示するアプリケーションを作りました。&lt;/p&gt;

</description>
        <pubDate>Sat, 12 Mar 2016 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2016-03-12-sinatra/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2016-03-12-sinatra/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Reference of IR-station</title>
        <description>&lt;h1 id=&quot;ir-station&quot;&gt;IR station&lt;/h1&gt;

&lt;p&gt;Infrared Remote Controller with ESP8266 WiFi-module&lt;br /&gt;
You can control your home appliances with your smartphone or laptop.&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;

&lt;h2 id=&quot;main-parts&quot;&gt;Main parts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ESP-WROOM-02 (ESP8266 WiFi Module)&lt;/li&gt;
  &lt;li&gt;IR Receiver&lt;/li&gt;
  &lt;li&gt;IR LED&lt;/li&gt;
  &lt;li&gt;Indicator LED&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-to-use&quot;&gt;How to Use&lt;/h1&gt;

&lt;h2 id=&quot;setup-the-device&quot;&gt;Setup the Device&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Supply power to the device.&lt;/li&gt;
  &lt;li&gt;Connect your cellphone or laptop to Wi-Fi SSID “ESP8266-Remocon”.&lt;/li&gt;
  &lt;li&gt;Access http://esp8266.local in a browser&lt;/li&gt;
  &lt;li&gt;Enter Wi-Fi SSID of your router and its password&lt;/li&gt;
  &lt;li&gt;Enter a device name you like. Because it will be a part of URL, you cannot use space or symbol character.&lt;/li&gt;
  &lt;li&gt;Click OK button.&lt;/li&gt;
  &lt;li&gt;If connection succeeded, Wi-Fi “ESP8266-Remocon” will automatically disappear.&lt;/li&gt;
  &lt;li&gt;Reconnect the power to reboot the device.&lt;/li&gt;
  &lt;li&gt;Connect your cellphone or laptop to your router’s Wi-Fi.&lt;/li&gt;
  &lt;li&gt;Access http://DEVICE_NAME.local in a browser.&lt;/li&gt;
  &lt;li&gt;If something appears, setup is complete.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;store-signals&quot;&gt;Store Signals&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Access http://DEVICE_NAME.local in a browser. DEVICE_NAME is the device name you entered previous form.&lt;/li&gt;
  &lt;li&gt;Look at the form of the bottom of the screen.&lt;/li&gt;
  &lt;li&gt;Select a channel you want to assign a signal.&lt;/li&gt;
  &lt;li&gt;Enter a name of the signal. Don’t use Japanese character.&lt;/li&gt;
  &lt;li&gt;Click Recode button. An LED indicator will light.&lt;/li&gt;
  &lt;li&gt;Press the button on the remote controller toward the device to store the signal.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;remote-control&quot;&gt;Remote Control&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Access http://DEVICE_NAME.local in a browser.&lt;/li&gt;
  &lt;li&gt;Click a button which assigned a signal you want to send.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-to-make&quot;&gt;How to Make&lt;/h1&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Gather the components.&lt;/li&gt;
  &lt;li&gt;Assemble the components according to the circuit diagram.&lt;/li&gt;
  &lt;li&gt;Connect the device and the PC with a serial-to-USB conversion module.&lt;/li&gt;
  &lt;li&gt;Prepare Arduino IDE and serial-USB converter’s driver.&lt;/li&gt;
  &lt;li&gt;Open the preferences of Arduino IDE and fill in this URL: http://arduino.esp8266.com/stable/package_esp8266com_index.json to “Additional Boards Manager URLs”.&lt;/li&gt;
  &lt;li&gt;Add “Generic ESP8266 Module” in the Arduino IDE Board Manager.&lt;/li&gt;
  &lt;li&gt;Open IR-station firmware in the Arduino IDE.&lt;/li&gt;
  &lt;li&gt;Select “Generic ESP8266 Module” and configure each item of board settings properly. See Arduino Board Settings below.&lt;/li&gt;
  &lt;li&gt;Select correct serial COM port and upload program to the device. When upload program, GPIO0 and GPIO2 must be pulled-up, and GPIO15 must be pulled-down. It’s necessary to reset the devie immediately before upload. It’s a little difficult.&lt;/li&gt;
  &lt;li&gt;The uploading takes about 30 seconds.&lt;/li&gt;
  &lt;li&gt;Process termination.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;

&lt;h3 id=&quot;device-components&quot;&gt;Device Components&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Components&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Details&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Quantity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ESP8266 WiFi Module&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ESP-WROOM-02&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;IR receiver&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PL-IRM0101-3 or equivalents&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;IR LED&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;anything good&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2~4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nch FET&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;BS170 or equivalents&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;IR LED Current Regulation Resistor&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10 ohms, 1W&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Pull-up/down Resistor&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10k ohms&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Indicator LED&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;anything good&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Voltage Regulator&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output: 3.3V 150mA or more&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bypass Capacitor&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0.1uF&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2~3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Power Stabilization Capacitor&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;470uF~1000uF&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;optional-device-components&quot;&gt;Optional Device Components&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Components&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Details&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Quantity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Reset Switch&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;tact switch&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Program Upload Switch&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;tact switch&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;requires&quot;&gt;Requires&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Requires&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Details&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Quantity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Serial-to-USB conversion Module&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;such as FT232&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Power Supplyer&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;over 3.3V&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;circuit-diagram&quot;&gt;Circuit Diagram&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;sketch.png&quot; alt=&quot;sketch&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sample&quot;&gt;Sample&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;brb.jpg&quot; alt=&quot;sample&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;arduino-board-settings&quot;&gt;Arduino Board Settings&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;item&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;select&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Board&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Generic ESP8266 Module&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Flash Mode&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;QIO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Flash Frequency&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;40MHz&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Upload Using&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Serial&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CPU Frequency&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;80MHz&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Flash Size&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4M(3M SPIFFS)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Reset Method&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ck&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Upload Speed&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;115200&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;latest-information-and-source-file&quot;&gt;Latest Information and Source File&lt;/h1&gt;

&lt;p&gt;URL:&lt;a href=&quot;https://github.com/kerikun11/IR-station.git&quot;&gt;https://github.com/kerikun11/IR-station.git&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Mar 2016 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2016-03-11-ir-station-reference/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2016-03-11-ir-station-reference/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>PICでブートローダ</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;概要&lt;/h1&gt;

&lt;h2 id=&quot;pic18f27j53&quot;&gt;PIC18F27J53を使おう&lt;/h2&gt;

&lt;p&gt;以前 &lt;a href=&quot;/posts/2016-01-08-pic18f27j53/&quot;&gt;PIC18F27J53のすすめ&lt;/a&gt; という記事を書きました。それの続きで、今回はUSBブートローダの使い方について書きたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ブートローダとは&lt;/h2&gt;

&lt;p&gt;ブートローダとは自分自身にプログラムを書きこむプログラムです。これを使うとPICkitなどのライタを使わなくてもプログラムの書き込みをすることができるようになります。&lt;/p&gt;

&lt;p&gt;ただし、初回に一度だけブートローダ用のプログラムをPICkitなどで書きこむ必要があります。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;ユーザープログラム&lt;/h2&gt;

&lt;p&gt;ユーザープログラムとは、ブートローダーにより書き込むプログラムです。あなたが作った、実際に動かすプログラムということです。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;回路&lt;/h1&gt;

&lt;p&gt;後述のI/Oピンによるブートロードモードへの移行をオンにする場合はRB0(21 pin)をプルアップしておいてください。そこをLOWにするとブートロードモードに入るので、SWなどをつけてもいいでしょう。&lt;/p&gt;

&lt;p&gt;また、RC2(13 pin)がブートローダのステータスを出力するのでLEDをつけるといいでしょう。&lt;/p&gt;

&lt;p&gt;どちらもユーザープログラムには影響はありません。&lt;/p&gt;

&lt;p&gt;回路図&lt;br /&gt;
&lt;a href=&quot;/images/2016-01-10-pic-usb/sketch.png&quot;&gt;&lt;img src=&quot;/images/2016-01-10-pic-usb/sketch.png&quot; alt=&quot;PIC18F27J53の回路図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;ブートローダプログラム&lt;/h1&gt;

&lt;h2 id=&quot;hex&quot;&gt;HEXファイル&lt;/h2&gt;

&lt;p&gt;以下のHEXファイルをPICに書き込むだけで動作します。HEXファイルをPICに書き込むには、MPLAB X IDEと一緒についてきた&lt;code class=&quot;highlighter-rouge&quot;&gt;MPLAB IPE.exe&lt;/code&gt;を使います。&lt;/p&gt;

&lt;p&gt;以下のHEXファイルはMicrochip公式ライブラリ(MLA)のソースをPIC18F27J53用に編集して作りました。コンパイルにはXC8のPRO版が必要なため、ソースではなくHEXファイルを配布します。(XC8には60日間無料のPRO体験版があります)&lt;/p&gt;

&lt;p&gt;ソフトウェアまたはハードウェアでブートモードへ切り替えHEX（推奨）&lt;br /&gt;
&lt;a href=&quot;HID_Bootloader_PIC18F27J53(RB0-software-enter).hex&quot;&gt;HID_Bootloader_PIC18F27J53(RB0-software-enter).hex&lt;/a&gt;&lt;br /&gt;
ソフトウェアでブートロードモードへ切り替えHEX(I/Oピンを減らしたくない人向け)&lt;br /&gt;
&lt;a href=&quot;HID_Bootloader_PIC18F27J53(software-enter).hex&quot;&gt;HID_Bootloader_PIC18F27J53(software-enter).hex&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-5&quot;&gt;ユーザープログラムの書き方&lt;/h1&gt;

&lt;h2 id=&quot;configration-bits&quot;&gt;Configration Bitsは不要&lt;/h2&gt;

&lt;p&gt;Configration Bitsはハードウェアにかなり寄り添ったプログラムなため、ブートローダで書き換えることができません。上のHEXファイルでは、以下のConfigration Bitsがあらかじめ書き込まれています。&lt;/p&gt;

&lt;p&gt;なお、このConfigration Bitsを変更したい場合は、ブートローダプログラムを再コンパイルする必要があるので、XC8コンパイラのPROライセンスが必要です。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG1L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTEN = OFF, PLLDIV = 2, CFGPLLEN = ON, STVREN = OFF, XINST = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG1H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config CPUDIV = OSC1, CP0 = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config OSC = INTOSCPLL, SOSCSEL = LOW, CLKOEC = OFF, FCMEN = OFF, IESO = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTPS = 1024
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config DSWDTOSC = T1OSCREF, RTCOSC = T1OSCREF, DSBOREN = OFF, DSWDTEN = OFF, DSWDTPS = G2
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config IOL1WAY = OFF, ADCSEL = BIT12, MSSP7B_EN = MSK7
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPFP = PAGE_127, WPCFG = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPDIS = OFF, WPEND = PAGE_WPFP, LS48MHZ = SYS48X8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;rom&quot;&gt;ROMの範囲とオフセットを指定&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;プロジェクトを右クリックして、&lt;code class=&quot;highlighter-rouge&quot;&gt;Properties&lt;/code&gt;を開きます。&lt;/li&gt;
  &lt;li&gt;左側の&lt;code class=&quot;highlighter-rouge&quot;&gt;XC8 linker&lt;/code&gt;をクリックする。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Option categories:&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;Memory model&lt;/code&gt;を開く。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ROM ranges&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;default,-0-FFF,-1006-1007,-1016-1017&lt;/code&gt;に指定する。（下図参照）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Option categories:&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;Additional options&lt;/code&gt;を開く。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Codeoffset&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;0x1000&lt;/code&gt;に指定する。(下図参照)&lt;/li&gt;
  &lt;li&gt;以上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;Required_Application_Project_ROM_Ranges_Linker_Settings_for_XC8.png&quot; alt=&quot;ROM rages&quot; /&gt;
&lt;img src=&quot;Required_Application_Project_Codeoffset_Linker_Settings_for_XC8.png&quot; alt=&quot;Codeoffset&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;ブートロードモードへ移行するには&lt;/h1&gt;

&lt;h2 id=&quot;section-7&quot;&gt;ソフトウェアでブートロードモードへ移行&lt;/h2&gt;

&lt;p&gt;ユーザープログラムからソフトウェアでブートモードへ移るには、以下のコードを書きます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asm(&quot;goto   0x001C&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;※ブートロードモードから、ユーザープログラムに移るにはMCLRなどのリセットが必要です。&lt;/p&gt;

&lt;h2 id=&quot;io&quot;&gt;I/Oピンでブートロードモードへ移行&lt;/h2&gt;

&lt;p&gt;PICに電源を投入またはPICをリセットしたときに、RB0端子がHIGHならばユーザープログラム、LOWならばブートローダプログラムが起動します。&lt;/p&gt;

&lt;h1 id=&quot;section-8&quot;&gt;ユーザープログラムを書き込み&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.microchip.com/pagehandler/en-us/devtools/mla/home.html&quot;&gt;ここ&lt;/a&gt;からMicrochip Libraris for Applicationsをダウンロードし、インストールする。&lt;/li&gt;
  &lt;li&gt;インストール場所/mla_v2014_07_22/ apps/usb/device/bootloaders/ utilities/bin/win/ HIDBootloader.exeを起動する。&lt;/li&gt;
  &lt;li&gt;ブートロードモ：ｗードのPICをUSBで接続する。&lt;/li&gt;
  &lt;li&gt;上手く接続できると、右下に&lt;code class=&quot;highlighter-rouge&quot;&gt;connected&lt;/code&gt;と表示されるので、ユーザープログラムのHEXファイルをロードして書き込めばOK。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上手くいかないときは、ドライバをインストールすればうまくいくかもしれない。ドライバも先ほどインストールしたMLAの中のutilities/usb_drivers/に入っている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;util1.png&quot; alt=&quot;HIDbootloader.exe&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;USBブートローダを使えば、PICkitなどの周辺機器はほとんど必要なくなります。PICだけでPICの開発ができるようになるのです！&lt;/p&gt;

&lt;p&gt;PIC最高ーーー！！！&lt;/p&gt;

</description>
        <pubDate>Wed, 13 Jan 2016 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2016-01-13-pic-bootloader/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2016-01-13-pic-bootloader/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>PICでUSB通信</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;概要&lt;/h1&gt;

&lt;p&gt;以前 &lt;a href=&quot;/posts/2016-01-08-pic18f27j53/&quot;&gt;PIC18F27J53のすすめ&lt;/a&gt; という記事を書きました。それの続きで、今回はUSBの使い方について書きたいと思います。&lt;/p&gt;

&lt;p&gt;今回紹介する方法では、USBをUARTの代わりに使えるようにするものです。PICをPCにつなぐとCOMポートが現れます。&lt;/p&gt;

&lt;p&gt;これならUSBシリアル変換モジュールを使う必要はなくります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;FT232.jpg&quot; alt=&quot;AE-FT232&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;ハードウェアについて&lt;/h1&gt;

&lt;p&gt;PIC18F27J53を使用します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;view.jpg&quot; alt=&quot;PIC18F27J53&quot; /&gt;&lt;/p&gt;

&lt;p&gt;15,16pinがそれぞれUSBのD-,D+なのでUSBコネクタに接続します。さらに14pinのV_USB端子には3.3VのVCCをつなぎます。&lt;/p&gt;

&lt;p&gt;USBから電源をとるときは、3端子レギュレータを通して3.3Vにするのを忘れずに。&lt;/p&gt;

&lt;p&gt;回路図&lt;br /&gt;
&lt;a href=&quot;sketch.png&quot;&gt;&lt;img src=&quot;sketch.png&quot; alt=&quot;PIC18F27J53の回路図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;ソフトウェアについて&lt;/h1&gt;

&lt;h2 id=&quot;picusb-cdc&quot;&gt;PIC用USB-CDCライブラリ&lt;/h2&gt;

&lt;p&gt;Microchipの公式ライブラリ（MLA）を参考に僕がライブラリを作ったので、それを利用します。&lt;/p&gt;

&lt;p&gt;USBのプログラムを自分で実装するのはかなり厳しいです。ライブラリを使いましょう。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;必要なファイル一覧&lt;/h2&gt;

&lt;p&gt;USB関連のファイル&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My_USB_CDC.h&lt;/li&gt;
  &lt;li&gt;My_USB_CDC.c&lt;/li&gt;
  &lt;li&gt;usb_config.h&lt;/li&gt;
  &lt;li&gt;usb_descriptors.c&lt;/li&gt;
  &lt;li&gt;usb/usb.h&lt;/li&gt;
  &lt;li&gt;usb/usb_ch9.h&lt;/li&gt;
  &lt;li&gt;usb/usb_common.h&lt;/li&gt;
  &lt;li&gt;usb/usb_device.c&lt;/li&gt;
  &lt;li&gt;usb/usb_device.h&lt;/li&gt;
  &lt;li&gt;usb/usb_device_cdc.c&lt;/li&gt;
  &lt;li&gt;usb/usb_device_cdc.h&lt;/li&gt;
  &lt;li&gt;usb/usb_device_local.h&lt;/li&gt;
  &lt;li&gt;usb/usb_hal.h&lt;/li&gt;
  &lt;li&gt;usb/usb_hal_pic18.h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;送受信バッファ用ファイル&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My_ringbuf.h&lt;/li&gt;
  &lt;li&gt;My_ringbuf.c&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらのファイルは&lt;a href=&quot;USB_CDC.zip&quot;&gt;ここ&lt;/a&gt;からダウンロードできます。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;ユーザーが使う関数&lt;/h2&gt;

&lt;p&gt;このうちユーザーが使う関数が含まれるのは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My_USB_CDC.h&lt;/li&gt;
  &lt;li&gt;My_ringbuf.h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つです。&lt;/p&gt;

&lt;h3 id=&quot;myusbcdch&quot;&gt;My_USB_CDC.h&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*******************************************************************
 * Microchip PIC, USB-CDC Library
 * Author:  @Ryokeri14
 * Date:    2016.01.10
 *******************************************************************/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef MY_USB_CDC_H
#define MY_USB_CDC_H
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/** INCLUDES *******************************************************/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdbool.h&amp;gt;
#include &amp;lt;stddef.h&amp;gt;
#include &amp;lt;My_ringbuf.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;usb_config.h&quot;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;usb/usb.h&amp;gt;
#include &amp;lt;usb/usb_device.h&amp;gt;
#include &amp;lt;usb/usb_device_cdc.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/** VALUES ********************************************************/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define USB_RX_BUFFER_SIZE 250
#define USB_TX_BUFFER_SIZE 250
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/** VARIABLES *****************************************************/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usb_rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usb_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** USER FUNCTIONS ************************************************/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** FUNCTIONS *****************************************************/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_buffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USB_CDC_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP_DeviceCDCBasicDemoInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USER_USB_CALLBACK_EVENT_HANDLER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USB_EVENT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;myringbufh&quot;&gt;My_ringbuf.h&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* 
 * File:   My_ringbuf.h
 * Author: kerikun11
 *
 * Created on 2015/02/26, 19:21
 */&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifndef MY_RINGBUF_H
#define	MY_RINGBUF_H
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdint.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//*************************** ringbuf ***************************//
// headは次に入れるバッファを指す。tailは次に出すバッファを指す。
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;internal_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_put_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_put_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_backspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* MY_RINGBUF_H */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;section-5&quot;&gt;ライブラリファイルの追加&lt;/h1&gt;

&lt;h2 id=&quot;c&quot;&gt;Cファイルとヘッダーファイル&lt;/h2&gt;

&lt;p&gt;外部のライブラリを使用するとき、Cファイルとヘッダーファイルではプロジェクトへの読み込み方が異なります。&lt;/p&gt;

&lt;p&gt;Cファイルは「Add Existing Item…」からプロジェクトにファイルを追加します。&lt;/p&gt;

&lt;p&gt;一方、ヘッダーファイルは、プロジェクトのプロパティの「Include directory」にヘッダーファイルのあるディレクトリを指定するだけで、プロジェクトに直接ファイルを追加する必要はありません。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;ファイル追加の仕方&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;ダウンロードして解凍したUSB-CDCディレクトリをMPLABのプロジェクトのフォルダ内にコピーします。&lt;/li&gt;
  &lt;li&gt;MPLABXプロジェクトの「Source Files」ディレクトリを右クリックして「Add Existing Item…」からCファイルを追加します。&lt;/li&gt;
  &lt;li&gt;プロジェクトを右クリック→Properties→XC8 Compiler→Include directoriesにUSB_CDCディレクトリを追加します。&lt;/li&gt;
  &lt;li&gt;mainファイルを作成して以下のソースを書けばOKです。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;p1.png&quot; alt=&quot;プロジェクトのプロパティ&quot; /&gt;
&lt;img src=&quot;p2.png&quot; alt=&quot;プロジェクトのプロパティ&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;usb&quot;&gt;USB通信の仕方&lt;/h2&gt;

&lt;h3 id=&quot;usb-1&quot;&gt;USB機能の有効化&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;main関数で、&lt;code class=&quot;highlighter-rouge&quot;&gt;USB_CDC_ini();&lt;/code&gt;を呼び出します。&lt;/li&gt;
  &lt;li&gt;mainループで、&lt;code class=&quot;highlighter-rouge&quot;&gt;USB_CDC_task();&lt;/code&gt;を呼び出します。&lt;/li&gt;
  &lt;li&gt;割り込み関数内で、&lt;code class=&quot;highlighter-rouge&quot;&gt;USB_CDC_ISR();&lt;/code&gt;を呼び出します。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-7&quot;&gt;データの送信&lt;/h3&gt;

&lt;p&gt;送りたいデータを&lt;code class=&quot;highlighter-rouge&quot;&gt;usb_tx&lt;/code&gt;というリングバッファにプットすると自動で送信されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ringbuf_put(&amp;amp;usb_tx, data);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ringbuf_put_str(&amp;amp;usb_tx, &quot;Hello World!\n&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-8&quot;&gt;データの受信&lt;/h3&gt;

&lt;p&gt;受信データは&lt;code class=&quot;highlighter-rouge&quot;&gt;usb_rx&lt;/code&gt;というリングバッファに入っているのでポップします。&lt;br /&gt;
受信データの個数は&lt;code class=&quot;highlighter-rouge&quot;&gt;ringbuf_num(&amp;amp;usb_rx)&lt;/code&gt;関数で確認できます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(ringbuf_num(&amp;amp;usb_rx)){
    recieved_data = ringbuf_pop(&amp;amp;usb_rx);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-9&quot;&gt;注意&lt;/h1&gt;

&lt;h2 id=&quot;section-10&quot;&gt;関数の二重呼び出しの禁止&lt;/h2&gt;

&lt;p&gt;PICでは同じ関数の二重呼び出しができません（正常に動作しません）。今回のプログラムでは、メインループと割り込み関数の双方でリングバッファの関数を使用しているので、二重呼び出しに該当します。&lt;/p&gt;

&lt;p&gt;→追記：PICが二重呼び出しを禁止しているというより、リングバッファ関数がリエントラントではないことが問題なようです。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;対策&lt;/h2&gt;

&lt;p&gt;メインループでリングバッファ関数を使用する前に割り込み禁止をします。&lt;/p&gt;

&lt;p&gt;リングバッファ関数を使用し終わったら割り込みを許可します。&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;めんどくさい&lt;/h2&gt;

&lt;p&gt;リングバッファ関数を使うごとに割り込み禁止、許可を繰り返すのはとても面倒ですし、忘れてしまったらバグにつながり、危険です。&lt;/p&gt;

&lt;p&gt;それなので、メインループの中で処理をまとめて割り込み禁止にするとよいと思います。&lt;/p&gt;

&lt;p&gt;ただし、割り込み禁止時間が長くなると別の問題が発生しますので、割り込み禁止時間はできるだけ短くなるように心がけましょう。&lt;/p&gt;

&lt;p&gt;例えば、delay関数などは割り込み禁止中に行ってはいけません。&lt;/p&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 各種設定 */&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// メインループ
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 関数の二重呼び出しを防ぐために割り込み禁止
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理1 */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込み禁止の解除
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ここで割り込みが起きる
&lt;/span&gt;	
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 関数の二重呼び出しを防ぐために割り込み禁止
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理2 */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込み禁止の解除
&lt;/span&gt;        
	&lt;span class=&quot;c1&quot;&gt;// ここで割り込みが起きる
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// delayなどは割り込み許可エリアに書く
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;section-13&quot;&gt;プログラムの例&lt;/h1&gt;

&lt;p&gt;以上の設定がすでにされているMPLAB Xのプロジェクトファイルは&lt;a href=&quot;PIC18F27J53-USB_CDC-sample.zip&quot;&gt;ここ&lt;/a&gt;からダウンロードできます。&lt;/p&gt;

&lt;p&gt;コンパイルすると大量の警告が出ますが、これはライブラリ中の未使用関数の警告です。無視して大丈夫です。&lt;/p&gt;

&lt;h2 id=&quot;mainc&quot;&gt;main.c&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * PIC18F27J53用USB-CDCサンプルプログラム 
 * Date:	2016.01.08
 * Author:	@Ryokeri
 */&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// CONFIG1L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTEN = OFF, PLLDIV = 2, CFGPLLEN = ON, STVREN = OFF, XINST = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG1H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config CPUDIV = OSC1, CP0 = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config OSC = INTOSCPLL, SOSCSEL = LOW, CLKOEC = OFF, FCMEN = OFF, IESO = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTPS = 1024
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config DSWDTOSC = T1OSCREF, RTCOSC = T1OSCREF, DSBOREN = OFF, DSWDTEN = OFF, DSWDTPS = G2
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config IOL1WAY = OFF, ADCSEL = BIT12, MSSP7B_EN = MSK7
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPFP = PAGE_127, WPCFG = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPDIS = OFF, WPEND = PAGE_WPFP, LS48MHZ = SYS48X8
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;xc.h&amp;gt;
#include &amp;lt;My_USB_CDC.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;USB_CDC_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IRCF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OSCTUNEbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PLLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TRISA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00010000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RA7, RA6, RA5, Vcap, RA3, RA2, RA1,  RA0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TRISB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00111111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RB7, RB6, SDA, SCL,  RB3, RB2, RB1,  RB0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TRISC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10111010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RXD, TXD, D+,  D-,   Vusb,RC2, T1OSI,T1OSO
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ANCON0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b11111111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x,x,x,AN4(RA5),AN3(RA3),AN2(RA2),AN1(RA1),AN0(RA0)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ANCON1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00011111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// VBG,x,x,AN12(RB0),AN11(RC2),AN10(RB1),AN9(RB3),AN8(RB2)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PORTB Pull-up Pnable
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;USB_CDC_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 関数の二重呼び出しを防ぐために割り込み禁止
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 受信したデータをそのまま送信する。
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringbuf_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usb_rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringbuf_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usb_rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;ringbuf_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usb_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;USB_CDC_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込み禁止の解除
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;section-14&quot;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;USBでシリアル通信ができると、とても便利です。ぜひ使ってみてください！&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Jan 2016 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2016-01-10-pic-usb/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2016-01-10-pic-usb/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>PIC18F27J53のすすめ</title>
        <description>&lt;h1 id=&quot;pic18f27j53&quot;&gt;PIC18F27J53のいいところ&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;秋月で売っていること&lt;/h2&gt;

&lt;p&gt;電子工作をするうえでこれはとても大事なこと。「秋月で売っているなら使ってみるか」ってなりますよね。&lt;/p&gt;

&lt;p&gt;もちろん、秋月なので値段が安い！！&lt;br /&gt;
&lt;strong&gt;1個270円&lt;/strong&gt;です(2016年1月現在)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;view.jpg&quot; alt=&quot;PIC18F27J53&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;豊富なメモリ&lt;/h2&gt;

&lt;p&gt;我が宿敵のATMEGA328Pのメモリと比べてみましょう。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;機能&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ATMEGA328P&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;PIC18F27J53&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;プログラムメモリ&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;32kB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;128kB&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SRAM&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2kB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;3.8kB&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;メモリがありすぎて、困っちゃうなぁ。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;豊富な周辺モジュール&lt;/h2&gt;

&lt;p&gt;主な機能を表にまとめました。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;機能&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;個数&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;備考&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8bitタイマ&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4個&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;16bitタイマ&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4個&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PWM&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;個&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;内3つは超高機能PWM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;I2C/SPI&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2個&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;マスタ&amp;amp;スレーブ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;12bit-ADC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10ch&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;モジュールは1個&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CTMU&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ADCのピン&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;タッチセンサ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RTCC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;リアルタイムクロック&amp;amp;カレンダー&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;USB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1個&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;スレーブ側&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;タイマとPWMがたくさんあるのでロボットは動かし放題ですね！&lt;/p&gt;

&lt;h2 id=&quot;usb&quot;&gt;USBでパソコンと通信&lt;/h2&gt;

&lt;p&gt;デバックのためにマイコンとパソコンで通信をするときは、UARTで通信するのが一般的ですが、PIC18F27J53ならば、それをUSBでできます。&lt;/p&gt;

&lt;p&gt;USBで接続するとCOMポートが現れるので、UARTとまったく同じように使うことができるのです。&lt;/p&gt;

&lt;p&gt;これで、FT232のUSBシリアル変換モジュールは必要なくなります！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;FT232.jpg&quot; alt=&quot;AE-FT232&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;usb-1&quot;&gt;USBブートローダーに対応&lt;/h2&gt;

&lt;p&gt;USB通信を使って、自分自身のプログラムの書き換えをすることができます。ブートローダです。&lt;/p&gt;

&lt;p&gt;初回に1回だけPICkit3でブートローダプログラムを書きこんでしまえば、2回目からはPICkit3を使わずにUSBで書き込むことができます。これなら、スマートに開発をすることができます。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;周辺モジュールのピンを後から割り当て&lt;/h2&gt;

&lt;p&gt;周辺モジュールが多いので、ピンの重複が気になるところです。しかし、PIC18F27J53は「Remappable Pin」といものがあります。&lt;/p&gt;

&lt;p&gt;Remappable PinはPWMやI2Cなどのピンをプログラム内で指定することができます。これなら好きなピンに機能を割り当てられるので、重複を回避できます。&lt;/p&gt;

&lt;p&gt;さらに基板に合わせてピンを決められるので結構便利です。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;タッチセンサ&lt;/h2&gt;

&lt;p&gt;PIC18F27J53にはCTMUというタッチセンサ機能を持ったモジュールがあります。押しボタンの代わりに使えるのでなかなか便利です。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;リアルタイムクロックモジュール&lt;/h2&gt;

&lt;p&gt;リアルタイムモジュールがあれば、32.768kHzの水晶をつなぐだけで時計とカレンダーをカウントしてくれます。レジスタの数を見るだけで時間や日にちをGETできるのでとても簡単！実用的！&lt;/p&gt;

&lt;p&gt;しかも、スリープ中でも時計は止まらないので、電池でも十分動かすことができます。&lt;/p&gt;

&lt;h1 id=&quot;pic18f27j53-1&quot;&gt;PIC18F27J53の使い方(ハードウェア)&lt;/h1&gt;

&lt;h2 id=&quot;section-6&quot;&gt;ピンアサイン&lt;/h2&gt;

&lt;p&gt;PIC18F27J53のピンアサイン（データシートより）&lt;br /&gt;
&lt;img src=&quot;pin-assign.png&quot; alt=&quot;PIC18F27J53のピンアサイン&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RPx&lt;/strong&gt;というピンが「Remappable Pin」です。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;電源について&lt;/h2&gt;

&lt;p&gt;電源電圧は&lt;strong&gt;3.3V&lt;/strong&gt;です。注意してください。&lt;/p&gt;

&lt;p&gt;誤って5Vを接続したことがありますが、壊れませんでした（PICは強い！）。しかし正常には動作しませんでした。&lt;/p&gt;

&lt;p&gt;上のピンアサインの図の灰色のピンは、5.5Vトレラントなので、5.5Vの入力もそのまま接続できます。&lt;/p&gt;

&lt;p&gt;PIC18F27J53のCoreは2.5Vで動作しています。入力電圧は3.3Vなので、内部にレギュレータが入っています。それの安定化のために「V_DDVORE/V_CAP」端子に10uFのコンデンサをつなぐ必要があります。&lt;/p&gt;

&lt;h2 id=&quot;pic18f27j53-2&quot;&gt;PIC18F27J53の一般的な回路図&lt;/h2&gt;

&lt;p&gt;USBから電源をとるときは、3端子レギュレータを通して3.3Vにするのを忘れずに。&lt;/p&gt;

&lt;p&gt;PIC18F27J53の基本的な回路図&lt;br /&gt;
&lt;a href=&quot;sketch.png&quot;&gt;&lt;img src=&quot;sketch.png&quot; alt=&quot;PIC18F27J53の回路図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SPIやPWMなどは「Remappable」のピンに割り当てればOKです。&lt;/p&gt;

&lt;p&gt;回路図を見てわかるように、実際に使えるGPIO(General Purpose Input Output)は、12本(内10本ADC対応&amp;amp;Remappable)です。&lt;/p&gt;

&lt;p&gt;UARTやI2Cを使わないならば、GPIOはもう少し増えます。&lt;/p&gt;

&lt;p&gt;この回路図をもとに回路を作っていきましょう。&lt;/p&gt;

&lt;h1 id=&quot;pic18f27j53-3&quot;&gt;PIC18F27J53の使い方(ソフトウェア)&lt;/h1&gt;

&lt;p&gt;ソフトウェアもほかのPICと少し違うので少し注意が必要です。&lt;/p&gt;

&lt;h2 id=&quot;configration-bits&quot;&gt;Configration Bits&lt;/h2&gt;

&lt;p&gt;いつも変わらないので、コピペしましょう。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG1L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTEN = ON, PLLDIV = 2, CFGPLLEN = ON, STVREN = OFF, XINST = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG1H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config CPUDIV = OSC1, CP0 = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config OSC = INTOSCPLL, SOSCSEL = LOW, CLKOEC = OFF, FCMEN = OFF, IESO = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTPS = 8
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config DSWDTOSC = T1OSCREF, RTCOSC = T1OSCREF, DSBOREN = OFF, DSWDTEN = OFF, DSWDTPS = G2
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config IOL1WAY = OFF, ADCSEL = BIT12, MSSP7B_EN = MSK7
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPFP = PAGE_127, WPCFG = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPDIS = OFF, WPEND = PAGE_WPFP, LS48MHZ = SYS48X8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-8&quot;&gt;動作クロックの設定&lt;/h2&gt;

&lt;p&gt;クロックは内蔵8MHzをPLLで6倍してできる、48MHzを使うのが一般的です。これはUSBとして使える周波数です。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// OSC Settings
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OSC_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IRCF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 内蔵発振周波数は8MHz
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OSCTUNEbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PLLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// PLL(x6)をEnable
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// クロックソースは内蔵発振or外部クロック
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ここに記述した内容と、Configration Bitsの内容によりクロックソースと周波数が決まります。&lt;/p&gt;

&lt;h2 id=&quot;io&quot;&gt;I/Oポート関連&lt;/h2&gt;

&lt;p&gt;PIC18F27J53には8bitの入出力ポートが3つあります。PORTA,PORTB,PORTCです。&lt;/p&gt;

&lt;p&gt;I/Oの設定はTRISA,TRISB,TRISCレジスタで行います。出力が0で、入力が1です。&lt;/p&gt;

&lt;p&gt;アナログ/デジタルの切り替えはANCONレジスタで行います。アナログが0でデジタルが1で、他のPICとは逆なので注意しましょう。&lt;/p&gt;

&lt;p&gt;内蔵プルアップはポートBのみについているので、デジタル入力はポートBでするのがいいでしょう。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// I/O Port Settings
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 0が出力、1が入力
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TRISA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bxxx1xxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RA7, RA6, RA5, Vcap, RA3, RA2, RA1,  RA0
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TRISB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bxx11xxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RB7, RB6, SDA, SCL,  RB3, RB2, RB1,  RB0
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TRISC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10111x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RXD, TXD, D+,  D-,   Vusb,RC2, T1OSI,T1OSO
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 0がアナログ、1がデジタル
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ANCON0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b111xxxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x,x,x,AN4(RA5),AN3(RA3),AN2(RA2),AN1(RA1),AN0(RA0)
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ANCON1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b000xxxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// VBG,x,x,AN12(RB0),AN11(RC2),AN10(RB1),AN9(RB3),AN8(RB2)
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;INTCON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PORTB Pull-up Pnable
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;※「x」となっているところは自分で適当に0/1を入れる。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;タイマ関連&lt;/h2&gt;

&lt;h3 id=&quot;timer-0-8bit&quot;&gt;Timer 0 (8bit)&lt;/h3&gt;

&lt;p&gt;割り込み周波数 = Fosc / (4 * 256 * 2^prescaler) = 46875/(2^prescaler) [Hz]&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~8
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer0_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T08BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 8-bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// use internal-OSC
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not use prescaler
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// use prescaler
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0PS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Timer 0 Enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// interrupt Flag clear
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;timer-1-16bit&quot;&gt;Timer 1 (16bit)&lt;/h3&gt;

&lt;p&gt;割り込み周波数 = CLOCK / (4 * 65536 * 2^prescaler) [Hz]&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define FOSC_4 0 // Fosc/4
#define T1OSC  2 // Timer 1 OSC
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~3
// clock_select is FOSC_4(Fosc/4) or T1OSC(32.768kHz)
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer1_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1OSC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Drive Crystal
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1CKPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nT1SYNC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No Sync
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RD16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Timer1=16bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IPR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;timer-3-16bit&quot;&gt;Timer 3 (16bit)&lt;/h3&gt;

&lt;p&gt;割り込み周波数 = CLOCK / (4 * 65536 * 2^prescaler) [Hz]&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~3
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer3_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Clock = Fosc/4
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not Drive Crystal
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3CKPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RD163&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Timer3=16bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IPR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIE2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;uart&quot;&gt;UARTの設定&amp;amp;動作&lt;/h2&gt;

&lt;p&gt;ここではとりあえずUART通信できるプログラムを示します。本来ならばリングバッファを使って実装します。長くなりそうなので、そのやり方はまた改めて説明します。&lt;/p&gt;

&lt;p&gt;最初に1回&lt;code class=&quot;highlighter-rouge&quot;&gt;UART_init();&lt;/code&gt;を呼び出せば、後は&lt;code class=&quot;highlighter-rouge&quot;&gt;rx_send(data);&lt;/code&gt;で送信する子ができます。&lt;/p&gt;

&lt;p&gt;ボーレートは115200bpsに設定されています。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// UART初期化関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UART_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TX9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:8-bit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TXEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1:enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYNC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:Asynchronous mode
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BRGH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:High Speed
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:Serial Port enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RX9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:8-bit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:continuous receive enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;BAUDCON1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BRG16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:use 16-bit SPBRG
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;SPBRG1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_XTAL_FREQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SPBRGH1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_XTAL_FREQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IPR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Low Priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Interrupt Enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Peripheral Interrupt Enable
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 送信関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TXIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 前のデータの送信完了まで待つ
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXREG1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-10&quot;&gt;割り込み関数&lt;/h2&gt;

&lt;p&gt;割り込み関数はPIC16FやPIC18Fと同様です。&lt;/p&gt;

&lt;p&gt;今回説明した内容の機能をを使う場合、割り込み関数は以下のようになります。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 割り込み関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// UART受信割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RCREG1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RCREG1を読み取ることで割り込みフラグはクリアされる
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 受信データrecv_charを使った何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ0割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ1割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ3割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIE2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;usb-2&quot;&gt;USB関連&lt;/h2&gt;

&lt;p&gt;USB関連は結構複雑で長くなりそうなので、改めて後日書こうと思います。&lt;/p&gt;

&lt;p&gt;→追記：&lt;a href=&quot;/posts/2016-01-08-pic18f27j53/&quot;&gt;PICでUSB通信&lt;/a&gt;をご覧ください。&lt;/p&gt;

&lt;h2 id=&quot;remappable-pin&quot;&gt;Remappable Pinの使い方&lt;/h2&gt;

&lt;p&gt;同じく長くなりそうなので、後日記事を書きます。&lt;/p&gt;

&lt;h2 id=&quot;rtcc&quot;&gt;RTCC(リアルタイムクロック)モジュールの使い方&lt;/h2&gt;

&lt;p&gt;同じく長くなりそうなので、後日記事を書きます。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;タッチセンサの使い方&lt;/h2&gt;

&lt;p&gt;同じく長くなりそうなので、後日記事を書きます。&lt;/p&gt;

&lt;h2 id=&quot;pwmi2cspi&quot;&gt;PWM、I2C、SPIの使い方&lt;/h2&gt;

&lt;p&gt;同じく長くなりそうなので、(元気があれば)後日記事を書きます。&lt;/p&gt;

&lt;h1 id=&quot;section-12&quot;&gt;プログラムの例&lt;/h1&gt;

&lt;p&gt;このままコピペで動くはずです。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * PIC18F27J53用サンプルプログラム 
 * Date:	2016.01.08
 * Author:	@Ryokeri
 */&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// CONFIG1L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTEN = OFF, PLLDIV = 2, CFGPLLEN = ON, STVREN = OFF, XINST = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG1H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config CPUDIV = OSC1, CP0 = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config OSC = INTOSCPLL, SOSCSEL = LOW, CLKOEC = OFF, FCMEN = OFF, IESO = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG2H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WDTPS = 1024
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config DSWDTOSC = T1OSCREF, RTCOSC = T1OSCREF, DSBOREN = OFF, DSWDTEN = OFF, DSWDTPS = G2
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG3H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config IOL1WAY = OFF, ADCSEL = BIT12, MSSP7B_EN = MSK7
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4L
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPFP = PAGE_127, WPCFG = OFF
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CONFIG4H
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma config WPDIS = OFF, WPEND = PAGE_WPFP, LS48MHZ = SYS48X8
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;xc.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// __delay_ms()関数を使うために周波数を定義
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define _XTAL_FREQ 48000000
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 自作delay関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// OSC Settings
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OSC_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IRCF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 内蔵発振周波数は8MHz
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;OSCTUNEbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PLLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PLL(x6)をEnable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;OSCCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// クロックソースは内蔵発振or外部クロック
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// I/O Port Settings
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IO_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 0が出力、1が入力
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TRISA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00010000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RA7, RA6, RA5, Vcap, RA3, RA2, RA1,  RA0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TRISB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00111111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RB7, RB6, SDA, SCL,  RB3, RB2, RB1,  RB0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TRISC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10111010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RXD, TXD, D+,  D-,   Vusb,RC2, T1OSI,T1OSO
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 0がアナログ、1がデジタル
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ANCON0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b11111111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x,x,x,AN4(RA5),AN3(RA3),AN2(RA2),AN1(RA1),AN0(RA0)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ANCON1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00011111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// VBG,x,x,AN12(RB0),AN11(RC2),AN10(RB1),AN9(RB3),AN8(RB2)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PORTB Pull-up Pnable
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~8
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer0_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T08BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 8-bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// use internal-OSC
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not use prescaler
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// use prescaler
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;T0CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0PS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Timer 0 Enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// interrupt Flag clear
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCON2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR0IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define FOSC_4 0 // Fosc/4
#define T1OSC  2 // Timer 1 OSC
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~3
// clock_select is FOSC_4(Fosc/4) or T1OSC(32.768kHz)
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer1_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock_select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1OSC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Drive Crystal
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1CKPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nT1SYNC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No Sync
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RD16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Timer1=16bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T1CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IPR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// prescaler is 0~3
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timer3_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prescaler is 0~3
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Clock = Fosc/4
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3OSCEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not Drive Crystal
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3CKPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prescaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RD163&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Timer3=16bit timer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;T3CONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IPR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// low priority
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIE2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// UART初期化関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UART_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TX9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:8-bit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TXEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1:enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYNC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:Asynchronous mode
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BRGH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:High Speed
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:Serial Port enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RX9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0:8-bit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RCSTA1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:continuous receive enable
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;BAUDCON1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BRG16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1:use 16-bit SPBRG
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;SPBRG1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_XTAL_FREQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SPBRGH1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_XTAL_FREQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IPR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 送信関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TXIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 送信完了まで待つ
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TXREG1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 割り込み関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// UART受信割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RCREG1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// RCREG1を読み取ることで割り込みフラグはクリアされる
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ0割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ1割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIE1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PIR1bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR1IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TMR1H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0.5秒ごとの割り込みにするため
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// タイマ3割り込み処理
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIE2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PIR2bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TMR3IF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 割り込みフラグをクリア
&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// main関数
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 初期設定
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;OSC_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IO_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Timer0_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Timer1_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1OSC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Timer3_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UART_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 割り込み許可
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INTCONbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GIE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// UART送信
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;H&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;e&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;l&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;l&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;o&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tx_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;section-13&quot;&gt;さいごに&lt;/h1&gt;

&lt;h2 id=&quot;pic&quot;&gt;PICを使おう！&lt;/h2&gt;

&lt;p&gt;僕がググった感じだとPIC18F27J53を使っている人はかなり少ないと思います。この記事を読んで使ってくれる人がいたら嬉しいです。このマイコンは魅力的ですよ～&lt;/p&gt;

&lt;p&gt;PICはとてもおもしろいですね！バンバン使って電子工作を楽しみましょう！&lt;/p&gt;

&lt;p&gt;やっぱり、AVRなんかより&lt;strong&gt;PIC&lt;/strong&gt;の方がいいですね～&lt;/p&gt;

&lt;h2 id=&quot;pic-1&quot;&gt;PIC用ライブラリ&lt;/h2&gt;

&lt;p&gt;僕の作ったPIC用ライブラリのリンクを貼っておきます。参考にしてください。&lt;br /&gt;
&lt;a href=&quot;https://github.com/kerikun11/MPLABXProjects/tree/master/My_library&quot;&gt;PICライブラリ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主に PIC18F27J53 と PIC16F1827、PIC12F1822 用に作られています。&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;何か気づいたら&lt;/h2&gt;

&lt;p&gt;もし、この記事の内容に間違いや疑問をを見つけたら遠慮なく教えてください。Twitterにリプを飛ばしていただけると嬉しいです。&lt;a href=&quot;https://twitter.com/Ryokeri14&quot;&gt;@Ryokeri14&lt;/a&gt;←遠慮なくリプしてください。&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Jan 2016 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2016-01-08-pic18f27j53/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2016-01-08-pic18f27j53/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>yamyでキーボードをカスタマイズ</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;概要&lt;/h1&gt;

&lt;p&gt;Windowsのキーボードをカスタマイズして使いやすくする。&lt;/p&gt;

&lt;h2 id=&quot;capsctrl&quot;&gt;CapsキーをCtrlキーにする&lt;/h2&gt;

&lt;p&gt;WindowのPCは&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt;キーの位置が小指から遠く押しづらい！&lt;br /&gt;
ということで、&lt;code class=&quot;highlighter-rouge&quot;&gt;Caps&lt;/code&gt;の位置に&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt;キーを置く。&lt;br /&gt;
ちなみに、もともと&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt;があったところにも&lt;code class=&quot;highlighter-rouge&quot;&gt;Caps&lt;/code&gt;を置くこともできる。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;半角/全角を切り替えではなく、決めうちにする&lt;/h2&gt;

&lt;p&gt;日本語を入力したくて&lt;code class=&quot;highlighter-rouge&quot;&gt;半角/全角&lt;/code&gt;キーを押したら、英語で入力されてイラッとすることがある。&lt;br /&gt;
そこで、普段使わない&lt;code class=&quot;highlighter-rouge&quot;&gt;変換&lt;/code&gt;キーを日本語切り替えに、&lt;code class=&quot;highlighter-rouge&quot;&gt;無変換&lt;/code&gt;キーを英語切り替えにする。&lt;/p&gt;

&lt;h2 id=&quot;vim&quot;&gt;Vimユーザー必見！&lt;/h2&gt;

&lt;p&gt;Vimで日本語を入力をしたとき、保存などをしようと&lt;code class=&quot;highlighter-rouge&quot;&gt;:w&lt;/code&gt;と打つと、それが全角で入力されて困ることがある。&lt;br /&gt;
そこで、インサートモードからノーマルモードに入ると自動的に日本語をオフにして英語入力にする&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;今回用いた方法&lt;/h2&gt;

&lt;p&gt;キー割り当てを変えるには以下のような方法がある。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Windowsの&lt;code class=&quot;highlighter-rouge&quot;&gt;レジストリ&lt;/code&gt;を書き換える。（玄人向け）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl2Cap.exe&lt;/code&gt;というアプリを使う。（機能が少ない）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yamy.exe&lt;/code&gt;というアプリを使う。(便利)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今回はyamyという便利なアプリを使う。&lt;/p&gt;

&lt;h1 id=&quot;yamy&quot;&gt;yamyインストール方法&lt;/h1&gt;

&lt;h2 id=&quot;section-3&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;yamyはインストールをする必要がない。zip形式でダウンロードして解凍して、yamy.exeを起動するだけ！！（ただし、後述の設定が必要です。）&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;1. ダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://osdn.jp/projects/yamy/&quot;&gt;yamyダウンロードページ&lt;/a&gt;からzipファイルをダウンロードする。&lt;br /&gt;
執筆時点の最新バージョンは0.03。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;2. 解凍&amp;amp;配置&lt;/h2&gt;

&lt;p&gt;あとで起動時に自動起動するように設定するので、わかりやすいところに置いておくとよい。例えば、Cドライブ直下など。&lt;/p&gt;

&lt;h2 id=&quot;pc&quot;&gt;3. PC起動時に自動で起動するように設定&lt;/h2&gt;

&lt;p&gt;Windows10の場合を説明する。下に設定中の画像が貼り付けてあるので参照のこと。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;スタートメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;タスクスケジューラ&lt;/code&gt;を起動する(検索するとよい)。&lt;/li&gt;
  &lt;li&gt;右のほうの&lt;code class=&quot;highlighter-rouge&quot;&gt;タスクを作成&lt;/code&gt;をクリック。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;全般タグ&lt;/code&gt;では、 1. 名前を&lt;code class=&quot;highlighter-rouge&quot;&gt;yamy&lt;/code&gt;とする。 2. &lt;code class=&quot;highlighter-rouge&quot;&gt;最上位の特権で実行する&lt;/code&gt;にチェックする。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;トリガータブ&lt;/code&gt;では、新規→ 1. タスクの開始：&lt;code class=&quot;highlighter-rouge&quot;&gt;ログオン時&lt;/code&gt;にする。 2. 設定：&lt;code class=&quot;highlighter-rouge&quot;&gt;特定のユーザー&lt;/code&gt;で自分だけにする。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;操作タブ&lt;/code&gt;では、新規→ 1. 操作：&lt;code class=&quot;highlighter-rouge&quot;&gt;プログラムの開始&lt;/code&gt; 2. プログラム/スクリプト：&lt;code class=&quot;highlighter-rouge&quot;&gt;参照&lt;/code&gt;からyamy.exeのパスを設定する。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;条件タブ&lt;/code&gt;では、&lt;code class=&quot;highlighter-rouge&quot;&gt;コンピュータをAC電源で使用している場合のみ...&lt;/code&gt;のチェックを外す。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;設定タブ&lt;/code&gt;では、&lt;code class=&quot;highlighter-rouge&quot;&gt;タスクを要求時に実行する&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;要求時に実行中のタスクが終了しない場合、タスクを強制的に停止する&lt;/code&gt;&lt;strong&gt;のみ&lt;/strong&gt;にチェック。他は&lt;strong&gt;外す&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;OKを押して終了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;再起動すると、タスクバーにアイコンが現れる。&lt;/p&gt;

&lt;p&gt;参考画像&lt;br /&gt;
&lt;img src=&quot;02.png&quot; alt=&quot;設定画面02&quot; /&gt;
&lt;img src=&quot;03.png&quot; alt=&quot;設定画面03&quot; /&gt;
&lt;img src=&quot;04.png&quot; alt=&quot;設定画面04&quot; /&gt;
&lt;img src=&quot;05.png&quot; alt=&quot;設定画面05&quot; /&gt;
&lt;img src=&quot;06.png&quot; alt=&quot;設定画面06&quot; /&gt;
&lt;img src=&quot;07.png&quot; alt=&quot;設定画面07&quot; /&gt;
&lt;img src=&quot;08.png&quot; alt=&quot;設定画面08&quot; /&gt;
&lt;img src=&quot;09.png&quot; alt=&quot;設定画面09&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;yamy-1&quot;&gt;yamyの設定&lt;/h1&gt;

&lt;h2 id=&quot;section-6&quot;&gt;オリジナルの設定ファイルを作成&lt;/h2&gt;

&lt;p&gt;yamy.exeのあるフォルダ内に&lt;code class=&quot;highlighter-rouge&quot;&gt;mysettings.mayu&lt;/code&gt;など適当なテキストファイルを作成する。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;設定を書く&lt;/h2&gt;

&lt;p&gt;さっき作ったmysettings.mayuの中に以下を書く。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include &quot;109.mayu&quot;
keymap Global

# My Settings

# ひらがなで 右クリックメニュー
key *ひらがな = &amp;amp;Ignore
key *ひらがな = S-*F10
key *E0ひらがな = &amp;amp;Ignore
key *E0ひらがな = S-*F10

# 変換で IME-ON
key *変換 = &amp;amp;Ignore
key *IC-~IL-変換 = $ToggleIME

# 無変換で IME-OFF
key *無変換 = &amp;amp;Ignore
key *IC-IL-無変換 = $ToggleIME
key *E0無変換 = &amp;amp;Ignore
key *IC-IL-E0無変換 = $ToggleIME
   
# Caps/英数で Ctrl
mod Control += 英数
key *英数  = *LControl
mod Control += E0英数
key *E0英数  = *LControl

# For Cygwin
window Cygwin /cygwin/ : Global
  key A-v = RButton # Paste

  key IL-~IC-Esc = $ToggleIME Esc   
  key IC-Esc = Esc

  key IL-*IC-C-LeftSquareBracket = Esc $ToggleIME Esc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;次に、同じフォルダ内にある&lt;code class=&quot;highlighter-rouge&quot;&gt;yamy.ini&lt;/code&gt;テキストエディタで開いて、下のほうの&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;escapeNLSKeys=0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;を&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;escapeNLSKeys=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とする。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;作った設定を読み込む&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;タスクバーのアイコンを右クリックして設定を開く。&lt;/li&gt;
  &lt;li&gt;追加ボタンを押す。&lt;/li&gt;
  &lt;li&gt;名前は適当なものを。ファイルは&lt;code class=&quot;highlighter-rouge&quot;&gt;mysettings.mayu&lt;/code&gt;。シンボルには&lt;code class=&quot;highlighter-rouge&quot;&gt;-DUSE109&lt;/code&gt;と書く。&lt;/li&gt;
  &lt;li&gt;OKを押して画面を閉じる。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;10.png&quot; alt=&quot;設定画面10&quot; /&gt;
&lt;img src=&quot;11.png&quot; alt=&quot;設定画面11&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;任務完了&lt;/h1&gt;

&lt;p&gt;これで設定は完了。&lt;/p&gt;

&lt;p&gt;あとは、自分でmysettingsにいろいろ書けば好きな割り当てができる。さらに、タスクバーのアイコンを右クリックして「調査」を開くと、実際にキーボードを押したときそのボタンが何に割り当てられているか教えてくれるので便利！&lt;/p&gt;

&lt;p&gt;キーの名前は、同じディレクトリ内の&lt;code class=&quot;highlighter-rouge&quot;&gt;109.mayu&lt;/code&gt;というファイルの中に書いてあるので、そこで確認できる。&lt;/p&gt;

&lt;h1 id=&quot;section-10&quot;&gt;参考サイト&lt;/h1&gt;

&lt;p&gt;参考にさせていただきました。ありがとうございます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://rcmdnk.github.io/blog/tags/yamy/&quot;&gt;rcmdnk’s blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/kaosf/20111122/1321969965&quot;&gt;kaosfield blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 07 Jan 2016 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2016-01-07-yamy/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2016-01-07-yamy/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>ESP8266で赤外線学習リモコン</title>
        <description>&lt;h2 id=&quot;esp8266&quot;&gt;ESP8266とは&lt;/h2&gt;

&lt;h3 id=&quot;wifi&quot;&gt;日本の技適を取得済みWiFiモジュール！！&lt;/h3&gt;

&lt;p&gt;ESP8266とはWiFi制御用マイコンです。もともと中国で流行っていました。そのマイコンを内蔵したESP-WROOM-02というWiFiモジュールが日本の技適を取得したので、日本でも人気になりました。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;とにかく安い！&lt;/h3&gt;

&lt;p&gt;その価格はなんと、たったの&lt;strong&gt;550円&lt;/strong&gt;です！！&lt;br /&gt;
&lt;a href=&quot;http://akizukidenshi.com/catalog/g/gM-09607/&quot;&gt;ESP-WROOM-02&lt;/a&gt;←秋月電子などで売っています。&lt;br /&gt;
&lt;img src=&quot;esp8266.jpg&quot; alt=&quot;ESP8266&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;開発の簡単さも流行りの理由&lt;/h3&gt;

&lt;p&gt;このマイコンのすごいところは、&lt;strong&gt;Arduino IDE&lt;/strong&gt;で開発ができることです。とても簡単に開発ができます。関数もArduinoで使われているものと同じ名前です。Arduinoと同じように書き込みボタンを押せば書き込みができます。&lt;/p&gt;

&lt;p&gt;さらに、Arduinoをよく使う人は知っている通り、Arduino IDEに付属したサンプルプログラムがとても充実しています。それを書き込むだけでそれなりのことができます。&lt;/p&gt;

&lt;p&gt;それを少しずついじっているといつの間にかオリジナルのプログラムが完成しているという感じです。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;スペックが十分すぎる…&lt;/h3&gt;

&lt;p&gt;しかも、このESP8266マイコンはスペックがかなり高く、WiFiモジュールとしてだけでなく格安マイコンとしても十分使うことができるほどです。メモリが十分にあるので、自由なプログラムを書くことができます。&lt;/p&gt;

&lt;p&gt;マイコンは、&lt;strong&gt;32bit&lt;/strong&gt;マイコンです。&lt;br /&gt;
動作周波数は、&lt;strong&gt;160MHz&lt;/strong&gt;まで対応しています。&lt;br /&gt;
外付けのSPIFlashがついていて、プログラムメモリが&lt;strong&gt;１MB&lt;/strong&gt;ほどあります。&lt;br /&gt;
RAMも大量にあって、&lt;strong&gt;81kB&lt;/strong&gt;もあります。&lt;/p&gt;

&lt;p&gt;参考までにPICやAVRマイコンなどはROMが32kBくらい、RAMは4kBほどです。&lt;/p&gt;

&lt;p&gt;今回はこのWiFiモジュールで遊びます。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;赤外線学習リモコン&lt;/h2&gt;

&lt;p&gt;赤外線学習リモコンとは自作の赤外線リモコンです。一番最初に本物のリモコンの信号を記憶して、2回目からはその記憶した赤外線を発します。こうしてリモコンを複製することができるのです。&lt;/p&gt;

&lt;p&gt;今回は&lt;strong&gt;WiFi経由&lt;/strong&gt;でスマホからコントロールできる赤外線学習リモコンを作りました。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;作ったもの&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;本体&lt;/h3&gt;

&lt;p&gt;今回は試作なのでブレッドボードで作りました。&lt;br /&gt;
右に４つの赤外線LEDがついています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;body.jpg&quot; alt=&quot;ESP8266-Remocon&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wifi-1&quot;&gt;WiFiの設定&lt;/h3&gt;

&lt;p&gt;電源を入れるとまずWiFiのアクセスポイントになって、「ESP8266-Remocon」というWiFi電波を発します。スマホなどでそれにつないで、「http://esp8266.local」に接続すると下の画面が表示されます。&lt;/p&gt;

&lt;p&gt;ここで、家のWiFiのSSIDを選んでパスワードを入力すると、家のWiFiにアクセスを試みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;page_wifi.png&quot; alt=&quot;ESP8266-Remocon&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;スマホでの操作画面&lt;/h3&gt;

&lt;p&gt;うまく接続できると、下の画面が出てきて、リモコンが使えるようになります。&lt;/p&gt;

&lt;p&gt;リモコンを登録するときは下の好きなチャンネルの欄にボタンの名前を書いて「Recode」ボタンを押すとリモコンのサンプリングを開始します。リモコンの登録がうまくいくと、上のボタンにさっき入力した名前が表示されてボタンが使えるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;page_button.png&quot; alt=&quot;ESP8266-Remocon&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;IoT(Internet of Things)&lt;/strong&gt;という言葉があります。&lt;br /&gt;
&lt;strong&gt;人と人が&lt;/strong&gt;インターネットにつなぐだけでなく&lt;strong&gt;ものとものが&lt;/strong&gt;互いにインターネットでつながり、相互に作用し合うということです。&lt;br /&gt;
ESP8266 WiFiモジュールはIoTに最適です。より多くのものがインターネットによりつながるといいですね！&lt;/p&gt;

&lt;p&gt;このWiFiモジュールを使ってとりあえず実用的なものができました。&lt;br /&gt;
ESP8266はとにかくすごいマイコンです！みなさんもぜひ使ってみてください！&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Dec 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-12-30-ir-station/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-12-30-ir-station/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Cygwinの使い方</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;概要&lt;/h1&gt;

&lt;p&gt;Cygwinとは仮想UNIX環境をつくるソフトである。WindowsはUNIXベースの環境ではないので、コマンドライン操作がとてもやりづらい。Cygwinを使えば、C言語をはじめとしてrubyやpythonなど様々な開発をWindows上でできる。しかも、GUIでなくCUIなのでとても軽い。&lt;/p&gt;

&lt;h1 id=&quot;cygwin&quot;&gt;Cygwinのインストール手順&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin.com&lt;/a&gt;からCygwinのインストーラをダウンロードする。32bitマシン用と64bitマシン用があるので適当なほうを選ぶ。&lt;/li&gt;
  &lt;li&gt;DLしたインストーラを起動する。&lt;/li&gt;
  &lt;li&gt;デフォルトの設定で次へを押す。&lt;/li&gt;
  &lt;li&gt;URLを選択するところでは&lt;code class=&quot;highlighter-rouge&quot;&gt;~~~.jp&lt;/code&gt;など、日本のURLを選ぶとダウンロードが早く終わる。&lt;/li&gt;
  &lt;li&gt;インストールするファイルを選ぶところでは、一番上で&lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;と検索して、&lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt;の中の&lt;code class=&quot;highlighter-rouge&quot;&gt;wget: Utility to ~&lt;/code&gt;の回転矢印アイコンをクリックして次へを押し、インストールする。他のソフトは後で&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-cyg&lt;/code&gt;でインストールするので、今はこれだけでいい。&lt;/li&gt;
  &lt;li&gt;インストールしたらcygwinを開く。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;インストール画像&lt;br /&gt;
&lt;img src=&quot;01.png&quot; alt=&quot;インストール画面01&quot; title=&quot;インストール画面01&quot; /&gt; 
&lt;img src=&quot;02.png&quot; alt=&quot;インストール画面02&quot; title=&quot;インストール画面02&quot; /&gt; 
&lt;img src=&quot;03.png&quot; alt=&quot;インストール画面03&quot; title=&quot;インストール画面03&quot; /&gt; 
&lt;img src=&quot;04.png&quot; alt=&quot;インストール画面04&quot; title=&quot;インストール画面04&quot; /&gt; 
&lt;img src=&quot;05.png&quot; alt=&quot;インストール画面05&quot; title=&quot;インストール画面05&quot; /&gt; 
&lt;img src=&quot;06.png&quot; alt=&quot;インストール画面06&quot; title=&quot;インストール画面06&quot; /&gt; 
&lt;img src=&quot;07.png&quot; alt=&quot;インストール画面07&quot; title=&quot;インストール画面07&quot; /&gt; 
&lt;img src=&quot;08.png&quot; alt=&quot;インストール画面08&quot; title=&quot;インストール画面08&quot; /&gt; 
&lt;img src=&quot;09.png&quot; alt=&quot;インストール画面09&quot; title=&quot;インストール画面09&quot; /&gt; 
&lt;img src=&quot;10.png&quot; alt=&quot;インストール画面10&quot; title=&quot;インストール画面10&quot; /&gt; 
&lt;img src=&quot;11.png&quot; alt=&quot;インストール画面11&quot; title=&quot;インストール画面11&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;apt-cyg&quot;&gt;apt-cygを使う&lt;/h1&gt;

&lt;h2 id=&quot;apt-cyg-1&quot;&gt;apt-cygとは&lt;/h2&gt;

&lt;p&gt;apt-cygとは普通のシェルスクリプトで、新しくソフトウェアをインストールするときに使う。Macintoshのyumやlinuxのapt-getとほぼ同じ使い方ができる。&lt;/p&gt;

&lt;h2 id=&quot;apt-cyg-2&quot;&gt;apt-cygを使う理由&lt;/h2&gt;

&lt;p&gt;cygwinでは、新たにソフトをインストールする際には、cygwinインストール時に使ったsetup.exeを使うのが一般的である。&lt;/p&gt;

&lt;p&gt;しかし、setup.exeで欲しいソフトをインストールするとき、そのソフトが他のソフトに依存していることがある。それなのに欲しいソフトだけインストールしても、エラーになってしまう。これを解決するには、Googleでそのソフトの依存関係を調べて、必要なソフトをすべてsetup.exeで選んでインストールしなければならない。はっきり言ってめんどくさい。&lt;/p&gt;

&lt;p&gt;めんどくさいので、setup.exeに表示された&lt;strong&gt;すべてのソフト&lt;/strong&gt;をインストールしてみたことがある。これなら依存関係があっても全部あるんだから大丈夫！と思った。&lt;/p&gt;

&lt;p&gt;が、なんど１晩かかってもDLが終わらず、インストールが終わった後にサイズを確認したら&lt;strong&gt;60GB&lt;/strong&gt;も容量を取られてしまった。もう絶対にやらない。&lt;/p&gt;

&lt;h2 id=&quot;apt-cyg-3&quot;&gt;apt-cygをインストール&lt;/h2&gt;

&lt;p&gt;Cygwinを起動したら、以下のコマンドを実行する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg
$ chmod 755 apt-cyg
$ mv apt-cyg /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;インストール画面
&lt;img src=&quot;12.png&quot; alt=&quot;インストール画面12&quot; title=&quot;インストール画面12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これでインストールは完了。&lt;/p&gt;

&lt;p&gt;あとは、欲しいソフトをインストールする&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-cyg install vim
$ apt-cyg install make
$ apt-cyg install gcc-core
$ apt-cyg install gcc-g++
$ apt-cyg install zsh
$ apt-cyg install tmux
$ apt-cyg install git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;などなど&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;おまけ（各種設定）&lt;/h1&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windowsのコピペを使う&lt;/h2&gt;

&lt;p&gt;Cygwinのデフォルトの設定ではWindowsのCtrl+C,Ctrl+Vが使えない。これでは不便なので使えるようにする。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cygwinのウィンドウの左上のCygwinアイコンを右クリックする。&lt;/li&gt;
  &lt;li&gt;optionを開く&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Keys&lt;/code&gt;の中の一番下の&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+letter shortcuts&lt;/code&gt;にチェックを入れる。&lt;/li&gt;
  &lt;li&gt;ついでに&lt;code class=&quot;highlighter-rouge&quot;&gt;Looks&lt;/code&gt;のなかの&lt;code class=&quot;highlighter-rouge&quot;&gt;Cursor&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt;にするとよい。&lt;/li&gt;
  &lt;li&gt;さらに&lt;code class=&quot;highlighter-rouge&quot;&gt;Looks&lt;/code&gt;のなかの&lt;code class=&quot;highlighter-rouge&quot;&gt;Transparency&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;Medium&lt;/code&gt;か&lt;code class=&quot;highlighter-rouge&quot;&gt;High&lt;/code&gt;にするとブラウザなどを下に置いたときに透かして見れるので便利。&lt;/li&gt;
  &lt;li&gt;saveで終了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Shiftキー＋いつものコピペキーでコピペができる。&lt;/p&gt;

&lt;p&gt;設定画像&lt;br /&gt;
&lt;img src=&quot;13.png&quot; alt=&quot;インストール画面13&quot; title=&quot;インストール画面13&quot; /&gt; 
&lt;img src=&quot;14.png&quot; alt=&quot;インストール画面14&quot; title=&quot;インストール画面14&quot; /&gt; 
&lt;img src=&quot;15.png&quot; alt=&quot;インストール画面15&quot; title=&quot;インストール画面15&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;zsh&quot;&gt;デフォルトのシェルをzshにする&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-cyg install zsh
$ ls /etc/passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここで&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;が存在しないときは以下のコマンドを打ち作る。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkpasswd &amp;gt; /etc/passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;作ったら開く&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vim /etc/passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一番下のほうの自分のユーザー名のところで、&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/zsh&lt;/code&gt;に変更する。&lt;br /&gt;
あとはCygwinを再起動すればデフォルトがzshellになっている。&lt;/p&gt;

&lt;p&gt;ついでに僕の&lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;を書いておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kerikun11/dotfiles/blob/master/.zshrc&quot;&gt;.zshrc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;シェルを起動するとsshのkeyを求められるので入力すると、2回目からは自動で入力してくれるようになってる。&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Dec 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-12-04-cygwin/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-12-04-cygwin/</guid>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>Raspberry Pi で NAS 作り</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;概要&lt;/h1&gt;

&lt;p&gt;NASがほしい！&lt;br /&gt;
じゃあ作ろう。&lt;/p&gt;

&lt;p&gt;スペック&lt;br /&gt;
サーバ：Raspberrypi 2 Type B&lt;br /&gt;
HDD：Western Digital 2TB 3.5 inch&lt;br /&gt;
転送速度：10MB/s（ラズパイのイーサーネットが100Baseなので仕方ない…）&lt;/p&gt;

&lt;h1 id=&quot;samba&quot;&gt;Sambaをインストール&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install samba
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;hdd&quot;&gt;HDDを設定する&lt;/h1&gt;

&lt;h2 id=&quot;hdd-1&quot;&gt;HDDをラズパイに繋ぐ。&lt;/h2&gt;
&lt;p&gt;ポータブルHDDだと電力が足りなくなるかもしれないので、3.5inchのHDDを使用した。&lt;/p&gt;

&lt;h2 id=&quot;hdd-2&quot;&gt;HDDをフォーマット＆マウント&lt;/h2&gt;

&lt;p&gt;HDDをラズパイに繋ぐ&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lsblk
NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda 		  8:0    0  1.8T  0 disk 
└─sda1		  8:1    0  1.8T  0 part 
mmcblk0		179:0    0 58.2G  0 disk 
├─mmcblk0p1	179:1    0    1G  0 part 
├─mmcblk0p2	179:2    0    1K  0 part 
├─mmcblk0p3	179:3    0   32M  0 part 
├─mmcblk0p5	179:5    0   60M  0 part /boot
└─mmcblk0p6	179:6    0 57.1G  0 part /
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;HDDが&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda&lt;/code&gt;につながれていることがわかる。&lt;br /&gt;
今までのパーティションを消して、新たに作る。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo fdisk /dev/sda
Command (m for help): d
Command (m for help): n
Enter を 連打
Command (m for help): w
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;HDDをフォーマット&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkfs.ext4 /dev/sda1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;フォーマットが完了したらマウント&lt;br /&gt;
毎回同じ所にマウントされるように設定する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkdir /media/hdd-2tb
$ sudo blkid /dev/sda1
/dev/sda1: UUID=&quot;21600e41-2f5a-4954-8575-5e89f0e11560&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;983fd59f-2b2b-41a4-b409-acac2fa62f5c&quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここで表示されるUUIDをコピーしておく。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここの最下部に以下を追記(UUIDはさっきコピーしたもの)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UUID=*************	/media/hdd-2tb	ext4	defaults	0	0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ラズパイを再起動&lt;br /&gt;
これでしっかりマウントされているはず。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lsblk
NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda 		  8:0    0  1.8T  0 disk 
└─sda1		  8:1    0  1.8T  0 part /hdd-2tb
mmcblk0		179:0    0 58.2G  0 disk 
├─mmcblk0p1	179:1    0    1G  0 part 
├─mmcblk0p2	179:2    0    1K  0 part 
├─mmcblk0p3	179:3    0   32M  0 part 
├─mmcblk0p5	179:5    0   60M  0 part /boot
└─mmcblk0p6	179:6    0 57.1G  0 part /
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;共有フォルダの作成と所有権の変更&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /media/hdd-2tb
$ sudo mkdir share
$ sudo chown *myuser* share
$ sudo chgrp *myuser* share
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;samba-1&quot;&gt;Sambaの設定&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/samba/smb.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここにの最下部に以下を追記&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[share]
   path = /media/hdd-2tb
   read only = no
   browsable = yes
   guest ok = yes
   force user = kerikun11
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ファイアウォールを設定している場合はSamba用にポートを開放&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ufw allow 137/udp
$ sudo ufw allow 138/udp
$ sudo ufw allow 139/tcp
$ sudo ufw allow 445/tcp

$ sudo service ufw restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sambaを起動&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service samba-ad-bc start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでつながるはず。&lt;/p&gt;

&lt;h1 id=&quot;windows&quot;&gt;Windowsからアクセス&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;エクスプローラーの左側のナビゲーションウィンドウのネットワークを開く。&lt;/li&gt;
  &lt;li&gt;RASPBERRYPIがあるのでそれを開く。&lt;/li&gt;
  &lt;li&gt;shareというフォルダを開けたら完成！&lt;/li&gt;
  &lt;li&gt;shareというフォルダを右クリックで「ネットワークドライブの割り当て」とすると、マイコンピュータにあたかもHDDが繋がれているかのように表示されて便利に使える。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 23 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-23-samba/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-23-samba/</guid>
        
        <category>電子工作</category>
        
        <category>ラズパイ</category>
        
        <category>サーバー</category>
        
        <category>Samba</category>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>ファイアウォールの設定</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ufw

$ sudo ufw status
Status: inactive

$ sudo ufw enable
Command may disrupt existing ssh connections. Proceed with operation (y|n)? 
y

$ sudo ufw disenable
$ sudo ufw reset
Resetting all rules to installed defaults. This may disrupt existing ssh connections. Proceed with operation (y|n)?
y

$ sudo ufw disenable
$ sudo ufw default deny
$ sudo ufw allow 80
$ sudo ufw allow 22
$ sudo ufw enable

$ sudo ufw status
Status: active
 
 To                         Action      From
 --                         ------      ----
 22		                    ALLOW       Anywhere
 80                         ALLOW       Anywhere
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 17 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://kerikeri.top/posts/2015-11-17-firewall/</link>
        <guid isPermaLink="true">http://kerikeri.top/posts/2015-11-17-firewall/</guid>
        
        
        <category>memo</category>
        
      </item>
    
  </channel>
</rss>
